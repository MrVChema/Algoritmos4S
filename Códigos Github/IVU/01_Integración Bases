
# -----------------------------------------------------------------------------------
# Integración de bases de datos de proyectos y variables
# -----------------------------------------------------------------------------------

# ---- 1. Limpiar el entorno y cargar librerías necesarias ----
rm(list = ls())

library(sf)
library(readr)
library(readxl)
library(dplyr)
library(janitor)
library(tidyr)
library(tibble)
library(leaflet)
library(readr)  # para parse_number()

## Desactivar el uso de s2 (opcional, según complejidad de las geometrías)
sf::sf_use_s2(FALSE)

# ---- 2. Cargar las fuentes de datos ----

## 2.1. Archivos CSV y XLSX
### Proyectos (vivienda vertical)
proyectos <- read_csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[01] PROYECTOS/[01] VIVIENDA VERTICAL/Proyectos Integrados_ZMM.csv')

# 2.2 Función mejorada para convertir coordenadas DMS a decimal
convertir_dms <- function(coord_str) {
  # Si ya es numérico, devolverlo directamente
  if(is.numeric(coord_str)) return(coord_str)
  
  # Detectar si es formato decimal como texto
  if(grepl("^-?[0-9]+\\.[0-9]+$", coord_str)) {
    return(as.numeric(coord_str))
  }
  
  # Extraer dirección (N, S, E, W)
  direccion <- NA
  if(grepl("[NSEW]", coord_str, ignore.case = TRUE)) {
    direccion <- toupper(regmatches(coord_str, regexpr("[NSEW]", coord_str, ignore.case = TRUE)))
  }
  
  # Para formato con símbolos: 25°40'0.13"N
  if(grepl("°|'|\"", coord_str)) {
    # Extrae números usando expresiones regulares
    grados <- as.numeric(regmatches(coord_str, regexpr("^-?[0-9]+(?=°)", coord_str, perl = TRUE)))
    minutos <- as.numeric(regmatches(coord_str, regexpr("(?<=°)[0-9]+(?=')", coord_str, perl = TRUE)))
    
    # Extrae segundos - puede ser opcional
    segundos_match <- regexpr("(?<=')[0-9]+(\\.[0-9]+)?(?=\")", coord_str, perl = TRUE)
    segundos <- if(segundos_match > 0) {
      as.numeric(regmatches(coord_str, segundos_match))
    } else {
      0
    }
  } else if(grepl("[0-9]+ [0-9]+ [0-9]+", coord_str)) {
    # Para formato con espacios: 25 40 0.13 N
    partes <- strsplit(gsub("[^0-9\\. NSEW-]", "", coord_str), " ")[[1]]
    partes <- partes[partes != ""]
    
    grados <- as.numeric(partes[1])
    minutos <- if(length(partes) > 1) as.numeric(partes[2]) else 0
    segundos <- if(length(partes) > 2) as.numeric(partes[3]) else 0
  } else {
    # Si no coincide con ningún formato conocido, intentar convertir directamente
    return(as.numeric(gsub("[^0-9\\.-]", "", coord_str)))
  }
  
  # Verificar que los valores son razonables
  if(is.na(grados)) {
    warning("No se pudieron extraer los grados de: ", coord_str)
    return(NA)
  }
  
  if(is.na(minutos)) minutos <- 0
  if(is.na(segundos)) segundos <- 0
  
  # Aplicar la fórmula de conversión DMS a decimal
  decimal <- grados + minutos/60 + segundos/3600
  
  # Ajustar el signo según la dirección
  if(!is.na(direccion) && direccion %in% c("S", "W")) decimal <- -decimal
  
  # Para longitudes oeste, asegurar que sea negativo
  if(abs(decimal) > 90 && decimal > 0) {
    # Probablemente es una longitud oeste sin signo negativo
    decimal <- -decimal
  }
  
  return(decimal)
}

# Función específica para coordenadas manuales - método alternativo
convertir_coordenadas_manualmente <- function(dms_str, tipo) {
  # Eliminar espacios extras
  dms_str <- trimws(dms_str)
  
  # Casos específicos
  if(tipo == "latitud") {
    if(dms_str == "25°40'0.13\"N") {
      return(25 + 40/60 + 0.13/3600)  # = 25.66670
    }
  } else if(tipo == "longitud") {
    if(dms_str == "100°19'0.12\"W") {
      return(-(100 + 19/60 + 0.12/3600))  # = -100.31670
    }
  }
  
  # Si no es un caso específico, usar la función general
  return(convertir_dms(dms_str))
}

# Datos del nuevo proyecto - MODIFICAR ESTOS DATOS
nombre_proyecto <- "Proyecto: Frida Chilaquiles"
desarrollador <- "Desarrollador XYZ"
municipio <- "San Pedro Garza García"

# Coordenadas en formato DMS
latitud_dms <- "25°39'24.18\"N"
longitud_dms <- "100°21'50.10\"W"

# Convertir coordenadas manualmente para mayor seguridad
lat_decimal <- convertir_coordenadas_manualmente(latitud_dms, "latitud")
lon_decimal <- convertir_coordenadas_manualmente(longitud_dms, "longitud")

# También probar con la función general
lat_decimal2 <- convertir_dms(latitud_dms)
lon_decimal2 <- convertir_dms(longitud_dms)

# Imprimir todas las conversiones para verificar
cat("Coordenadas convertidas (método manual):", lat_decimal, lon_decimal, "\n")
cat("Coordenadas convertidas (método general):", lat_decimal2, lon_decimal2, "\n")

# Verificación de coordenadas
coords_correctas <- lat_decimal >= -90 && lat_decimal <= 90 && 
  lon_decimal >= -180 && lon_decimal <= 180

if(!coords_correctas) {
  # Si la conversión automática falló, usar coordenadas conocidas para Monterrey
  cat("ADVERTENCIA: ¡Conversión de coordenadas incorrecta! Usando coordenadas aproximadas para San Pedro Garza García\n")
  lat_decimal <- 25.6667  # Aproximado para San Pedro Garza García
  lon_decimal <- -100.4167  # Aproximado para San Pedro Garza García
}

# Crear dataframe para el nuevo proyecto
nuevo_proyecto <- data.frame(
  Proyecto = nombre_proyecto,
  Desarrollador = desarrollador,
  Municipio = municipio,
  Latitud = lat_decimal,
  Longitud = lon_decimal,
  Estatus = "Nuevo"
)

# Añadir otras columnas existentes en proyectos con NA
cols_faltantes <- setdiff(names(proyectos), names(nuevo_proyecto))
for(col in cols_faltantes) {
  nuevo_proyecto[[col]] <- NA
}

# Integrar el nuevo proyecto a la base existente
proyectos <- bind_rows(proyectos, nuevo_proyecto)

### Variables de áreas verdes y datos demográficos
verdes <- read_xlsx('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[03] VARIABLES/[01] AREAS VERDES/AreasVerdes_Zona_V2.xlsx')
demograficos <- read_xlsx('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[03] VARIABLES/[03] DEMOGRAFICOS/Demograficos_AGEBS.xlsx')

## 2.2. Archivos KML
### Polígonos NSE
nse_kml_path <- '/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[02] KML_KMZ/[01] NSE/NSE-Monterrey.kml'
nse_layers <- st_layers(nse_kml_path)
print(nse_layers)

### Leer todas las capas del KML de NSE y combinarlas
nse_data_list <- lapply(nse_layers$name, function(x) {
  st_read(nse_kml_path, layer = x)
})
nse_data <- do.call(rbind, nse_data_list)

### Polígonos de Zonas REDI
zonas_redi <- st_read('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[02] KML_KMZ/[03] ZONAS REDI/ZMM_REDI_2024.kml')

### Polígonos de parques importantes (KML)
parques_kml <- st_read('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[03] VARIABLES/[01] AREAS VERDES/Parques_Peso.kml')

#### Si en el KML de parques la columna que identifica el parque se llama "Name", renómbrala a "nombre"
if("Name" %in% names(parques_kml)){
  parques_kml <- parques_kml %>% rename(nombre = Name)
}

## 2.3. Cargar datos de amenidades
amenidades <- read_excel('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[03] VARIABLES/[06] FUNCIONALIDAD Y AMENIDADES/Qlik Sense - Tabla Amenidades_ Desglose de Amenidades x Proy... MTY.xlsx')

### Limpiar nombres y convertir Sí/No a 1/0
amenidades_clean <- amenidades %>%
  janitor::clean_names() %>%
  rename(Proyecto = proyecto) %>%
  mutate(across(c(control_de_acceso:vestidores), ~ ifelse(.x == "Sí", 1, 0))) %>%
  select(-c(segmento, ciudad, zona, precio_promedio_inventario, absorcion_historica, absorcioo_del_ult_q))


# ---- 3. Convertir los datos a objetos espaciales (sf) y renombrar columnas ----

## 3.1. Proyectos: Se asume que las columnas "Longitud" y "Latitud" contienen las coordenadas (WGS84)
proyectos_sf <- st_as_sf(proyectos,
                         coords = c("Longitud", "Latitud"),
                         crs = 4326,
                         remove = FALSE)

# Verificar que los datos espaciales tienen puntos válidos
print(paste("Número de proyectos:", nrow(proyectos_sf)))
print("Comprobando coordenadas del nuevo proyecto:")
print(proyectos[proyectos$Proyecto == nombre_proyecto, c("Proyecto", "Latitud", "Longitud")])

## 3.2. Áreas verdes: Usan las columnas "longitud" y "latitud" (en minúscula)
verdes_sf <- st_as_sf(verdes,
                      coords = c("longitud", "latitud"),
                      crs = 4326,
                      remove = FALSE)

## 3.3. Datos demográficos: La columna "geometry" está en formato WKT
demograficos_sf <- demograficos %>%
  mutate(geometry = st_as_sfc(geometry, crs = 4326)) %>%
  st_as_sf()

## 3.4. Renombrar columnas para evitar conflictos en las uniones espaciales
nse_data_renamed <- nse_data %>%
  rename(nse_name = Name,
         nse_description = Description)

zonas_redi_renamed <- zonas_redi %>%
  rename(zona_name = Name,
         zona_description = Description)

# ---- 4. Uniones espaciales e integración de la información ----

## 4.1. Calcular variables demográficas en radio de 1 km (nuevo enfoque)
### Ajustar variables a la categoría correcta
demograficos_sf <- demograficos_sf %>%
  mutate(hogares2020 = as.numeric(hogares2020))

### Transformar a CRS proyectado adecuado (UTM 14N para Monterrey)
proyectos_proj <- st_transform(proyectos_sf, 32614)
demograficos_proj <- st_transform(demograficos_sf, 32614)

### Calcular área de cada AGEB
demograficos_proj <- demograficos_proj %>% 
  mutate(ageb_area = st_area(.))

### Crear buffer de 1 km alrededor de cada proyecto
proyectos_buffer <- st_buffer(proyectos_proj, 1000)

### Encontrar intersecciones y calcular áreas de superposición
intersecciones <- st_intersection(
  st_make_valid(proyectos_buffer),
  st_make_valid(demograficos_proj)
) %>% 
  mutate(
    interseccion_area = st_area(.),
    proporcion = as.numeric(interseccion_area / ageb_area)
  ) %>% 
  filter(proporcion > 0.001)  # Filtrar superposiciones mínimas

### Lista de variables demográficas a agregar (ajusta según necesidades)
variables_demograficas <- c(
  "pob2020", "hogares2020", "viv2020", "habitadas2020", 
  "migrantes2020", "pob_ocupada_2020", "pob2010", 
  "hogares2010", "viv2010", "pob_ocupada_2010",
  "independiente", "empty_nesters", "separados_hijos",
  "pareja_sin_hijos", "pareja_hijos_10", "pareja_hijos_21",
  "pareja_hijos_1120", "joven_sin_hijos", "soltero_adulto",
  "soltero_joven", "prestada", "propia", "propia_pagando",
  "rentada", "intestada_litigio", "pob_masc", "pob_fem"
)

### Agregar variables ponderadas por la proporción de área
demografia_agregada <- intersecciones %>% 
  st_drop_geometry() %>% 
  group_by(Proyecto) %>% 
  summarise(
    across(
      all_of(variables_demograficas),
      ~sum(.x * proporcion, na.rm = TRUE),
      .names = "{.col}_1km"
    ),
    .groups = "drop"
  )

### Unir los datos agregados al dataset principal
proyectos_sf <- proyectos_sf %>% 
  left_join(demografia_agregada, by = "Proyecto")

## 4.2. Unir información de NSE: Agregar la zona NSE a cada proyecto.
proyectos_sf <- st_join(proyectos_sf,
                        nse_data_renamed,
                        join = st_intersects,
                        left = TRUE)

## 4.3. Unir información de zonas REDI
proyectos_sf <- st_join(proyectos_sf,
                        zonas_redi_renamed,
                        join = st_intersects,
                        left = TRUE)

## 4.4. Calcular el parque más cercano usando la base "verdes"
nearest_idx <- st_nearest_feature(proyectos_sf, verdes_sf)
proyectos_sf$nearest_park <- verdes_sf$nombre[nearest_idx]
proyectos_sf$dist_to_park <- st_distance(proyectos_sf, verdes_sf[nearest_idx, ], by_element = TRUE)
proyectos_sf$dist_to_park <- as.numeric(proyectos_sf$dist_to_park)

## 4.5. Calcular el parque importante más cercano (desde el KML)
nearest_idx_poly <- st_nearest_feature(proyectos_sf, parques_kml)
proyectos_sf$nearest_park_kml <- parques_kml$nombre[nearest_idx_poly]
proyectos_sf$dist_to_park_kml <- st_distance(proyectos_sf, parques_kml[nearest_idx_poly, ], by_element = TRUE)
proyectos_sf$dist_to_park_kml <- as.numeric(proyectos_sf$dist_to_park_kml)

## 4.6 Unir información de amenidades
proyectos_sf <- proyectos_sf %>%
  left_join(amenidades_clean, by = "Proyecto") %>%
  mutate(across(c(control_de_acceso:vestidores), ~ ifelse(is.na(.x), 0, .x)))  # Convertir NA a 0

# ---- 5. Procesamiento adicional de variables ----

## Procesar la variable "nse_description" para extraer NSE, Personas, Hogares y Precio Promedio de Vivienda
base_integrada <- proyectos_sf %>%
  extract(
    col = nse_description, 
    into = c("nse", "personas", "hogares", "precio_vivienda"),
    regex = "NSE:\\s*([^\\s]+)\\s+Personas:\\s*([0-9,]+)\\s+Hogares:\\s*([0-9,]+)\\s+Precio Promedio de Vivienda:\\s*\\$?([0-9,\\.]+)",
    remove = FALSE
  ) %>%
  rename(
    absorcion = `Absorcion por proyecto`,
    nearest_relevant_park = nearest_park_kml,
    dist_to_relevant_park = dist_to_park_kml
  ) %>%
  mutate(
    absorcion = as.numeric(absorcion),
    Estatus = as.factor(Estatus),
    hogares = parse_number(hogares),
    log_pm2 = log(p_m2),
    Municipio = as.factor(Municipio),
    nearest_park = as.factor(nearest_park),
    nearest_relevant_park = as.factor(nearest_relevant_park),
    nse = as.factor(nse),
    personas = parse_number(personas),
    precio_vivienda = parse_number(precio_vivienda),
    Segmento = as.factor(Segmento),
    zona_name = as.factor(zona_name)
  )

## Agregar la variable de "Unidades Vendidas"
base_integrada <- base_integrada %>%
  mutate(unidades_vendidas = unidades_totales - unidades_inv) %>%
  relocate(unidades_vendidas, .after = unidades_inv) %>%
  relocate(log_pm2, .after = p_m2)

## Calificación de proximidad a parques relevantes
base_integrada <- base_integrada %>%
  mutate(
    inv_dist_to_park = 1 / log(dist_to_relevant_park + 1),  # Ajuste para no linealidad
    inv_dist_to_park = scale(inv_dist_to_park)  # Opcional: escalar si usas algoritmos sensibles a magnitud (ej: redes neuronales)
  ) %>%
  relocate(inv_dist_to_park, .after = dist_to_relevant_park)

# ---- 6. Visualización en un mapa interactivo con Leaflet ----

# Preparar datos para leaflet sin usar objetos sf
datos_mapa <- data.frame(
  Proyecto = base_integrada$Proyecto,
  Desarrollador = base_integrada$Desarrollador,
  Municipio = base_integrada$Municipio,
  Segmento = base_integrada$Segmento,
  p_m2 = base_integrada$p_m2,
  zona_name = base_integrada$zona_name,
  nearest_park = base_integrada$nearest_park,
  dist_to_park = base_integrada$dist_to_park,
  nearest_relevant_park = base_integrada$nearest_relevant_park,
  dist_to_relevant_park = base_integrada$dist_to_relevant_park,
  lat = base_integrada$Latitud,
  lng = base_integrada$Longitud,
  es_nuevo = base_integrada$Proyecto == nombre_proyecto
) %>%
  mutate_if(is.factor, as.character)

# Filtrar solo las filas con coordenadas válidas
datos_mapa <- datos_mapa %>%
  filter(!is.na(lat) & !is.na(lng)) %>%
  # Asegurarse que las coordenadas están en formato correcto
  mutate(
    lat = as.numeric(lat),
    lng = as.numeric(lng)
  )

# Crear mapa con leaflet usando datos filtrados
mapa <- leaflet(datos_mapa) %>%
  addTiles() %>%
  setView(lng = lon_decimal, lat = lat_decimal, zoom = 14) %>%
  addCircleMarkers(
    ~lng, ~lat,  # Usar coordenadas directamente
    radius = ~ifelse(es_nuevo, 8, 5),
    color = ~ifelse(es_nuevo, "red", "blue"),
    weight = ~ifelse(es_nuevo, 2, 1),
    stroke = TRUE,
    fillOpacity = 0.8,
    popup = ~paste(
      "<strong>Proyecto:</strong>", Proyecto, "<br>",
      "<strong>Desarrollador:</strong>", Desarrollador, "<br>",
      "<strong>Municipio:</strong>", Municipio, "<br>",
      "<strong>Precio por m²:</strong>", p_m2, "<br>",
      "<strong>Segmento:</strong>", ifelse(is.na(Segmento), "Sin información", Segmento), "<br>",
      "<strong>Zona REDI:</strong>", ifelse(is.na(zona_name), "Sin información", zona_name), "<br>",
      "<strong>Parque más cercano (Verdes):</strong>", nearest_park, "<br>",
      "<strong>Distancia (m) - Verdes:</strong>", round(dist_to_park, 1), "<br>",
      "<strong>Parque importante más cercano:</strong>", nearest_relevant_park, "<br>",
      "<strong>Distancia (m) - Parque importante:</strong>", round(dist_to_relevant_park, 1)
    )
  ) %>%
  addScaleBar(position = "bottomleft")

# Mostrar el mapa
print(mapa)

# ---- 7. Exportar base de datos ----
## Exportar a GeoPackage para mantener geometrías.
st_write(base_integrada, "/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/base_integrada.gpkg", driver = "GPKG", delete_layer = TRUE)

# ---- 8. Mostrar resultados del nuevo proyecto ----
nuevo_proyecto_info <- base_integrada %>% 
  filter(Proyecto == nombre_proyecto) %>%
  st_drop_geometry()

# Mostrar información relevante del nuevo proyecto
cat("\n=== INFORMACIÓN DEL NUEVO PROYECTO ===\n")
cat("Nombre:", nuevo_proyecto_info$Proyecto, "\n")
cat("Municipio:", as.character(nuevo_proyecto_info$Municipio), "\n")
cat("Coordenadas:", nuevo_proyecto_info$Latitud, nuevo_proyecto_info$Longitud, "\n")
cat("NSE:", as.character(nuevo_proyecto_info$nse), "\n")
cat("Zona REDI:", as.character(nuevo_proyecto_info$zona_name), "\n")
cat("Parque más cercano:", as.character(nuevo_proyecto_info$nearest_park), "(", round(nuevo_proyecto_info$dist_to_park), "m)\n")
cat("Parque importante más cercano:", as.character(nuevo_proyecto_info$nearest_relevant_park), "(", round(nuevo_proyecto_info$dist_to_relevant_park), "m)\n")
cat("Población en 1km:", round(nuevo_proyecto_info$pob2020_1km), "\n")
cat("Hogares en 1km:", round(nuevo_proyecto_info$hogares2020_1km), "\n")
