# Código para el cálculo de pesos del Índice de Valor por Ubicación (IVU)
# Este script muestra el proceso completo para obtener los pesos basados en correlaciones

# Limpiar el entorno y carga de bibliotecas necesarias
rm(list = ls())

library(dplyr)
library(corrplot)
library(ggplot2)
library(knitr)
library(kableExtra)

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[01] PESOS')

# ---- 1. Cargar los datos ---- 
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/base_inmobiliaria_transformada.csv', stringsAsFactors = FALSE, encoding = "UTF-8")

# ---- 2. Definir los factores a considerar para el IVU ----
factores <- list(
  # Índices existentes
  indices = c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia"),
  
  # Cercanías a equipamientos (0 o 1)
  cercanias = c(
    "cercania_hospital", 
    "cercania_esc_priv", 
    "cercania_esc_pub", 
    "cercania_universidad", 
    "cercania_super", 
    "cercania_restau", 
    "cercania_oficina", 
    "cercania_tienda_dept"
  ),
  
  # Cantidades de equipamientos en 1km
  cantidades = c(
    "cantidad_hospital_1km", 
    "cantidad_esc_priv_1km", 
    "cantidad_esc_pub_1km", 
    "cantidad_universidad_1km", 
    "cantidad_super_1km", 
    "cantidad_restau_1km", 
    "cantidad_oficina_1km", 
    "cantidad_tienda_dept_1km"
  ),
  
  # Nueva categoría: Variables de vialidades
  vialidades = c(
    "cerca_avenida_principal",
    "cercania_avenida",
    "cercania_avenida_arterial",
    "cercania_avenida_secundaria",
    "accesibilidad_vial"
  )
)

# Añadir vialidades a la lista de otros factores
factores$otros <- c(factores$otros, "cerca_avenida_principal", "accesibilidad_vial")

# ---- 3. Calcular las correlaciones entre cada factor y el precio por m² ----
# Función para calcular correlación con manejo de valores NA
calcular_correlacion <- function(x, y) {
  return(cor(x, y, use = "pairwise.complete.obs", method = "pearson"))
}

# Inicializar vector de correlaciones
correlaciones <- numeric()

# Variable objetivo (precio por metro cuadrado)
precio_m2 <- datos$p_m2

# Calcular correlaciones para cada categoría de factores
for (categoria in names(factores)) {
  for (factor in factores[[categoria]]) {
    # Calcular correlación solo si la variable existe
    if (factor %in% colnames(datos)) {
      # Manejo de valores NA en los datos
      valores_factor <- datos[[factor]]
      pares_completos <- !is.na(valores_factor) & !is.na(precio_m2)
      
      if (sum(pares_completos) > 2) { # Necesitamos al menos 3 pares para correlación
        corr <- calcular_correlacion(valores_factor[pares_completos], 
                                     precio_m2[pares_completos])
        correlaciones[factor] <- corr
      } else {
        correlaciones[factor] <- 0
      }
    } else {
      correlaciones[factor] <- 0
      warning(paste("Variable", factor, "no encontrada en los datos"))
    }
  }
}

# ---- 4. Visualizar las correlaciones ----
# Ordenar correlaciones
correlaciones_ordenadas <- sort(correlaciones, decreasing = TRUE)

# Convertir a dataframe para visualización
correlaciones_df <- data.frame(
  Factor = names(correlaciones_ordenadas),
  Correlacion = correlaciones_ordenadas
)

# Crear gráfico de barras de correlaciones
grafico_correlaciones <- ggplot(correlaciones_df, aes(x = reorder(Factor, Correlacion), y = Correlacion)) +
  geom_bar(stat = "identity", fill = "#4285F4") +
  geom_text(aes(label = sprintf("%.3f", Correlacion)), 
            hjust = ifelse(correlaciones_df$Correlacion >= 0, -0.3, 1.3),
            size = 3.5) +
  coord_flip(ylim = c(-0.4, 0.4)) +
  labs(title = "Correlación de factores con Precio por m²",
       x = "Factor",
       y = "Coeficiente de correlación") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8),
        plot.margin = unit(c(5, 50, 5, 5), "pt"))

print(grafico_correlaciones)

# ---- 5. Manejar correlaciones negativas ----
# Para factores que deberían tener impacto positivo pero muestran correlación negativa
# (basado en conocimiento del dominio inmobiliario)
correlaciones_ajustadas <- correlaciones

# Identificar factores con correlación negativa
factores_negativos <- names(correlaciones_ajustadas[correlaciones_ajustadas < 0])
print("Factores con correlación negativa:")
print(factores_negativos)

# Ajustar factores específicos (por ejemplo, escuelas públicas)
# En caso de que "cantidad_esc_pub_1km" tenga correlación negativa pero queramos mantener su impacto
for (factor in factores_negativos) {
  if (factor == "cantidad_esc_pub_1km" || factor == "cercania_esc_pub") {
    # Asignar un valor positivo bajo en lugar de negativo
    correlaciones_ajustadas[factor] <- 0.05  # Valor arbitrario positivo bajo
    cat("Ajustando factor", factor, "de", correlaciones[factor], "a", correlaciones_ajustadas[factor], "\n")
  }
  # Otros ajustes específicos pueden añadirse aquí
}

# ---- 6. Convertir correlaciones a pesos ----
## 6.1 Tomar el valor absoluto de las correlaciones ajustadas
correlaciones_abs <- abs(correlaciones_ajustadas)

### Normalizar para que sumen 1 (o 100%)
suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)
pesos_calculados <- correlaciones_abs / suma_correlaciones

## 6.2 Función para calcular pesos por segmento
calcular_pesos_por_segmento <- function(datos) {
  # Obtener segmentos únicos
  segmentos <- unique(datos$Segmento)
  segmentos <- segmentos[!is.na(segmentos)]
  
  # Inicializar lista para almacenar pesos por segmento
  pesos_por_segmento <- list()
  
  # Calcular pesos para cada segmento
  for (segmento in segmentos) {
    # Filtrar datos para este segmento
    datos_segmento <- datos[datos$Segmento == segmento, ]
    
    # Omitir si no hay suficientes datos
    if (nrow(datos_segmento) < 25) {
      warning(paste("Omitiendo segmento", segmento, "por datos insuficientes"))
      next
    }
    
    # Calcular correlaciones específicas para este segmento
    correlaciones <- numeric()
    precio_m2 <- datos_segmento$p_m2
    
    for (categoria in names(factores)) {
      for (factor in factores[[categoria]]) {
        if (factor %in% colnames(datos_segmento)) {
          # Código existente para calcular correlaciones...
          valores_factor <- datos_segmento[[factor]]
          pares_completos <- !is.na(valores_factor) & !is.na(precio_m2)
          
          if (sum(pares_completos) > 2) {
            corr <- calcular_correlacion(valores_factor[pares_completos], 
                                         precio_m2[pares_completos])
            correlaciones[factor] <- corr
          } else {
            correlaciones[factor] <- 0
          }
        }
      }
    }
    
    # Convertir correlaciones a pesos (similar al código original)
    correlaciones_ajustadas <- correlaciones
    correlaciones_abs <- abs(correlaciones_ajustadas)
    suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)
    pesos_calculados <- correlaciones_abs / suma_correlaciones
    
    # Guardar pesos para este segmento
    pesos_por_segmento[[segmento]] <- pesos_calculados
    
    # Visualizaciones específicas por segmento
    cat("\nPesos calculados para segmento:", segmento, "\n")
    print(head(sort(pesos_calculados, decreasing = TRUE), 10))
  }
  
  return(pesos_por_segmento)
}

### Calcular y guardar pesos por segmento
pesos_por_segmento <- calcular_pesos_por_segmento(datos)
saveRDS(pesos_por_segmento, "pesos_por_segmento.rds")

# ---- 7. Crear tabla comparativa de correlaciones originales, ajustadas y pesos finales ----
tabla_resultados <- data.frame(
  Factor = names(correlaciones),
  Correlacion_Original = unname(correlaciones),
  Correlacion_Ajustada = unname(correlaciones_ajustadas),
  Peso_Final = unname(pesos_calculados)
)

# Ordenar por peso final descendente
tabla_resultados <- tabla_resultados[order(tabla_resultados$Peso_Final, decreasing = TRUE), ]

# Mostrar tabla con formato
print(kable(tabla_resultados, digits = 4, 
            col.names = c("Factor", "Correlación Original", "Correlación Ajustada", "Peso Final"),
            caption = "Derivación de pesos para el Índice de Valor por Ubicación"))

# ---- 8. Visualizar distribución final de pesos ----
# Preparar datos para gráfico de pastel
pesos_df <- data.frame(
  Factor = tabla_resultados$Factor,
  Peso = tabla_resultados$Peso_Final
)

# Categorizar factores para el gráfico
# Actualizar categorización para incluir vialidades
categorias_factores <- character(length(pesos_df$Factor))
for (i in 1:length(pesos_df$Factor)) {
  factor <- pesos_df$Factor[i]
  if (factor %in% factores$indices) {
    categorias_factores[i] <- "Índices"
  } else if (factor %in% factores$cercanias) {
    categorias_factores[i] <- "Cercanías"
  } else if (factor %in% factores$cantidades) {
    categorias_factores[i] <- "Cantidades"
  } else if (factor %in% factores$vialidades) {
    categorias_factores[i] <- "Vialidades"  # Nueva categoría
  } else {
    categorias_factores[i] <- "Otros"
  }
}
pesos_df$Categoria <- categorias_factores

# Crear gráfico de pesos por categoría
grafico_pesos_categoria <- ggplot(pesos_df, 
                                  aes(x = reorder(Factor, -Peso), y = Peso, fill = Categoria)) +
  geom_bar(stat = "identity") +
  scale_fill_brewer(palette = "Set1") +
  geom_text(aes(label = sprintf("%.3f", Peso)), size = 3, vjust = -0.3) +
  labs(title = "Distribución de pesos para el IVU por factor",
       x = "Factor",
       y = "Peso") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))

print(grafico_pesos_categoria)

# ---- 9. Crear gráfico de pesos por categoría (agrupado) ----
pesos_por_categoria <- pesos_df %>%
  group_by(Categoria) %>%
  summarise(Peso_Total = sum(Peso))

grafico_pesos_agrupados <- ggplot(pesos_por_categoria, 
                                  aes(x = "", y = Peso_Total, fill = Categoria)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(Peso_Total * 100), "%")), 
            position = position_stack(vjust = 0.5)) +
  labs(title = "Distribución de pesos por categoría de factores",
       x = NULL,
       y = NULL) +
  theme_minimal() +
  theme(axis.text = element_blank(),
        panel.grid = element_blank())

print(grafico_pesos_agrupados)

# ---- 10. Exportar los pesos finales para usar en el cálculo del IVU ----
pesos_finales <- pesos_calculados

# Asignar pesos específicos a variables viales si no existen en correlaciones
if (!"cerca_avenida_principal" %in% names(pesos_finales)) {
  pesos_finales["cerca_avenida_principal"] <- 0.0300
}
if (!"accesibilidad_vial" %in% names(pesos_finales)) {
  pesos_finales["accesibilidad_vial"] <- 0.0500
}
if (!"cercania_avenida" %in% names(pesos_finales)) {
  pesos_finales["cercania_avenida"] <- 0.0200
}
if (!"cercania_avenida_arterial" %in% names(pesos_finales)) {
  pesos_finales["cercania_avenida_arterial"] <- 0.0250
}
if (!"cercania_avenida_secundaria" %in% names(pesos_finales)) {
  pesos_finales["cercania_avenida_secundaria"] <- 0.0150
}

# Actualizar la sección de exportación de pesos para incluir vialidades
cat("\n\nPESOS PARA USAR EN EL CÁLCULO DEL IVU:\n")
cat("pesos <- c(\n")

# Cantidades
cat("  # Cantidades\n")
for (factor in factores$cantidades) {
  if (factor %in% names(pesos_finales)) {
    cat(sprintf('  "%s" = %.4f,\n', factor, pesos_finales[factor]))
  }
}

# Cercanías
cat("\n  # Cercanías\n")
for (factor in factores$cercanias) {
  if (factor %in% names(pesos_finales)) {
    cat(sprintf('  "%s" = %.4f,\n', factor, pesos_finales[factor]))
  }
}

# Índices
cat("\n  # Índices\n")
for (factor in factores$indices) {
  if (factor %in% names(pesos_finales)) {
    cat(sprintf('  "%s" = %.4f,\n', factor, pesos_finales[factor]))
  }
}

# Nueva sección para variables de vialidades
cat("\n  # Vialidades\n")
for (factor in factores$vialidades) {
  if (factor %in% names(pesos_finales)) {
    cat(sprintf('  "%s" = %.4f,\n', factor, pesos_finales[factor]))
  }
}

cat(")\n")

# ---- 11. Resumen estadístico de los pesos ----
cat("\nResumen estadístico de pesos:\n")
summary_pesos <- summary(pesos_finales)
print(summary_pesos)

# Mostrar peso total para verificar normalización
cat("\nSuma total de pesos:", sum(pesos_finales), "\n")

# Agregar resumen por categoría incluyendo vialidades
pesos_por_categoria <- data.frame(
  Categoria = c("Cantidades", "Cercanías", "Índices", "Vialidades", "Otros"),
  Peso_Total = c(
    sum(pesos_finales[intersect(names(pesos_finales), factores$cantidades)], na.rm = TRUE),
    sum(pesos_finales[intersect(names(pesos_finales), factores$cercanias)], na.rm = TRUE),
    sum(pesos_finales[intersect(names(pesos_finales), factores$indices)], na.rm = TRUE),
    sum(pesos_finales[intersect(names(pesos_finales), factores$vialidades)], na.rm = TRUE),
    sum(pesos_finales[setdiff(names(pesos_finales), 
                              unlist(factores[c("cantidades", "cercanias", "indices", "vialidades")]))], 
        na.rm = TRUE)
  )
)
  
# ---- 12. NUEVA SECCIÓN: Análisis de correlaciones por segmento ----

# Función para calcular y visualizar correlaciones por segmento
visualizar_correlaciones_por_segmento <- function(datos, factores) {
  # Obtener segmentos únicos
  segmentos <- unique(datos$Segmento)
  segmentos <- segmentos[!is.na(segmentos)]
  
  # Inicializar lista para almacenar gráficos y dataframe para comparaciones
  graficos_correlaciones <- list()
  todas_correlaciones <- data.frame()
  
  # Para cada segmento, calcular correlaciones y crear gráfico
  for (segmento in segmentos) {
    # Filtrar datos para este segmento
    datos_segmento <- datos[datos$Segmento == segmento, ]
    
    # Omitir si no hay suficientes datos
    if (nrow(datos_segmento) < 5) {
      warning(paste("Omitiendo segmento", segmento, "por datos insuficientes"))
      next
    }
    
    # Calcular correlaciones específicas para este segmento
    correlaciones_segmento <- numeric()
    precio_m2 <- datos_segmento$p_m2
    
    for (categoria in names(factores)) {
      for (factor in factores[[categoria]]) {
        if (factor %in% colnames(datos_segmento)) {
          valores_factor <- datos_segmento[[factor]]
          pares_completos <- !is.na(valores_factor) & !is.na(precio_m2)
          
          if (sum(pares_completos) > 2) {
            corr <- calcular_correlacion(valores_factor[pares_completos], 
                                         precio_m2[pares_completos])
            correlaciones_segmento[factor] <- corr
          } else {
            correlaciones_segmento[factor] <- 0
          }
        }
      }
    }
    
    # Ordenar correlaciones
    correlaciones_ordenadas <- sort(correlaciones_segmento, decreasing = TRUE)
    
    # Convertir a dataframe para visualización
    correlaciones_df <- data.frame(
      Factor = names(correlaciones_ordenadas),
      Correlacion = correlaciones_ordenadas,
      Segmento = segmento
    )
    
    # Añadir al dataframe para comparación posterior
    todas_correlaciones <- rbind(todas_correlaciones, correlaciones_df)
    
    # Crear gráfico de barras de correlaciones para este segmento
    graficos_correlaciones[[segmento]] <- ggplot(correlaciones_df, 
                                                 aes(x = reorder(Factor, Correlacion), 
                                                     y = Correlacion)) +
      geom_bar(stat = "identity", fill = "#4285F4") +
      geom_text(aes(label = sprintf("%.3f", Correlacion)), 
                hjust = ifelse(correlaciones_df$Correlacion >= 0, -0.3, 1.3),
                size = 3.5) +
      coord_flip(ylim = c(-0.8, 0.8)) +
      labs(title = paste("Correlación de factores con Precio por m² -", segmento),
           subtitle = paste(nrow(datos_segmento), "proyectos analizados"),
           x = "Factor",
           y = "Coeficiente de correlación") +
      theme_minimal() +
      theme(axis.text.y = element_text(size = 8),
            plot.margin = unit(c(5, 50, 5, 5), "pt"))
    
    # Imprimir gráfico individual
    print(graficos_correlaciones[[segmento]])
  }
  
  return(list(graficos = graficos_correlaciones, datos = todas_correlaciones))
}

# Calcular correlaciones por segmento
resultado_correlaciones <- visualizar_correlaciones_por_segmento(datos, factores)

# Factores destacados para análisis comparativo entre segmentos
# Elegir factores clave que suelen ser importantes
factores_destacados <- c(
  "indice_accesibilidad", 
  "cercania_esc_priv",
  "cercania_hospital", 
  "cerca_avenida_principal",
  "accesibilidad_vial", 
  "cercania_super",
  "cerca_parque_relevante",
  "cantidad_restau_1km",
  "alta_densidad_comercial"
)

# Filtrar datos de correlaciones para estos factores destacados
correlaciones_destacadas <- resultado_correlaciones$datos[
  resultado_correlaciones$datos$Factor %in% factores_destacados, ]

# Crear heatmap de correlaciones por segmento para factores destacados
heatmap_correlaciones <- ggplot(correlaciones_destacadas, 
                                aes(x = Factor, y = Segmento, fill = Correlacion)) +
  geom_tile() +
  scale_fill_gradient2(low = "#EF6558", mid = "white", high = "#68d192", 
                       midpoint = 0, limits = c(-0.6, 0.6)) +
  labs(title = "Mapa de calor: Correlaciones por segmento",
       subtitle = "Factores clave de ubicación vs. precio por m²",
       x = "Factor", 
       y = "Segmento", 
       fill = "Correlación") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(heatmap_correlaciones)

# Gráfico de barras para comparar correlaciones entre segmentos
grafico_comparativo <- ggplot(correlaciones_destacadas, 
                              aes(x = Factor, y = Correlacion, fill = Segmento)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Comparación de correlaciones por segmento",
       subtitle = "Factores clave de ubicación vs. precio por m²",
       x = "Factor", 
       y = "Coeficiente de correlación",
       fill = "Segmento") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(grafico_comparativo)

# Guardar resultado para uso posterior
saveRDS(resultado_correlaciones, "correlaciones_por_segmento.rds")

# ---- 13. IDENTIFICAR CORRELACIONES PROBLEMÁTICAS ----
# Identificar correlaciones problemáticas por segmento
problematicas <- data.frame(
  Segmento = character(),
  Factor = character(),
  Correlacion_Empirica = numeric(),
  Valor_Esperado = numeric(),
  Problema = character(),
  stringsAsFactors = FALSE
)

# Añadir casos conocidos manualmente basados en conocimiento experto
problematicas <- rbind(problematicas, data.frame(
  Segmento = "Premium Plus",
  Factor = "cercania_esc_pub", 
  Correlacion_Empirica = resultado_correlaciones$datos$Correlacion[
    resultado_correlaciones$datos$Segmento == "Premium Plus" & 
      resultado_correlaciones$datos$Factor == "cercania_esc_pub"],
  Valor_Esperado = -0.4,
  Problema = "Debería ser negativa para segmento Premium Plus"
))

problematicas <- rbind(problematicas, data.frame(
  Segmento = "Premium Plus",
  Factor = "cercania_esc_priv", 
  Correlacion_Empirica = resultado_correlaciones$datos$Correlacion[
    resultado_correlaciones$datos$Segmento == "Premium Plus" & 
      resultado_correlaciones$datos$Factor == "cercania_esc_priv"],
  Valor_Esperado = 0.4,
  Problema = "Debería ser positiva para segmento Premium Plus"
))

problematicas <- rbind(problematicas, data.frame(
  Segmento = "Premium Plus",
  Factor = "cerca_avenida_principal", 
  Correlacion_Empirica = resultado_correlaciones$datos$Correlacion[
    resultado_correlaciones$datos$Segmento == "Premium Plus" & 
      resultado_correlaciones$datos$Factor == "cerca_avenida_principal"],
  Valor_Esperado = 0.25,
  Problema = "Debe ser positiva para segmento Premium Plus"
))

problematicas <- rbind(problematicas, data.frame(
  Segmento = "Premium Plus",
  Factor = "cercania_avenida_arterial", 
  Correlacion_Empirica = resultado_correlaciones$datos$Correlacion[
    resultado_correlaciones$datos$Segmento == "Premium Plus" & 
      resultado_correlaciones$datos$Factor == "cercania_avenida_arterial"],
  Valor_Esperado = 0.35,
  Problema = "Debe ser positiva para segmento Premium Plus"
))

print("Correlaciones identificadas como problemáticas:")
print(problematicas)

# Crear visualización de correlaciones problemáticas
if(nrow(problematicas) > 0) {
  ggplot(problematicas, aes(x = Factor, y = Correlacion_Empirica)) +
    geom_bar(stat = "identity", fill = "#EF6558", alpha = 0.7) +
    geom_point(aes(y = Valor_Esperado), color = "#68d192", size = 3) +
    facet_wrap(~Segmento) +
    labs(title = "Correlaciones problemáticas vs. valores esperados",
         subtitle = "Barras: correlación empírica, Puntos: valor esperado",
         x = "Factor", y = "Correlación") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}


# ---- 14. APLICAR AJUSTES BASADOS EN REGLAS DE NEGOCIO ----
# Función para ajustar correlaciones según reglas de negocio
ajustar_correlaciones_con_reglas <- function(correlaciones_df, reglas) {
  # Asegurar que existe la columna Ajustado
  if(!"Ajustado" %in% colnames(correlaciones_df)) {
    correlaciones_df$Ajustado <- FALSE
  }
  
  for (i in 1:nrow(reglas)) {
    segmento <- reglas$Segmento[i]
    factor <- reglas$Factor[i]
    valor_esperado <- reglas$Valor_Esperado[i]
    
    # Encontrar índice en el dataframe de correlaciones
    idx <- correlaciones_df$Segmento == segmento & correlaciones_df$Factor == factor
    
    if (sum(idx) > 0) {
      # Aplicar ajuste
      cat("Ajustando", factor, "en segmento", segmento, 
          "de", correlaciones_df$Correlacion[idx], 
          "a", valor_esperado, "(", reglas$Problema[i], ")\n")
      
      correlaciones_df$Correlacion[idx] <- valor_esperado
      correlaciones_df$Ajustado[idx] <- TRUE
    }
  }
  
  return(correlaciones_df)
}

# Preparar dataframe de correlaciones
correlaciones_df <- resultado_correlaciones$datos
correlaciones_df$Ajustado <- FALSE

# Aplicar ajustes
correlaciones_df_ajustado <- ajustar_correlaciones_con_reglas(correlaciones_df, problematicas)

# Recalcular pesos por segmento utilizando correlaciones ajustadas
recalcular_pesos_ajustados <- function(correlaciones_ajustadas) {
  pesos_ajustados <- list()
  
  # Obtener segmentos únicos
  segmentos <- unique(correlaciones_ajustadas$Segmento)
  
  for (segmento in segmentos) {
    # Filtrar correlaciones para este segmento
    corr_segmento <- correlaciones_ajustadas[correlaciones_ajustadas$Segmento == segmento, ]
    
    # Extraer valores de correlación
    correlaciones <- corr_segmento$Correlacion
    names(correlaciones) <- corr_segmento$Factor
    
    # Convertir a valores absolutos
    correlaciones_abs <- abs(correlaciones)
    
    # Normalizar para que sumen 1
    suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)
    pesos <- correlaciones_abs / suma_correlaciones
    
    # Guardar pesos para este segmento
    pesos_ajustados[[segmento]] <- pesos
  }
  
  return(pesos_ajustados)
}

# Recalcular pesos con correlaciones ajustadas
pesos_por_segmento_ajustados <- recalcular_pesos_ajustados(correlaciones_df_ajustado)

# Guardar pesos ajustados
saveRDS(pesos_por_segmento_ajustados, "pesos_por_segmento_ajustados.rds")

# ---- 15. DOCUMENTAR Y HACER TRANSPARENTE EL PROCESO ----
# Guardar un registro de los ajustes realizados
ajustes_log <- correlaciones_df_ajustado[correlaciones_df_ajustado$Ajustado, 
                                         c("Segmento", "Factor", "Correlacion", "Ajustado")]
write.csv(ajustes_log, "ajustes_correlaciones_log.csv", row.names = FALSE)

# Crear visualización que muestre antes y después
# Primero, juntar datos originales y ajustados
correlaciones_comparacion <- merge(
  resultado_correlaciones$datos[, c("Segmento", "Factor", "Correlacion")],
  correlaciones_df_ajustado[, c("Segmento", "Factor", "Correlacion", "Ajustado")],
  by = c("Segmento", "Factor"),
  suffixes = c(".original", ".ajustado")
)

# Filtrar solo los que cambiaron
correlaciones_comparacion <- correlaciones_comparacion[
  correlaciones_comparacion$Ajustado == TRUE, ]

# Visualizar cambios en formato largo
if(nrow(correlaciones_comparacion) > 0) {
  comparacion_largo <- reshape2::melt(
    correlaciones_comparacion[, c("Segmento", "Factor", "Correlacion.original", "Correlacion.ajustado")], 
    id.vars = c("Segmento", "Factor"),
    variable.name = "Tipo",
    value.name = "Correlacion"
  )
  
  # Renombrar niveles para mejor visualización
  comparacion_largo$Tipo <- ifelse(
    comparacion_largo$Tipo == "Correlacion.original", 
    "Original", "Ajustado"
  )
  
  # Crear gráfico comparativo
  ggplot(comparacion_largo, aes(x = Factor, y = Correlacion, fill = Tipo)) +
    geom_bar(stat = "identity", position = "dodge") +
    facet_wrap(~Segmento) +
    scale_fill_manual(values = c("Original" = "#EF6558", "Ajustado" = "#68d192")) +
    labs(title = "Comparación de correlaciones originales vs ajustadas",
         subtitle = "Basado en conocimiento experto del mercado inmobiliario",
         x = "Factor", y = "Correlación", fill = "") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Exportar comparación para referencia
  write.csv(correlaciones_comparacion, "comparacion_correlaciones.csv", row.names = FALSE)
}

# Documentar el impacto de los ajustes en los pesos finales
cat("\nIMPACTO DE LOS AJUSTES EN PESOS POR SEGMENTO:\n")
for (segmento in names(pesos_por_segmento_ajustados)) {
  if (segmento %in% names(pesos_por_segmento)) {
    cat("\nSegmento:", segmento, "\n")
    
    # Obtener factores comunes
    factores_comunes <- intersect(
      names(pesos_por_segmento[[segmento]]), 
      names(pesos_por_segmento_ajustados[[segmento]])
    )
    
    # Mostrar comparación de top 10 pesos
    pesos_orig <- pesos_por_segmento[[segmento]][factores_comunes]
    pesos_ajust <- pesos_por_segmento_ajustados[[segmento]][factores_comunes]
    
    comparacion <- data.frame(
      Factor = factores_comunes,
      Peso_Original = pesos_orig,
      Peso_Ajustado = pesos_ajust,
      Diferencia = pesos_ajust - pesos_orig
    )
    
    comparacion <- comparacion[order(-abs(comparacion$Diferencia)), ]
    print(head(comparacion, Inf))
  }
}

# Generar explicación metodológica para incluir en documentación
cat("\n=== NOTA METODOLÓGICA ===\n")
cat("Los pesos del modelo IVU fueron calculados basándose en correlaciones estadísticas\n")
cat("entre factores de ubicación y precios por m², complementadas con conocimiento experto\n")
cat("del mercado inmobiliario. Se realizaron", nrow(ajustes_log), "ajustes manuales\n")
cat("en factores donde la correlación estadística no representaba adecuadamente\n")
cat("el valor percibido por los compradores en cada segmento.\n\n")
cat("Estos ajustes permiten un modelo más alineado con la realidad del mercado\n")
cat("y están documentados en los archivos 'ajustes_correlaciones_log.csv'\n")
cat("y 'comparacion_correlaciones.csv' para garantizar transparencia.\n")
