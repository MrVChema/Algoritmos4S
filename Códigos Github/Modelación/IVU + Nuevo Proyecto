# Índice de Valor por Ubicación (IVU)
# Script para el cálculo y visualización del impacto de equipamientos urbanos en proyectos inmobiliarios

# Limpiar el entorno y carga de bibliotecas necesarias
rm(list = ls())

library(dplyr)        # Para manipulación de datos
library(ggplot2)      # Para visualizaciones
library(sf)           # Para datos espaciales
library(leaflet)      # Para mapas interactivos
library(RColorBrewer) # Para esquemas de colores
library(scales)       # Para formateo de escalas
library(DT)           # Para tablas interactivas
library(plotly)       # Para gráficos interactivos
library(stringr)      # Para manipulación de texto

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[00] RESULTADOS')

# 1. Cargar los datos
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/base_inmobiliaria_transformada.csv', stringsAsFactors = FALSE, encoding = "UTF-8")

# 2. Definir los factores para el cálculo del IVU
factores <- list(
  # Índices existentes
  indices = c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia"),
  
  # Cercanías a equipamientos (0 o 1)
  cercanias = c(
    "cercania_hospital", 
    "cercania_esc_priv", 
    "cercania_esc_pub", 
    "cercania_universidad", 
    "cercania_super", 
    "cercania_restau", 
    "cercania_oficina", 
    "cercania_tienda_dept"
  ),
  
  # Cantidades de equipamientos en 1km
  cantidades = c(
    "cantidad_hospital_1km", 
    "cantidad_esc_priv_1km", 
    "cantidad_esc_pub_1km", 
    "cantidad_universidad_1km", 
    "cantidad_super_1km", 
    "cantidad_restau_1km", 
    "cantidad_oficina_1km", 
    "cantidad_tienda_dept_1km"
  ),
  
  # Otros factores relevantes
  otros = c(
    "cerca_parque_relevante",
    "alta_densidad_pob",
    "predominio_hogares_propios",
    "alto_crecimiento",
    "alta_densidad_educativa",
    "alta_densidad_comercial",
    "alto_entorno_laboral"
  )
)

# 3. Función para normalizar valores entre 0 y 1
normalizar <- function(valores) {
  valores_numericos <- as.numeric(valores)
  valores_validos <- valores_numericos[!is.na(valores_numericos)]
  
  if (length(valores_validos) == 0) return(rep(0, length(valores)))
  
  min_val <- min(valores_validos)
  max_val <- max(valores_validos)
  
  # Si todos los valores son iguales, devolver 0.5 para evitar división por cero
  if (max_val == min_val) {
    resultado <- rep(0, length(valores))
    resultado[!is.na(valores_numericos)] <- 0.5
    return(resultado)
  }
  
  # Normalizar valores
  resultado <- rep(0, length(valores))
  resultado[!is.na(valores_numericos)] <- (valores_numericos[!is.na(valores_numericos)] - min_val) / (max_val - min_val)
  return(resultado)
}

# 4. Normalizar las cantidades de equipamientos
cantidades_norm <- list()
for (col in factores$cantidades) {
  cantidades_norm[[col]] <- normalizar(datos[[col]])
}

# 5. Ponderaciones basadas en correlaciones con precio
# Estos pesos se basan en el análisis previo
pesos <- c(
  # Cantidades
  "cantidad_hospital_1km" = 0.0391,
  "cantidad_esc_priv_1km" = 0.0077,
  "cantidad_esc_pub_1km" = 0.0186,
  "cantidad_universidad_1km" = 0.0134,
  "cantidad_super_1km" = 0.0396,
  "cantidad_restau_1km" = 0.0218,
  "cantidad_oficina_1km" = 0.1013,
  "cantidad_tienda_dept_1km" = 0.0345,
  
  # Cercanías
  "cercania_hospital" = 0.0332,
  "cercania_esc_priv" = 0.0820,
  "cercania_esc_pub" = 0.0186,
  "cercania_universidad" = 0.0847,
  "cercania_super" = 0.0418,
  "cercania_restau" = 0.0274,
  "cercania_oficina" = 0.0476,
  "cercania_tienda_dept" = 0.0986,
  
  # Índices
  "indice_accesibilidad" = 0.0909,
  "potencial_inversion" = 0.1029,
  "indice_conveniencia" = 0.0963
)

# Agregar pesos para otros factores
for (factor in factores$otros) {
  pesos[factor] <- 0.021  # 2.1% para cada uno de los otros factores
}

# 6. Calcular el Índice de Valor por Ubicación (IVU)
calcular_ivu <- function(datos, pesos, cantidades_norm, factores) {
  n <- nrow(datos)
  ivu <- numeric(n)
  
  for (i in 1:n) {
    suma <- 0
    peso_total <- 0
    
    # Sumar los índices existentes
    for (indice in factores$indices) {
      if (!is.na(datos[i, indice])) {
        suma <- suma + datos[i, indice] * pesos[indice]
        peso_total <- peso_total + pesos[indice]
      }
    }
    
    # Sumar las cercanías (ya son binarias 0-1)
    for (cercania in factores$cercanias) {
      if (!is.na(datos[i, cercania])) {
        suma <- suma + datos[i, cercania] * pesos[cercania]
        peso_total <- peso_total + pesos[cercania]
      }
    }
    
    # Sumar las cantidades normalizadas
    for (cantidad in factores$cantidades) {
      if (!is.na(cantidades_norm[[cantidad]][i])) {
        suma <- suma + cantidades_norm[[cantidad]][i] * pesos[cantidad]
        peso_total <- peso_total + pesos[cantidad]
      }
    }
    
    # Sumar otros factores binarios
    for (otro in factores$otros) {
      if (!is.na(datos[i, otro])) {
        suma <- suma + datos[i, otro] * pesos[otro]
        peso_total <- peso_total + pesos[otro]
      }
    }
    
    # Normalizar por el peso total usado
    ivu[i] <- if (peso_total > 0) suma / peso_total else 0
  }
  
  return(ivu)
}

# 7. Calcular el IVU para todos los proyectos
datos$ivu <- calcular_ivu(datos, pesos, cantidades_norm, factores)

# 8. Crear categorías para el IVU (para el termómetro)
datos$ivu_categoria <- cut(
  datos$ivu, 
  breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), 
  labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
  include.lowest = TRUE
)

# 9. Estadísticas del IVU
estadisticas_ivu <- list(
  min = min(datos$ivu, na.rm = TRUE),
  max = max(datos$ivu, na.rm = TRUE),
  media = mean(datos$ivu, na.rm = TRUE),
  mediana = median(datos$ivu, na.rm = TRUE)
)

print("Estadísticas del Índice de Valor por Ubicación (IVU):")
print(paste("Mínimo:", round(estadisticas_ivu$min, 4)))
print(paste("Máximo:", round(estadisticas_ivu$max, 4)))
print(paste("Media:", round(estadisticas_ivu$media, 4)))
print(paste("Mediana:", round(estadisticas_ivu$mediana, 4)))

# 10. Distribución de proyectos por categoría
tabla_categorias <- table(datos$ivu_categoria)
tabla_categorias_percent <- prop.table(tabla_categorias) * 100

print("\nDistribución de proyectos por categoría:")
for (i in 1:length(tabla_categorias)) {
  cat <- names(tabla_categorias)[i]
  count <- tabla_categorias[i]
  pct <- tabla_categorias_percent[i]
  print(paste0(cat, ": ", count, " proyectos (", round(pct, 1), "%)"))
}

# 11. Promedio de IVU por municipio
promedio_municipios <- datos %>%
  group_by(Municipio) %>%
  summarise(
    PromedioIVU = mean(ivu, na.rm = TRUE),
    Cantidad = n()
  ) %>%
  arrange(desc(PromedioIVU))

print("\nPromedio de IVU por municipio:")
for (i in 1:nrow(promedio_municipios)) {
  print(paste0(
    promedio_municipios$Municipio[i], ": ", 
    round(promedio_municipios$PromedioIVU[i], 4),
    " (", promedio_municipios$Cantidad[i], " proyectos)"
  ))
}

#--------------------
# Visualizaciones
#--------------------
# Función auxiliar para seleccionar un proyecto consistentemente
seleccionar_proyecto <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Permitir selección por índice o por nombre
  if (!is.null(indice_proyecto)) {
    proyecto <- datos[indice_proyecto, ]
  } else if (!is.null(nombre_proyecto)) {
    proyecto <- datos[datos$Proyecto == nombre_proyecto, ]
    if (nrow(proyecto) == 0) {
      stop("Proyecto no encontrado: ", nombre_proyecto)
    }
  } else {
    stop("Debe proporcionar un indice_proyecto o un nombre_proyecto")
  }
  
  return(proyecto)
}

# Definir el proyecto a analizar de forma consistente
indice_proyecto_seleccionado <- 8  # O el índice que prefieras
# nombre_proyecto_seleccionado <- "Nombre del Proyecto"  # Alternativa por nombre

# 1. Visualización del Termómetro Mejorado
crear_termometro <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Usar la función auxiliar para seleccionar el proyecto
  proyecto <- seleccionar_proyecto(datos, indice_proyecto, nombre_proyecto)
  
  valor <- proyecto$ivu
  categoria <- proyecto$ivu_categoria
  nombre <- proyecto$Proyecto
  
  colores <- c(
    "Muy bajo" = "#FF0000",  # Rojo
    "Bajo" = "#FF9900",      # Naranja
    "Medio" = "#FFCC00",     # Amarillo
    "Alto" = "#66CC00",      # Verde claro
    "Muy alto" = "#009900"   # Verde oscuro
  )
  
  color <- colores[as.character(categoria)]
  
  # Empezar la escala desde un valor negativo para dar espacio a la etiqueta 0.0
  escala <- data.frame(
    y = seq(0, 1, 0.2),
    labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
    categorias = c("", "Muy bajo", "Bajo", "Medio", "Alto", "Muy alto")
  )
  
  # Crear gráfico base
  p <- ggplot() +
    # Fondo del termómetro
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = 1), 
              fill = "lightgrey", color = "black") +
    # Contenido del termómetro
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = valor), 
              fill = color) +
    # Líneas de escala
    geom_segment(data = escala, 
                 aes(x = 0.38, y = y, xend = 0.62, yend = y), 
                 color = "black") +
    # Etiquetas de escala
    geom_text(data = escala, 
              aes(x = 0.35, y = y, label = labels), 
              hjust = 1) +
    # Etiquetas de categorías
    geom_text(data = escala[-1,], 
              aes(x = 0.7, y = y - 0.1, label = categorias), 
              hjust = 0) +
    # Valor actual y nombre del proyecto
    geom_text(aes(x = 0.5, y = 1.1, 
                  label = paste0("Proyecto: ", nombre, 
                                 "\nValor: ", round(valor, 2), 
                                 "\nCategoría: ", categoria)),
              fontface = "bold") +
    # Ajustes estéticos
    labs(title = "Termómetro de Valor por Ubicación",
         x = NULL, y = NULL) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank(),
          plot.title = element_text(hjust = 0.5, face = "bold", size = 14)) +
    # Extender el límite inferior para dar espacio a la etiqueta 0.0
    coord_cartesian(xlim = c(0, 1), ylim = c(-0.05, 1.25), expand = FALSE)
  
  return(p)
}

# Ejemplos de uso:
# Por índice (número de fila)
termometro_ejemplo <- crear_termometro(datos, indice_proyecto = indice_proyecto_seleccionado)
print(termometro_ejemplo)

# 2. Gráfico de barras del IVU por municipio
grafico_municipios <- ggplot(promedio_municipios, aes(x = reorder(Municipio, PromedioIVU), y = PromedioIVU)) +
  geom_bar(stat = "identity", fill = "#6366f1") +
  geom_text(aes(label = sprintf("%.2f", PromedioIVU)), vjust = -0.5) +
  labs(title = "Índice de Valor por Ubicación promedio por Municipio",
       x = "Municipio", y = "IVU Promedio") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_cartesian(ylim = c(0, 1))

print(grafico_municipios)

# 3. Distribución de categorías IVU
grafico_categorias <- ggplot(data.frame(Categoria = names(tabla_categorias), 
                                        Cantidad = as.numeric(tabla_categorias)), 
                             aes(x = Categoria, y = Cantidad, fill = Categoria)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Cantidad), vjust = -0.5) +
  scale_fill_manual(values = c("Muy bajo" = "#FF0000", "Bajo" = "#FF9900", 
                               "Medio" = "#FFCC00", "Alto" = "#66CC00", 
                               "Muy alto" = "#009900")) +
  labs(title = "Distribución de proyectos por categoría de IVU",
       x = "Categoría", y = "Número de proyectos") +
  theme_minimal()

print(grafico_categorias)

# 4. Relación entre IVU y precio por m²
grafico_precio_ivu <- ggplot(datos, aes(x = ivu, y = p_m2, color = ivu_categoria)) +
  geom_point(alpha = 0.7) +
  scale_color_manual(values = c("Muy bajo" = "#FF0000", "Bajo" = "#FF9900", 
                                "Medio" = "#FFCC00", "Alto" = "#66CC00", 
                                "Muy alto" = "#009900")) +
  labs(title = "Relación entre IVU y Precio por m²",
       x = "Índice de Valor por Ubicación", 
       y = "Precio por m²",
       color = "Categoría") +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma)

print(grafico_precio_ivu)

# 5. Gráfico radar para un proyecto específico (usando plotly)
crear_radar_proyecto <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Usar la función auxiliar para seleccionar el proyecto
  proyecto <- seleccionar_proyecto(datos, indice_proyecto, nombre_proyecto)
  
  # Seleccionar las variables para el gráfico radar
  vars <- c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia", "ivu")
  valores <- as.numeric(proyecto[vars])
  nombres <- c("Accesibilidad", "Potencial Inversión", "Conveniencia", "IVU")
  
  # Crear dataframe para plotly
  df <- data.frame(
    variable = nombres,
    valor = valores
  )
  
  # Ajustar para cerrar el polígono
  df <- rbind(df, df[1, ])
  
  # Crear gráfico radar
  plot_ly(
    r = df$valor,
    theta = df$variable,
    type = 'scatterpolar',
    fill = 'toself',
    fillcolor = 'rgba(99, 102, 241, 0.5)',
    line = list(color = 'rgb(99, 102, 241)')
  ) %>%
    layout(
      title = paste0("Índices para: ", proyecto$Proyecto),
      polar = list(
        radialaxis = list(
          visible = TRUE,
          range = c(0, 1)
        )
      )
    )
}

# Ejemplo para el primer proyecto
radar_ejemplo <- crear_radar_proyecto(datos, indice_proyecto = indice_proyecto_seleccionado)
print(radar_ejemplo)


# 6. Mapa interactivo
crear_mapa <- function(datos) {
  # Definir paleta de colores por categoría IVU
  pal <- colorFactor(
    palette = c("#FF0000", "#FF9900", "#FFCC00", "#66CC00", "#009900"),
    domain = datos$ivu_categoria
  )
  
  # Crear el mapa
  leaflet(datos) %>%
    addTiles() %>%  # Añadir mapa base de OpenStreetMap
    addCircleMarkers(
      # Reemplazar con tus columnas de lat/lon
      lng = ~longitud,
      lat = ~latitud,
      radius = 8,
      color = ~pal(ivu_categoria),
      stroke = FALSE,
      fillOpacity = 0.8,
      popup = ~paste0(
        "<b>", Proyecto, "</b><br>",
        "Desarrollador: ", Desarrollador, "<br>",
        "IVU: ", round(ivu, 2), " (", ivu_categoria, ")<br>",
        "Precio/m²: $", format(p_m2, big.mark = ",", scientific = FALSE)
      )
    ) %>%
    addLegend(
      position = "bottomright",
      pal = pal,
      values = ~ivu_categoria,
      title = "Categoría IVU",
      opacity = 0.8
    )
}

mapa <- crear_mapa(datos)
mapa

# 7. Guardar el dataframe con el IVU calculado
write.csv(datos, "proyectos_con_ivu.csv", row.names = FALSE)


rm(list = ls())

# Función para calcular el IVU de un nuevo proyecto
evaluar_nuevo_proyecto <- function(longitud, latitud, nombre_proyecto = "Nuevo Proyecto", 
                                   desarrollador = "Por definir", municipio = NULL,
                                   datos_base = datos, pesos = pesos, 
                                   factores = factores, radio_km = 1) {
  
  library(sf)
  library(dplyr)
  
  # Validar coordenadas
  if (is.na(longitud) || is.na(latitud)) {
    stop("Las coordenadas no pueden ser NA")
  }
  
  # Crear punto para el nuevo proyecto
  nuevo_punto <- st_sfc(st_point(c(longitud, latitud)), crs = 4326)
  
  # Convertir datos existentes a formato espacial para calcular distancias
  # (Solo si tienen coordenadas)
  if ("longitud" %in% colnames(datos_base) && "latitud" %in% colnames(datos_base)) {
    datos_sf <- st_as_sf(datos_base, coords = c("longitud", "latitud"), crs = 4326)
  } else {
    stop("Los datos base no contienen columnas de longitud y latitud")
  }
  
  # Si no se especifica el municipio, determinar basado en la ubicación
  if (is.null(municipio)) {
    # Calcular distancias a todos los proyectos
    distancias <- st_distance(nuevo_punto, st_geometry(datos_sf))
    
    # Encontrar el proyecto más cercano
    idx_cercano <- which.min(distancias)
    municipio <- datos_base$Municipio[idx_cercano]
    
    message(paste("Municipio determinado automáticamente:", municipio))
  }
  
  # =====================================================
  # 1. Crear un nuevo registro para el proyecto
  # =====================================================
  
  nuevo_proyecto <- data.frame(
    Proyecto = nombre_proyecto,
    Desarrollador = desarrollador,
    Municipio = municipio,
    longitud = longitud,
    latitud = latitud
  )
  
  # Inicializar todas las columnas necesarias con NA
  for (col in colnames(datos_base)) {
    if (!col %in% colnames(nuevo_proyecto)) {
      nuevo_proyecto[[col]] <- NA
    }
  }
  
  # =====================================================
  # 2. Calcular cercanías a equipamientos 
  # =====================================================
  
  # Definir tipos de equipamientos y sus umbrales de distancia (en metros)
  equipamientos <- list(
    hospital = list(col_dist = "dist_hospital", col_cercania = "cercania_hospital", umbral = 1000),
    esc_priv = list(col_dist = "dist_esc_priv", col_cercania = "cercania_esc_priv", umbral = 1000),
    esc_pub = list(col_dist = "dist_esc_pub", col_cercania = "cercania_esc_pub", umbral = 1000),
    universidad = list(col_dist = "dist_universidad", col_cercania = "cercania_universidad", umbral = 1000),
    super = list(col_dist = "dist_super", col_cercania = "cercania_super", umbral = 1000),
    restau = list(col_dist = "dist_restau", col_cercania = "cercania_restau", umbral = 500),
    oficina = list(col_dist = "dist_oficina", col_cercania = "cercania_oficina", umbral = 1000),
    tienda_dept = list(col_dist = "dist_tienda_dept", col_cercania = "cercania_tienda_dept", umbral = 2000)
  )
  
  # Función para encontrar la distancia mínima a un tipo de equipamiento
  calcular_distancia_minima <- function(tipo, punto, datos) {
    # Filtrar lugares del tipo especificado
    lugares <- datos %>% 
      filter(get(paste0("cantidad_", tipo, "_1km")) > 0)
    
    if (nrow(lugares) == 0) {
      return(NA) # No hay lugares de este tipo en los datos
    }
    
    # Convertir a sf
    lugares_sf <- st_as_sf(lugares, coords = c("longitud", "latitud"), crs = 4326)
    
    # Calcular distancias
    distancias <- st_distance(punto, st_geometry(lugares_sf))
    
    # Devolver la mínima
    return(min(distancias))
  }
  
  # Calcular distancias y cercanías para cada tipo de equipamiento
  for (tipo in names(equipamientos)) {
    # Calcular distancia
    dist_col <- equipamientos[[tipo]]$col_dist
    distancia <- calcular_distancia_minima(tipo, nuevo_punto, datos_base)
    nuevo_proyecto[[dist_col]] <- as.numeric(distancia)
    
    # Determinar cercanía (binario)
    cercania_col <- equipamientos[[tipo]]$col_cercania
    umbral <- equipamientos[[tipo]]$umbral
    
    if (!is.na(distancia)) {
      # CORRECCIÓN AQUÍ: Convertir la distancia a valor numérico simple
      distancia_num <- as.numeric(distancia)
      nuevo_proyecto[[cercania_col]] <- if (distancia_num <= umbral) 1 else 0
    } else {
      nuevo_proyecto[[cercania_col]] <- 0 # Por defecto, si no hay datos
    }
  }
  
  # =====================================================
  # 3. Calcular cantidad de equipamientos en radio de 1km
  # =====================================================
  
  # Crear buffer de 1km alrededor del punto
  buffer_1km <- st_buffer(nuevo_punto, dist = 1000)
  
  # Función para contar equipamientos dentro del buffer
  contar_equipamientos_cercanos <- function(tipo, buffer, datos) {
    # Filtrar lugares del tipo especificado
    lugares <- datos %>% 
      filter(get(paste0("cantidad_", tipo, "_1km")) > 0)
    
    if (nrow(lugares) == 0) {
      return(0) # No hay lugares de este tipo en los datos
    }
    
    # Convertir a sf
    lugares_sf <- st_as_sf(lugares, coords = c("longitud", "latitud"), crs = 4326)
    
    # Contar cuántos están dentro del buffer
    dentro <- st_intersects(buffer, st_geometry(lugares_sf), sparse = FALSE)
    
    return(sum(dentro))
  }
  
  # Calcular cantidad de cada tipo de equipamiento
  for (tipo in names(equipamientos)) {
    cantidad_col <- paste0("cantidad_", tipo, "_1km")
    cantidad <- contar_equipamientos_cercanos(tipo, buffer_1km, datos_base)
    nuevo_proyecto[[cantidad_col]] <- cantidad
  }
  
  # =====================================================
  # 4. Estimar índices basados en proyectos similares
  # =====================================================
  
  # Filtrar proyectos del mismo municipio o cercanos
  proyectos_cercanos <- datos_base %>%
    filter(Municipio == municipio)
  
  if(nrow(proyectos_cercanos) < 3) {
    # Si hay pocos proyectos en el mismo municipio, usar los más cercanos geográficamente
    proyectos_cercanos_sf <- st_as_sf(datos_base, coords = c("longitud", "latitud"), crs = 4326)
    distancias <- st_distance(nuevo_punto, st_geometry(proyectos_cercanos_sf))
    proyectos_cercanos <- datos_base[order(distancias)[1:min(5, nrow(datos_base))], ]
  }
  
  # Estimar índices basados en proyectos cercanos
  indices <- c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia")
  for (indice in indices) {
    nuevo_proyecto[[indice]] <- mean(proyectos_cercanos[[indice]], na.rm = TRUE)
  }
  
  # Otros valores necesarios para el cálculo del IVU
  otros_factores <- c(
    "cerca_parque_relevante",
    "alta_densidad_pob",
    "predominio_hogares_propios",
    "alto_crecimiento",
    "alta_densidad_educativa",
    "alta_densidad_comercial",
    "alto_entorno_laboral"
  )
  
  for (factor in otros_factores) {
    nuevo_proyecto[[factor]] <- if(mean(proyectos_cercanos[[factor]], na.rm = TRUE) > 0.5) 1 else 0
  }
  
  # =====================================================
  # 5. Normalizar cantidades para el nuevo proyecto
  # =====================================================
  
  # Función para normalizar un valor basado en el rango de datos existentes
  normalizar_valor <- function(valor, columna, datos_base) {
    valores_col <- datos_base[[columna]]
    valores_validos <- valores_col[!is.na(valores_col)]
    
    if(length(valores_validos) == 0) return(0)
    
    min_val <- min(valores_validos)
    max_val <- max(valores_validos)
    
    # Si todos los valores son iguales, devolver 0.5
    if(max_val == min_val) return(0.5)
    
    # Normalizar el valor
    resultado <- (valor - min_val) / (max_val - min_val)
    return(max(0, min(1, resultado))) # Asegurar que esté entre 0 y 1
  }
  
  # Normalizar cantidades para el nuevo proyecto
  cantidades_norm_nuevo <- list()
  for (col in factores$cantidades) {
    valor <- nuevo_proyecto[[col]]
    cantidades_norm_nuevo[[col]] <- normalizar_valor(valor, col, datos_base)
  }
  
  # =====================================================
  # 6. Calcular IVU para el nuevo proyecto
  # =====================================================
  
  # Inicializar variables para el cálculo
  suma <- 0
  peso_total <- 0
  
  # Sumar los índices existentes
  for (indice in factores$indices) {
    if (!is.na(nuevo_proyecto[[indice]])) {
      suma <- suma + nuevo_proyecto[[indice]] * pesos[indice]
      peso_total <- peso_total + pesos[indice]
    }
  }
  
  # Sumar las cercanías (ya son binarias 0-1)
  for (cercania in factores$cercanias) {
    if (!is.na(nuevo_proyecto[[cercania]])) {
      suma <- suma + nuevo_proyecto[[cercania]] * pesos[cercania]
      peso_total <- peso_total + pesos[cercania]
    }
  }
  
  # Sumar las cantidades normalizadas
  for (cantidad in factores$cantidades) {
    if (!is.na(cantidades_norm_nuevo[[cantidad]])) {
      suma <- suma + cantidades_norm_nuevo[[cantidad]] * pesos[cantidad]
      peso_total <- peso_total + pesos[cantidad]
    }
  }
  
  # Sumar otros factores binarios
  for (otro in factores$otros) {
    if (!is.na(nuevo_proyecto[[otro]])) {
      suma <- suma + nuevo_proyecto[[otro]] * pesos[otro]
      peso_total <- peso_total + pesos[otro]
    }
  }
  
  # Calcular IVU
  nuevo_proyecto$ivu <- if (peso_total > 0) suma / peso_total else 0
  
  # Asignar categoría
  nuevo_proyecto$ivu_categoria <- cut(
    nuevo_proyecto$ivu, 
    breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), 
    labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
    include.lowest = TRUE
  )
  
  # =====================================================
  # 7. Devolver resultado
  # =====================================================
  
  return(nuevo_proyecto)
}



# ======================================================
# 1. Evaluar un nuevo proyecto con coordenadas conocidas
# ======================================================

# Conversión de coordenadas a número
convertir_coordenada_texto <- function(texto) {
  # Patrones para extraer los componentes
  patron <- "^(\\d+)°(\\d+)'(\\d+\\.?\\d*)?\"([NSEO])$"
  
  # Extraer componentes
  componentes <- regexec(patron, texto)
  partes <- regmatches(texto, componentes)[[1]]
  
  if (length(partes) < 5) {
    stop("Formato de coordenada incorrecto. Usa: DD°MM'SS.SS\"D donde D es N, S, E u O")
  }
  
  grados <- as.numeric(partes[2])
  minutos <- as.numeric(partes[3])
  segundos <- as.numeric(partes[4])
  direccion <- partes[5]
  
  # Convertir a decimal
  decimal <- grados + minutos/60 + segundos/3600
  
  # Ajustar según dirección
  if (direccion %in% c("S", "O", "W")) {
    decimal <- -decimal
  }
  
  return(decimal)
}

# Ejemplo de uso
latitud_texto <- "25°39'24.09\"N"
longitud_texto <- "100°21'50.16\"O"

lat_decimal <- convertir_coordenada_texto(latitud_texto)
long_decimal <- convertir_coordenada_texto(longitud_texto)

cat("Latitud decimal:", lat_decimal, "\n")
cat("Longitud decimal:", long_decimal, "\n")

# Coordenadas para el nuevo proyecto
longitud <- -100.3639
latitud <- 25.65669

# Evaluar el proyecto
nuevo_proyecto <- evaluar_nuevo_proyecto(
  longitud = longitud,
  latitud = latitud,
  nombre_proyecto = "Desarrollo Centrito Valle",
  desarrollador = "Inmobiliaria 123",
  municipio = "San Pedro Garza García",  # Opcional, podemos dejar NULL para determinación automática
  datos_base = datos,
  pesos = pesos,
  factores = factores
)

# ======================================================
# 2. Visualizar resultados
# ======================================================

# Visualizar el termómetro del IVU
crear_termometro <- function(proyecto) {
  valor <- proyecto$ivu
  categoria <- proyecto$ivu_categoria
  nombre <- proyecto$Proyecto
  
  colores <- c(
    "Muy bajo" = "#FF0000",  # Rojo
    "Bajo" = "#FF9900",      # Naranja
    "Medio" = "#FFCC00",     # Amarillo
    "Alto" = "#66CC00",      # Verde claro
    "Muy alto" = "#009900"   # Verde oscuro
  )
  
  color <- colores[as.character(categoria)]
  
  # Crear escala para el gráfico
  escala <- data.frame(
    y = seq(0, 1, 0.2),
    labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
    categorias = c("", "Muy bajo", "Bajo", "Medio", "Alto", "Muy alto")
  )
  
  # Crear gráfico base
  p <- ggplot() +
    # Fondo del termómetro
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = 1), 
              fill = "lightgrey", color = "black") +
    # Contenido del termómetro
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = valor), 
              fill = color) +
    # Líneas de escala
    geom_segment(data = escala, 
                 aes(x = 0.38, y = y, xend = 0.62, yend = y), 
                 color = "black") +
    # Etiquetas de escala
    geom_text(data = escala, 
              aes(x = 0.35, y = y, label = labels), 
              hjust = 1) +
    # Etiquetas de categorías
    geom_text(data = escala[-1,], 
              aes(x = 0.7, y = y - 0.1, label = categorias), 
              hjust = 0) +
    # Valor actual y nombre del proyecto
    geom_text(aes(x = 0.5, y = 1.1, 
                  label = paste0("Proyecto: ", nombre, 
                                 "\nValor: ", round(valor, 2), 
                                 "\nCategoría: ", categoria)),
              fontface = "bold") +
    # Ajustes estéticos
    labs(title = "Termómetro de Valor por Ubicación",
         x = NULL, y = NULL) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank(),
          plot.title = element_text(hjust = 0.5, face = "bold", size = 14)) +
    coord_cartesian(xlim = c(0, 1), ylim = c(-0.05, 1.25), expand = FALSE)
  
  return(p)
}

# Mostrar el termómetro
print(crear_termometro(nuevo_proyecto))

# ======================================================
# 3. Visualizar mapa con equipamientos cercanos
# ======================================================

# Crear un mapa que muestre el proyecto y los equipamientos cercanos
visualizar_mapa_equipamientos <- function(proyecto, datos_base) {
  # Convertir a objeto espacial
  punto <- st_sfc(st_point(c(proyecto$longitud, proyecto$latitud)), crs = 4326)
  buffer_1km <- st_buffer(punto, dist = 1000)  # Buffer de 1km
  
  # Definir colores para equipamientos
  colores <- c(
    "hospital" = "red",
    "esc_priv" = "green",
    "esc_pub" = "orange",
    "universidad" = "purple",
    "super" = "blue",
    "restau" = "brown",
    "oficina" = "darkgray",
    "tienda_dept" = "pink"
  )
  
  # Crear mapa base
  mapa <- leaflet() %>%
    addTiles() %>%
    setView(lng = proyecto$longitud, lat = proyecto$latitud, zoom = 14) %>%
    addMarkers(lng = proyecto$longitud, lat = proyecto$latitud, 
               popup = paste0("<b>", proyecto$Proyecto, "</b><br>IVU: ", round(proyecto$ivu, 2)))
  
  # Añadir buffer de 1km
  mapa <- mapa %>%
    addPolygons(data = buffer_1km, fillColor = "blue", fillOpacity = 0.1, 
                weight = 2, color = "blue", dashArray = "5,5",
                popup = "Radio de 1km")
  
  # Añadir marcadores para proyectos existentes por municipio
  proyectos_municipio <- datos_base %>%
    filter(Municipio == proyecto$Municipio)
  
  if(nrow(proyectos_municipio) > 0) {
    mapa <- mapa %>%
      addCircleMarkers(
        data = proyectos_municipio,
        lng = ~longitud, 
        lat = ~latitud,
        radius = 4,
        color = "gray",
        fillColor = "darkblue",
        fillOpacity = 0.7,
        popup = ~paste0("<b>", Proyecto, "</b><br>IVU: ", round(ivu, 2))
      )
  }
  
  # Añadir marcadores para equipamientos, si tenemos datos de proyectos con esos equipamientos
  tipos_equipamientos <- c("hospital", "esc_priv", "esc_pub", "universidad", 
                           "super", "restau", "oficina", "tienda_dept")
  
  for(tipo in tipos_equipamientos) {
    # Verificar si el proyecto tiene valores para este equipamiento
    col_cantidad <- paste0("cantidad_", tipo, "_1km")
    
    if(!is.na(proyecto[[col_cantidad]]) && proyecto[[col_cantidad]] > 0) {
      # Encontrar proyectos con este equipamiento cercanos al punto
      proyectos_con_equip <- datos_base %>%
        filter(get(col_cantidad) > 0)
      
      if(nrow(proyectos_con_equip) > 0) {
        # Convertir a sf
        proyectos_sf <- st_as_sf(proyectos_con_equip, coords = c("longitud", "latitud"), crs = 4326)
        
        # Calcular distancias
        distancias <- st_distance(punto, st_geometry(proyectos_sf))
        
        # Filtrar los que estén a menos de 1500m
        cerca_idx <- which(distancias < units::set_units(1500, "m"))
        
        if(length(cerca_idx) > 0) {
          # Añadir al mapa
          mapa <- mapa %>%
            addCircleMarkers(
              data = proyectos_con_equip[cerca_idx, ],
              lng = ~longitud, 
              lat = ~latitud,
              radius = 5,
              color = "black",
              fillColor = colores[tipo],
              fillOpacity = 0.7,
              popup = ~paste0("<b>", tipo, "</b>")
            )
        }
      }
    }
  }
  
  return(mapa)
}

# Mostrar el mapa
visualizar_mapa_equipamientos(nuevo_proyecto, datos)

# ======================================================
# 4. Imprimir resumen de resultados
# ======================================================

# Función para mostrar resumen de resultados
mostrar_resumen <- function(proyecto, datos_base) {
  # Promedio del municipio
  prom_municipio <- datos_base %>%
    filter(Municipio == proyecto$Municipio) %>%
    summarise(prom_ivu = mean(ivu, na.rm = TRUE)) %>%
    pull(prom_ivu)
  
  prom_municipio <- if (is.na(prom_municipio)) 0 else prom_municipio
  
  # Comparación con promedio municipal
  comparacion <- proyecto$ivu - prom_municipio
  comp_texto <- if (comparacion > 0) {
    paste0("Supera en ", round(comparacion * 100, 1), "% al promedio municipal")
  } else if (comparacion < 0) {
    paste0("Inferior en ", round(abs(comparacion) * 100, 1), "% al promedio municipal")
  } else {
    "Igual al promedio municipal"
  }
  
  # Mostrar resumen
  cat("\n========== RESUMEN DE EVALUACIÓN IVU ==========\n")
  cat("\nNombre del proyecto:", proyecto$Proyecto)
  cat("\nDesarrollador:", proyecto$Desarrollador)
  cat("\nMunicipio:", proyecto$Municipio)
  cat("\nCoordenadas:", proyecto$latitud, ",", proyecto$longitud)
  cat("\n\nÍndice de Valor por Ubicación (IVU):", round(proyecto$ivu, 3))
  cat("\nCategoría:", proyecto$ivu_categoria)
  cat("\nPromedio municipal:", round(prom_municipio, 3))
  cat("\n", comp_texto, "\n")
  
  cat("\n---------- Equipamientos cercanos (1km) ----------\n")
  cat("Hospitales:", proyecto$cantidad_hospital_1km)
  cat("\nEscuelas Privadas:", proyecto$cantidad_esc_priv_1km)
  cat("\nEscuelas Públicas:", proyecto$cantidad_esc_pub_1km)
  cat("\nUniversidades:", proyecto$cantidad_universidad_1km)
  cat("\nSupermercados:", proyecto$cantidad_super_1km)
  cat("\nRestaurantes:", proyecto$cantidad_restau_1km)
  cat("\nOficinas:", proyecto$cantidad_oficina_1km)
  cat("\nTiendas Departamentales:", proyecto$cantidad_tienda_dept_1km)
  cat("\n\n---------- Índices ----------\n")
  cat("Índice de Accesibilidad:", round(proyecto$indice_accesibilidad, 3))
  cat("\nPotencial de Inversión:", round(proyecto$potencial_inversion, 3))
  cat("\nÍndice de Conveniencia:", round(proyecto$indice_conveniencia, 3))
  cat("\n\n=============================================\n")
}

# Mostrar resumen
mostrar_resumen(nuevo_proyecto, datos)

# ======================================================
# 5. Guardar resultados
# ======================================================

# Guardar el termómetro como imagen PNG
ggsave("termometro_nuevo_proyecto.png", 
       plot = crear_termometro(nuevo_proyecto), 
       width = 6, height = 8, dpi = 300)

# Guardar los datos del proyecto evaluado como CSV
write.csv(nuevo_proyecto, "resultados_nuevo_proyecto.csv", row.names = FALSE)

# Imprimir mensaje de finalización
cat("\nEvaluación completada. Resultados guardados en:\n")
cat("- termometro_nuevo_proyecto.png\n")
cat("- resultados_nuevo_proyecto.csv\n")
