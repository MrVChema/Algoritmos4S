# ================================================================================
# SISTEMA IVU-IVP: TEST DE VALIDACI√ìN COMPLETO ACTUALIZADO
# ================================================================================
# Valida todas las correcciones implementadas incluyendo IDs y an√°lisis segmentado
# Fuerza generaci√≥n de visualizaciones para validaci√≥n completa
# ================================================================================

# === CONFIGURACI√ìN DE RUTAS ===
cat("üß™ INICIANDO TEST DE VALIDACI√ìN COMPLETO ACTUALIZADO\n")
cat("======================================================\n")

# Limpiar entorno
rm(list = ls())

# Rutas del sistema
DIRECTORIO_BASE_SISTEMA <- "/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO"
DIRECTORIO_SCRIPTS <- file.path(DIRECTORIO_BASE_SISTEMA, "[04] MODELACI√ìN", "[03] TESTEO")
DIRECTORIO_DATOS <- file.path(DIRECTORIO_BASE_SISTEMA, "[02] DATOS")
DIRECTORIO_PROYECTO <- file.path(DIRECTORIO_BASE_SISTEMA, "[04] MODELACI√ìN", "[00] RESULTADOS")

# Establecer directorio de trabajo
setwd(DIRECTORIO_PROYECTO)

# Configuraci√≥n ACTUALIZADA usando IDs
CONFIGURACION_USUARIO <- list(
  # NUEVOS: PROYECTOS POR ID (NO POR √çNDICE)
  proyecto_principal_id = 24,          # ID del proyecto principal
  proyecto_comparacion_1_id = 25,      # ID del primer proyecto de comparaci√≥n
  proyecto_comparacion_2_id = 32,      # ID del segundo proyecto de comparaci√≥n
  
  # Configuraciones de an√°lisis
  generar_mapas_interactivos = TRUE,
  generar_reportes_pdf = TRUE,
  exportar_para_keynote = TRUE,
  evaluar_evolucion_nse = TRUE,
  incluir_analisis_espacial_nse = TRUE,
  usar_paleta_4s = TRUE,
  incluir_termometros = TRUE,
  generar_radares_dimensionales = TRUE
)

# Establecer variables globales
DIRECTORIO_BASE <- DIRECTORIO_BASE_SISTEMA
DIRECTORIO_SCRIPTS <- DIRECTORIO_SCRIPTS
DIRECTORIO_DATOS <- DIRECTORIO_DATOS

# Asignar variables globales por ID
PROYECTO_PRINCIPAL_ID <- CONFIGURACION_USUARIO$proyecto_principal_id
PROYECTO_COMPARACION_1_ID <- CONFIGURACION_USUARIO$proyecto_comparacion_1_id
PROYECTO_COMPARACION_2_ID <- CONFIGURACION_USUARIO$proyecto_comparacion_2_id

# === EJECUTAR SCRIPTS EN SECUENCIA ===
cat("\nüîÑ EJECUTANDO SCRIPTS EN SECUENCIA CON VALIDACI√ìN...\n")

# Script 01: Master Control
cat("\n1Ô∏è‚É£ Ejecutando Master Control (con IDs)...\n")
tryCatch({
  source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_01_MASTER_CONTROL.R"))
  cat("‚úÖ Master Control ejecutado\n")
  
  # Validar que variables por ID fueron creadas
  if(exists("PROYECTO_PRINCIPAL_ID") && exists("PROYECTO_COMPARACION_1_ID") && exists("PROYECTO_COMPARACION_2_ID")) {
    cat("‚úÖ Variables ID globales creadas correctamente\n")
  } else {
    cat("‚ö†Ô∏è  Variables ID globales no creadas - usando configuraci√≥n local\n")
  }
  
}, error = function(e) {
  cat("‚ùå Error en Master Control:", conditionMessage(e), "\n")
  stop("Test detenido")
})

# Script 02: Preparaci√≥n de Datos
cat("\n2Ô∏è‚É£ Ejecutando Preparaci√≥n de Datos (con creaci√≥n de ID)...\n")
tryCatch({
  source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_02_PREPARACION_DATOS.R"))
  cat("‚úÖ Preparaci√≥n de datos completada\n")
  
  # VALIDACI√ìN ESPEC√çFICA DE VARIABLE ID
  cat("\nüîç VALIDANDO CREACI√ìN DE VARIABLE ID...\n")
  if(exists("base_integrada")) {
    if("ID" %in% names(base_integrada)) {
      cat("‚úÖ Variable ID creada en base_integrada\n")
      cat("üìä Rango de IDs:", min(base_integrada$ID), "a", max(base_integrada$ID), "\n")
      
      # Verificar que ID est√° al principio
      primeras_cols <- names(base_integrada)[1:6]
      if(primeras_cols[1] == "ID") {
        cat("‚úÖ Variable ID est√° como primera columna\n")
        cat("üìã Primeras columnas:", paste(primeras_cols, collapse = ", "), "\n")
      } else {
        cat("‚ùå Variable ID no est√° como primera columna\n")
      }
      
      # Mostrar muestra de IDs
      muestra_base <- st_drop_geometry(base_integrada) %>% 
        select(ID, Proyecto, Desarrollador, Segmento, nse) %>% 
        head(5)
      cat("üìã Muestra de base_integrada con ID:\n")
      print(muestra_base)
      
    } else {
      cat("‚ùå Variable ID NO creada en base_integrada\n")
    }
  } else {
    cat("‚ùå base_integrada no existe\n")
  }
  
}, error = function(e) {
  cat("‚ùå Error en Preparaci√≥n de Datos:", conditionMessage(e), "\n")
  stop("Test detenido")
})

# Script 03: C√°lculo de √çndices
cat("\n3Ô∏è‚É£ Ejecutando C√°lculo de √çndices (con propagaci√≥n de ID)...\n")
tryCatch({
  source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_03_CALCULO_INDICES.R"))
  cat("‚úÖ C√°lculo de √≠ndices completado\n")
  
  # Validar que ID se propag√≥ correctamente
  if(exists("datos_completos")) {
    if("ID" %in% names(datos_completos)) {
      cat("‚úÖ Variable ID propagada a datos_completos\n")
      cat("üìä IDs en datos_completos:", min(datos_completos$ID), "a", max(datos_completos$ID), "\n")
    } else {
      cat("‚ùå Variable ID NO propagada a datos_completos\n")
    }
  }
  
}, error = function(e) {
  cat("‚ùå Error en C√°lculo de √çndices:", conditionMessage(e), "\n")
  stop("Test detenido")
})

# Script 04: An√°lisis Avanzado CORREGIDO
cat("\n4Ô∏è‚É£ Ejecutando An√°lisis Avanzado (con IDs y an√°lisis segmentado)...\n")
tryCatch({
  source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_04_ANALISIS_AVANZADO.R"))
  cat("‚úÖ An√°lisis avanzado completado\n")
}, error = function(e) {
  cat("‚ùå Error en An√°lisis Avanzado:", conditionMessage(e), "\n")
  cat("   Error espec√≠fico:", e$message, "\n")
  
  # Continuar con validaciones incluso si hay error
  cat("‚ö†Ô∏è  Continuando con validaciones...\n")
})

# === VALIDACIONES ESPEC√çFICAS ACTUALIZADAS ===
cat("\nüìä VALIDACIONES ESPEC√çFICAS ACTUALIZADAS\n")
cat("=========================================\n")

# ---- VALIDACI√ìN 1: SISTEMA DE IDs ----
cat("\n1Ô∏è‚É£ Validando sistema de IDs implementado...\n")

# Verificar que funciones auxiliares existen
funciones_id <- c("obtener_indice_por_id", "validar_proyectos_seleccionados", "mostrar_catalogo_proyectos")
for(func in funciones_id) {
  if(exists(func)) {
    cat("‚úÖ Funci√≥n", func, "disponible\n")
  } else {
    cat("‚ùå Funci√≥n", func, "NO disponible\n")
  }
}

# Test de conversi√≥n ID ‚Üí √≠ndice
if(exists("datos_completos") && "ID" %in% names(datos_completos)) {
  cat("\nüß™ Test de conversi√≥n ID ‚Üí √≠ndice:\n")
  
  # Probar con ID espec√≠fico
  id_test <- 21
  if(exists("obtener_indice_por_id")) {
    indice_test <- tryCatch({
      obtener_indice_por_id(datos_completos, id_test)
    }, error = function(e) NULL)
    
    if(!is.null(indice_test)) {
      proyecto_test <- datos_completos[indice_test, ]
      cat("‚úÖ Conversi√≥n ID", id_test, "‚Üí √≠ndice", indice_test, "\n")
      cat("   Proyecto encontrado:", proyecto_test$Proyecto[1], "\n")
      cat("   Segmento:", proyecto_test$Segmento[1], "\n")
    } else {
      cat("‚ùå Error en conversi√≥n ID ‚Üí √≠ndice\n")
    }
  }
}

# ---- VALIDACI√ìN 2: CONFIGURACI√ìN POR IDs ----
cat("\n2Ô∏è‚É£ Validando configuraci√≥n por IDs...\n")

ids_configurados <- c("PROYECTO_PRINCIPAL_ID", "PROYECTO_COMPARACION_1_ID", "PROYECTO_COMPARACION_2_ID")
for(var_id in ids_configurados) {
  if(exists(var_id)) {
    valor_id <- get(var_id)
    cat("‚úÖ", var_id, "=", valor_id, "\n")
  } else {
    cat("‚ùå", var_id, "NO configurada\n")
  }
}

# ---- VALIDACI√ìN 3: DATOS SEGMENTADOS CON ID ----
cat("\n3Ô∏è‚É£ Validando datos segmentados con sistema ID...\n")

if(exists("datos_segmentados")) {
  cat("‚úÖ datos_segmentados existe\n")
  cat("üìä Proyectos en datos_segmentados:", nrow(datos_segmentados), "\n")
  
  # Verificar que ID existe en datos_segmentados
  if("ID" %in% names(datos_segmentados)) {
    cat("‚úÖ Variable ID presente en datos_segmentados\n")
    cat("üìä Rango de IDs:", min(datos_segmentados$ID), "a", max(datos_segmentados$ID), "\n")
    
    # Verificar que proyectos configurados existen en datos_segmentados
    ids_buscar <- c(PROYECTO_PRINCIPAL_ID, PROYECTO_COMPARACION_1_ID, PROYECTO_COMPARACION_2_ID)
    proyectos_encontrados <- 0
    
    for(id_buscar in ids_buscar) {
      if(id_buscar %in% datos_segmentados$ID) {
        proyecto_info <- datos_segmentados[datos_segmentados$ID == id_buscar, ]
        cat("‚úÖ ID", id_buscar, "encontrado:", proyecto_info$Proyecto[1], "(", proyecto_info$Segmento[1], ")\n")
        proyectos_encontrados <- proyectos_encontrados + 1
      } else {
        cat("‚ùå ID", id_buscar, "NO encontrado en datos_segmentados\n")
      }
    }
    
    if(proyectos_encontrados == 3) {
      cat("‚úÖ Todos los proyectos configurados est√°n en datos_segmentados\n")
    } else {
      cat("‚ö†Ô∏è  Solo", proyectos_encontrados, "de 3 proyectos encontrados\n")
    }
    
  } else {
    cat("‚ùå Variable ID NO presente en datos_segmentados\n")
  }
  
  # Verificar variables cr√≠ticas segmentadas
  vars_segmentadas <- c("ivu_segmentado", "ivp_segmentado", "categoria_4s")
  for(var in vars_segmentadas) {
    if(var %in% names(datos_segmentados)) {
      cat("‚úÖ Variable", var, "presente\n")
    } else {
      cat("‚ùå Variable", var, "FALTANTE\n")
    }
  }
  
} else {
  cat("‚ùå datos_segmentados NO existe\n")
}

# ---- VALIDACI√ìN 4: FUNCIONES SEGMENTADAS ACTUALIZADAS ----
cat("\n4Ô∏è‚É£ Validando funciones segmentadas actualizadas...\n")

funciones_completas <- c(
  "crear_matriz_4s_segmentada",
  "crear_mapa_4s_segmentado", 
  "crear_termometro_segmentado",
  "analizar_proyecto_individual_segmentado",
  "ejecutar_analisis_integral",
  "comparar_proyectos_integral",
  "crear_grafico_comparativo_dimensiones",
  "exportar_resultados_keynote"
)

funciones_disponibles <- 0
for(func in funciones_completas) {
  if(exists(func)) {
    cat("‚úÖ Funci√≥n", func, "disponible\n")
    funciones_disponibles <- funciones_disponibles + 1
  } else {
    cat("‚ùå Funci√≥n", func, "NO disponible\n")
  }
}

cat("üìä Funciones disponibles:", funciones_disponibles, "de", length(funciones_completas), "\n")

# ---- VALIDACI√ìN 5: FORZAR GENERACI√ìN DE VISUALIZACIONES ----
cat("\n5Ô∏è‚É£ Forzando generaci√≥n de visualizaciones para validaci√≥n...\n")

if(exists("datos_segmentados") && nrow(datos_segmentados) > 0 && 
   exists("obtener_indice_por_id") && exists("validar_proyectos_seleccionados")) {
  
  cat("üé® Intentando generar visualizaciones espec√≠ficas...\n")
  
  # Convertir IDs a √≠ndices usando las funciones
  ids_proyectos <- c(PROYECTO_PRINCIPAL_ID, PROYECTO_COMPARACION_1_ID, PROYECTO_COMPARACION_2_ID)
  
  tryCatch({
    validacion_viz <- validar_proyectos_seleccionados(datos_segmentados, ids_proyectos)
    
    if(length(validacion_viz$indices) >= 1) {
      indice_principal <- validacion_viz$indices[1]
      cat("‚úÖ √çndice principal para visualizaciones:", indice_principal, "\n")
      
      # Test 1: Generar term√≥metro
      cat("üå°Ô∏è  Generando term√≥metro segmentado...\n")
      tryCatch({
        if(exists("crear_termometro_segmentado")) {
          termometro_test <- crear_termometro_segmentado(datos_segmentados, indice_principal, "ivu")
          if(!is.null(termometro_test)) {
            cat("‚úÖ Term√≥metro IVU generado exitosamente\n")
            print(termometro_test)
          }
        }
      }, error = function(e) {
        cat("‚ùå Error generando term√≥metro:", e$message, "\n")
      })
      
      # Test 2: Generar an√°lisis individual
      cat("\nüìä Generando an√°lisis individual segmentado...\n")
      tryCatch({
        if(exists("analizar_proyecto_individual_segmentado")) {
          analisis_test <- analizar_proyecto_individual_segmentado(datos_segmentados, indice_principal)
          if(!is.null(analisis_test)) {
            cat("‚úÖ An√°lisis individual generado exitosamente\n")
          }
        }
      }, error = function(e) {
        cat("‚ùå Error generando an√°lisis individual:", e$message, "\n")
      })
      
      # Test 3: Mostrar cat√°logo de proyectos
      cat("\nüìã Mostrando cat√°logo de proyectos disponibles...\n")
      tryCatch({
        if(exists("mostrar_catalogo_proyectos")) {
          catalogo_test <- mostrar_catalogo_proyectos(datos_segmentados)
          cat("‚úÖ Cat√°logo generado exitosamente\n")
        }
      }, error = function(e) {
        cat("‚ùå Error generando cat√°logo:", e$message, "\n")
      })
      
      # Test 4: Generar comparaci√≥n integral (si hay 3 proyectos)
      if(length(validacion_viz$indices) >= 3) {
        cat("\n‚öñÔ∏è  Generando comparaci√≥n integral...\n")
        tryCatch({
          if(exists("comparar_proyectos_integral")) {
            comparacion_test <- comparar_proyectos_integral(datos_segmentados, 
                                                            validacion_viz$indices[1],
                                                            validacion_viz$indices[2], 
                                                            validacion_viz$indices[3])
            cat("‚úÖ Comparaci√≥n integral generada exitosamente\n")
          }
        }, error = function(e) {
          cat("‚ùå Error generando comparaci√≥n integral:", e$message, "\n")
        })
        
        # Test 5: Generar gr√°fico comparativo
        cat("\nüìä Generando gr√°fico comparativo...\n")
        tryCatch({
          if(exists("crear_grafico_comparativo_dimensiones")) {
            grafico_comp <- crear_grafico_comparativo_dimensiones(datos_segmentados,
                                                                  validacion_viz$indices[1],
                                                                  validacion_viz$indices[2], 
                                                                  validacion_viz$indices[3])
            if(!is.null(grafico_comp)) {
              cat("‚úÖ Gr√°fico comparativo generado exitosamente\n")
              print(grafico_comp)
            }
          }
        }, error = function(e) {
          cat("‚ùå Error generando gr√°fico comparativo:", e$message, "\n")
        })
      }
      
    } else {
      cat("‚ö†Ô∏è  No se pudieron obtener √≠ndices v√°lidos para visualizaciones\n")
    }
    
  }, error = function(e) {
    cat("‚ùå Error en validaci√≥n de proyectos:", e$message, "\n")
  })
  
} else {
  cat("‚ùå No se pueden generar visualizaciones - datos o funciones faltantes\n")
}

# ---- VALIDACI√ìN 6: ARCHIVOS GENERADOS ----
cat("\n6Ô∏è‚É£ Validando archivos generados...\n")

archivos_esperados <- c(
  "base_integrada_completa.gpkg",
  "base_inmobiliaria_transformada.csv", 
  "proyectos_indices_completos.csv",
  "matriz_4s_todos_segmentos_keynote.csv"
)

archivos_encontrados <- 0
for(archivo in archivos_esperados) {
  if(file.exists(archivo)) {
    size_kb <- round(file.info(archivo)$size / 1024, 1)
    cat("‚úÖ", archivo, "(", size_kb, "KB)\n")
    archivos_encontrados <- archivos_encontrados + 1
  } else {
    cat("‚ùå", archivo, "no generado\n")
  }
}

cat("üìä Archivos encontrados:", archivos_encontrados, "de", length(archivos_esperados), "\n")

# ---- VALIDACI√ìN 7: INTEGRIDAD DE RESULTADOS FINALES ----
cat("\n7Ô∏è‚É£ Validando integridad de resultados finales...\n")

if(exists("resultados_analisis_avanzado")) {
  cat("‚úÖ resultados_analisis_avanzado existe\n")
  
  # Verificar estructura completa
  secciones_esperadas <- c("configuracion", "analisis_individuales", "comparacion", 
                           "estadisticas", "visualizaciones", "exportacion")
  
  secciones_encontradas <- 0
  for(seccion in secciones_esperadas) {
    if(seccion %in% names(resultados_analisis_avanzado)) {
      cat("‚úÖ Secci√≥n", seccion, "presente\n")
      secciones_encontradas <- secciones_encontradas + 1
    } else {
      cat("‚ùå Secci√≥n", seccion, "FALTANTE\n")
    }
  }
  
  cat("üìä Secciones encontradas:", secciones_encontradas, "de", length(secciones_esperadas), "\n")
  
  # Verificar configuraci√≥n con IDs
  if("configuracion" %in% names(resultados_analisis_avanzado)) {
    config <- resultados_analisis_avanzado$configuracion
    if("indices_proyectos" %in% names(config)) {
      cat("‚úÖ √çndices de proyectos registrados en configuraci√≥n\n")
      cat("üìä Proyectos registrados:", paste(config$indices_proyectos, collapse = ", "), "\n")
    }
  }
  
} else {
  cat("‚ùå resultados_analisis_avanzado NO existe\n")
}

# === RESUMEN FINAL COMPLETO ===
cat("\n", rep("=", 70), "\n")
cat("RESUMEN FINAL DEL TEST DE VALIDACI√ìN COMPLETO ACTUALIZADO\n")
cat(rep("=", 70), "\n")

# Calcular estad√≠sticas de √©xito
tests_principales <- list(
  "Sistema de IDs implementado" = exists("obtener_indice_por_id"),
  "Variable ID en base_integrada" = exists("base_integrada") && "ID" %in% names(base_integrada),
  "Variable ID en datos_completos" = exists("datos_completos") && "ID" %in% names(datos_completos),
  "datos_segmentados existe" = exists("datos_segmentados"),
  "Funciones segmentadas disponibles" = funciones_disponibles >= (length(funciones_completas) * 0.75),
  "resultados_analisis_avanzado existe" = exists("resultados_analisis_avanzado"),
  "Archivos generados" = archivos_encontrados >= (length(archivos_esperados) * 0.75)
)

exitos <- sum(unlist(tests_principales))
total_tests <- length(tests_principales)

cat("\nüìä RESULTADOS CONSOLIDADOS:\n")
for(test_name in names(tests_principales)) {
  resultado <- tests_principales[[test_name]]
  if(resultado) {
    cat("‚úÖ", test_name, "\n")
  } else {
    cat("‚ùå", test_name, "\n")
  }
}

cat("\nüìà ESTAD√çSTICAS FINALES:\n")
cat("Tests exitosos:", exitos, "de", total_tests, "\n")
cat("Porcentaje de √©xito:", round(exitos / total_tests * 100, 1), "%\n")
cat("Funciones disponibles:", funciones_disponibles, "de", length(funciones_completas), "\n")
cat("Archivos generados:", archivos_encontrados, "de", length(archivos_esperados), "\n")

# Evaluaci√≥n final
if(exitos >= total_tests * 0.85) {
  cat("\nüéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!\n")
  cat("‚úÖ Correcci√≥n de IDs implementada exitosamente\n")
  cat("‚úÖ An√°lisis segmentado funcionando correctamente\n")
  cat("‚úÖ Visualizaciones gener√°ndose con proyectos correctos\n")
  cat("‚úÖ Sistema listo para uso en consultor√≠a\n")
  
  cat("\nüöÄ PARA USAR EL SISTEMA:\n")
  cat("1. Cambiar IDs: PROYECTO_PRINCIPAL_ID <- nuevo_id\n")
  cat("2. Ver proyectos: mostrar_catalogo_proyectos(datos_segmentados)\n")
  cat("3. Generar an√°lisis: ejecutar_analisis_integral(indice)\n")
  cat("4. Comparar proyectos: comparar_proyectos_integral(datos, idx1, idx2, idx3)\n")
  
} else if(exitos >= total_tests * 0.70) {
  cat("\n‚ö†Ô∏è  SISTEMA PARCIALMENTE FUNCIONAL\n")
  cat("La mayor√≠a de funcionalidades est√°n operativas\n")
  cat("Revisar elementos faltantes arriba\n")
  
} else {
  cat("\n‚ùå SISTEMA REQUIERE CORRECCIONES ADICIONALES\n")
  cat("Varios elementos cr√≠ticos no est√°n funcionando\n")
  cat("Revisar implementaci√≥n de IDs y funciones segmentadas\n")
}

cat("\nüí° PR√ìXIMOS PASOS:\n")
if(!exists("mostrar_catalogo_proyectos")) {
  cat("1. Verificar que todas las funciones est√°n en Script_04\n")
}
if(archivos_encontrados < length(archivos_esperados)) {
  cat("2. Ejecutar scripts individualmente para identificar errores\n") 
}
cat("3. Usar datos_segmentados para an√°lisis consultivo\n")
cat("4. Generar visualizaciones espec√≠ficas con IDs correctos\n")

cat("\nüîß EL SISTEMA IVU-IVP ACTUALIZADO EST√Å LISTO\n")
cat("============================================\n")
