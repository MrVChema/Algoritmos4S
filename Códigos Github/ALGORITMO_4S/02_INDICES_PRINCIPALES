# =============================================================================
# SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES - METODOLOG√çA ORIGINAL FIEL
# Flujo Optimizado - Consolidaci√≥n EXACTA de Scripts 3, 4, 5, 7, 8 y 9 originales
# =============================================================================
# 
# TAREAS CONSOLIDADAS (RESPETANDO METODOLOG√çA ORIGINAL AL 100%):
# - C√°lculo de correlaciones y pesos (del Script 3 ORIGINAL)
# - Construcci√≥n del IVU con pesos calculados (del Script 4 ORIGINAL)
# - Construcci√≥n del IVP con an√°lisis de amenidades (del Script 8 ORIGINAL)
# - Modelo de evoluci√≥n NSE (Scripts 5 y 7 ORIGINALES)
# - Creaci√≥n de versiones segmentadas (del Script 9 ORIGINAL)
#
# OUTPUT: Dataset con IVU, IVP, evoluci√≥n NSE, versiones segmentadas
# =============================================================================

# ---- 1. CONFIGURACI√ìN INICIAL ----
rm(list = ls())

# Capturar inicio de tiempo
tiempo_inicio <- Sys.time()

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/OUTPUT_BASE INTEGRADA_IVU-IVP')

# Crear directorio para logs si no existe
if (!dir.exists("logs")) {
  dir.create("logs")
}

# Iniciar captura de log
archivo_log <- paste0("logs/script_02_metodologia_original_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log")
sink(archivo_log, split = TRUE)

cat("=============================================================================\n")
cat("SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES - METODOLOG√çA ORIGINAL FIEL\n")
cat("Inicio:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")
cat("=============================================================================\n\n")

# Cargar bibliotecas
library(dplyr)
library(ggplot2)
library(corrplot)
library(sf)
library(leaflet)
library(plotly)
library(DT)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(stringr)
library(tidyr)
library(reshape2)
library(readr)

cat("‚úÖ Bibliotecas cargadas exitosamente\n\n")

# ---- 2. CARGAR DATOS ----
cat("üìÇ CARGANDO DATOS...\n")

# Cargar datos preparados del Script 1
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/OUTPUT_BASE INTEGRADA_IVU-IVP/base_inmobiliaria_preparada.csv', stringsAsFactors = FALSE, encoding = "UTF-8")

cat("‚úÖ Base de datos cargada:\n")
cat("- Proyectos:", nrow(datos), "\n")
cat("- Variables:", ncol(datos), "\n\n")

# ---- 3. DEFINICI√ìN DE FACTORES (SCRIPT 3 ORIGINAL) ----
cat("üîß DEFINIENDO FACTORES SEG√öN SCRIPT 3 ORIGINAL...\n")

# Factores EXACTOS del Script 3 original
factores <- list(
  # √çndices existentes
  indices = c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia"),
  
  # Cercan√≠as a equipamientos (0 o 1)
  cercanias = c(
    "cercania_hospital", 
    "cercania_esc_priv", 
    "cercania_esc_pub", 
    "cercania_universidad", 
    "cercania_super", 
    "cercania_restau", 
    "cercania_oficina", 
    "cercania_tienda_dept"
  ),
  
  # Cantidades de equipamientos en 1km
  cantidades = c(
    "cantidad_hospital_1km", 
    "cantidad_esc_priv_1km", 
    "cantidad_esc_pub_1km", 
    "cantidad_universidad_1km", 
    "cantidad_super_1km", 
    "cantidad_restau_1km", 
    "cantidad_oficina_1km", 
    "cantidad_tienda_dept_1km"
  ),
  
  # Variables de vialidades (del Script 3 original)
  vialidades = c(
    "cerca_avenida_principal",
    "cercania_avenida",
    "cercania_avenida_arterial",
    "cercania_avenida_secundaria",
    "accesibilidad_vial"
  ),
  
  # Otros factores relevantes
  otros = c(
    "cerca_parque_relevante",
    "alta_densidad_pob",
    "predominio_hogares_propios",
    "alto_crecimiento",
    "alta_densidad_educativa",
    "alta_densidad_comercial",
    "alto_entorno_laboral"
  )
)

cat("‚úÖ Factores definidos seg√∫n metodolog√≠a original\n\n")

# ---- 4. FUNCIONES AUXILIARES (SCRIPT 3 ORIGINAL) ----
cat("üîß DEFINIENDO FUNCIONES AUXILIARES ORIGINALES...\n")

# Funci√≥n para calcular correlaci√≥n (del Script 3 original)
calcular_correlacion <- function(x, y) {
  # Filtrar valores completos
  indices_completos <- !is.na(x) & !is.na(y) & is.finite(x) & is.finite(y)
  
  if (sum(indices_completos) < 3) {
    return(0)
  }
  
  x_limpio <- x[indices_completos]
  y_limpio <- y[indices_completos]
  
  # Si alguna variable es constante, retornar 0
  if (sd(x_limpio) == 0 || sd(y_limpio) == 0) {
    return(0)
  }
  
  # Calcular correlaci√≥n
  tryCatch({
    cor(x_limpio, y_limpio, method = "pearson")
  }, error = function(e) {
    return(0)
  })
}

cat("‚úÖ Funciones auxiliares definidas\n\n")

# ---- 5. C√ÅLCULO DE CORRELACIONES (SCRIPT 3 ORIGINAL) ----
cat("üìä CALCULANDO CORRELACIONES SEG√öN SCRIPT 3 ORIGINAL...\n")

# Todos los factores para correlaciones (excluyendo amenidades que van al IVP)
todos_factores_ivu <- unique(c(
  factores$indices, factores$cercanias, factores$cantidades,
  factores$vialidades, factores$otros
))

# Filtrar factores que existen en los datos
factores_existentes <- intersect(todos_factores_ivu, colnames(datos))
cat("Factores disponibles para IVU:", length(factores_existentes), "/", length(todos_factores_ivu), "\n")

# Calcular correlaciones con precio por m¬≤
correlaciones <- numeric()
precio_m2 <- as.numeric(datos$p_m2)

for (factor in factores_existentes) {
  valores_factor <- as.numeric(datos[[factor]])
  corr <- calcular_correlacion(valores_factor, precio_m2)
  correlaciones[factor] <- corr
}

cat("‚úÖ Correlaciones calculadas para", length(correlaciones), "factores\n")

# ---- 6. AJUSTES DE CONOCIMIENTO EXPERTO (SCRIPT 3 ORIGINAL) ----
cat("\nüß† APLICANDO AJUSTES DE CONOCIMIENTO EXPERTO...\n")

# Ajustes EXACTOS del Script 3 original
correlaciones_ajustadas <- correlaciones

# Solo ajustar factores que existen en correlaciones
ajustes_expertos_originales <- list(
  "cercania_universidad" = 0.0628,
  "cercania_tienda_dept" = 0.0732,
  "cercania_oficina" = 0.0353,
  "cantidad_oficina_1km" = 0.0752,
  "indice_conveniencia" = 0.0918,
  "potencial_inversion" = 0.0915,
  "accesibilidad_vial" = 0.0926,
  "cercania_avenida" = 0.0514,
  "cerca_avenida_principal" = 0.0352
)

ajustes_aplicados <- 0
for (factor in names(ajustes_expertos_originales)) {
  if (factor %in% names(correlaciones_ajustadas)) {
    valor_original <- correlaciones_ajustadas[factor]
    correlaciones_ajustadas[factor] <- ajustes_expertos_originales[[factor]]
    ajustes_aplicados <- ajustes_aplicados + 1
    cat("- Ajuste", factor, ":", valor_original, "‚Üí", ajustes_expertos_originales[[factor]], "\n")
  }
}
cat("Total ajustes aplicados:", ajustes_aplicados, "\n")

# ---- 7. CONVERSI√ìN A PESOS (SCRIPT 3 ORIGINAL) ----
cat("\n‚öñÔ∏è CONVIRTIENDO CORRELACIONES A PESOS...\n")

# Metodolog√≠a EXACTA del Script 3 original
correlaciones_abs <- abs(correlaciones_ajustadas)
suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)

if (suma_correlaciones == 0) {
  stop("‚ùå La suma de correlaciones es cero, no se pueden calcular pesos")
}

pesos_calculados <- correlaciones_abs / suma_correlaciones

cat("‚úÖ Pesos calculados - Total suma:", round(sum(pesos_calculados), 4), "\n")

# Mostrar top 10 pesos
top_pesos <- sort(pesos_calculados, decreasing = TRUE)[1:min(10, length(pesos_calculados))]
cat("\nTop 10 pesos calculados:\n")
for (i in 1:length(top_pesos)) {
  cat(sprintf("%2d. %-25s: %.4f\n", i, names(top_pesos)[i], top_pesos[i]))
}

# ---- 8. CONSTRUCCI√ìN DEL IVU (SCRIPT 4 ORIGINAL) ----
cat("\nüèóÔ∏è CONSTRUYENDO IVU SEG√öN SCRIPT 4 ORIGINAL...\n")

# Normalizar cantidades (metodolog√≠a Script 4 original)
cantidades_norm <- list()
for (col in factores$cantidades) {
  if (col %in% colnames(datos)) {
    valores <- as.numeric(datos[[col]])
    valores[is.na(valores)] <- 0
    
    min_val <- min(valores, na.rm = TRUE)
    max_val <- max(valores, na.rm = TRUE)
    
    if (max_val > min_val) {
      cantidades_norm[[col]] <- (valores - min_val) / (max_val - min_val)
    } else {
      cantidades_norm[[col]] <- rep(0.5, length(valores))
    }
  }
}

# Calcular IVU (metodolog√≠a EXACTA Script 4 original)
n <- nrow(datos)
ivu <- numeric(n)

for (i in 1:n) {
  suma <- 0
  peso_total <- 0
  
  # Sumar √≠ndices existentes
  for (indice in factores$indices) {
    if (indice %in% colnames(datos) && indice %in% names(pesos_calculados)) {
      valor <- as.numeric(datos[i, indice])
      if (!is.na(valor)) {
        contrib <- valor * pesos_calculados[indice]
        suma <- suma + contrib
        peso_total <- peso_total + pesos_calculados[indice]
      }
    }
  }
  
  # Sumar cercan√≠as
  for (cercania in factores$cercanias) {
    if (cercania %in% colnames(datos) && cercania %in% names(pesos_calculados)) {
      valor <- as.numeric(datos[i, cercania])
      if (!is.na(valor)) {
        contrib <- valor * pesos_calculados[cercania]
        suma <- suma + contrib
        peso_total <- peso_total + pesos_calculados[cercania]
      }
    }
  }
  
  # Sumar cantidades normalizadas
  for (cantidad in factores$cantidades) {
    if (cantidad %in% names(cantidades_norm) && cantidad %in% names(pesos_calculados)) {
      valor <- cantidades_norm[[cantidad]][i]
      if (!is.na(valor)) {
        contrib <- valor * pesos_calculados[cantidad]
        suma <- suma + contrib
        peso_total <- peso_total + pesos_calculados[cantidad]
      }
    }
  }
  
  # Sumar vialidades
  for (vialidad in factores$vialidades) {
    if (vialidad %in% colnames(datos) && vialidad %in% names(pesos_calculados)) {
      valor <- as.numeric(datos[i, vialidad])
      if (!is.na(valor)) {
        contrib <- valor * pesos_calculados[vialidad]
        suma <- suma + contrib
        peso_total <- peso_total + pesos_calculados[vialidad]
      }
    }
  }
  
  # Sumar otros factores
  for (otro in factores$otros) {
    if (otro %in% colnames(datos) && otro %in% names(pesos_calculados)) {
      valor <- as.numeric(datos[i, otro])
      if (!is.na(valor)) {
        contrib <- valor * pesos_calculados[otro]
        suma <- suma + contrib
        peso_total <- peso_total + pesos_calculados[otro]
      }
    }
  }
  
  # Normalizar por el peso total usado (metodolog√≠a original)
  if (peso_total > 0) {
    ivu[i] <- suma / peso_total
  } else {
    ivu[i] <- 0
  }
}

# Agregar IVU a los datos
datos$ivu <- ivu

# Crear categor√≠as de IVU (metodolog√≠a original)
datos$ivu_categoria <- cut(
  datos$ivu,
  breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),
  labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
  include.lowest = TRUE
)

cat("‚úÖ IVU calculado - Estad√≠sticas:\n")
cat("- Promedio:", round(mean(datos$ivu, na.rm = TRUE), 4), "\n")
cat("- Rango:", round(min(datos$ivu, na.rm = TRUE), 4), "-", round(max(datos$ivu, na.rm = TRUE), 4), "\n")

# ---- 9. CONSTRUCCI√ìN DEL IVP (SCRIPT 8 ORIGINAL) ----
cat("\nüèóÔ∏è CONSTRUYENDO IVP SEG√öN SCRIPT 8 ORIGINAL...\n")

# Categor√≠as EXACTAS del Script 8 original
amenidades_categorias_original <- list(
  # Amenidades b√°sicas (esperadas, bajo diferenciaci√≥n)
  basicas = c("control_de_acceso", "areas_verdes", "vestidores"),
  
  # Amenidades de salud y bienestar (alta valoraci√≥n)
  wellness = c("gimnasio", "spa", "sauna", "jacuzzi", "salon_de_yoga"),
  
  # Amenidades recreativas (familias)
  recreativas = c("alberca", "canchas_deportivas", "ludoteca_juegos_infantiles", 
                  "pista_de_jogging_vitapista"),
  
  # Amenidades sociales (convivencia, eventos)  
  sociales = c("casa_club", "bar", "lounges", "salon_usos_multiples", 
               "sala_de_cine_tv", "sala_de_lectura", "patio_central", 
               "terraza", "asadores", "fogatero"),
  
  # Amenidades premium (exclusivas, alto costo)
  premium = c("campo_de_golf", "golf_virtual", "roof_graden", "pet_zone")
)

# PESOS ORIGINALES EXACTOS del Script 8
pesos_categoria_original <- c(
  "basicas" = 1.0,      
  "wellness" = 2.5,     
  "recreativas" = 2.0,  
  "sociales" = 1.8,     
  "premium" = 3.0       
)

cat("Aplicando metodolog√≠a IVP original:\n")

# Filtrar amenidades que existen en los datos
for (categoria in names(amenidades_categorias_original)) {
  amenidades_existentes <- intersect(amenidades_categorias_original[[categoria]], colnames(datos))
  amenidades_categorias_original[[categoria]] <- amenidades_existentes
  cat("-", categoria, ":", length(amenidades_existentes), "amenidades disponibles\n")
}

# Convertir amenidades a num√©rico binario
for (categoria in names(amenidades_categorias_original)) {
  for (amenidad in amenidades_categorias_original[[categoria]]) {
    if (amenidad %in% colnames(datos)) {
      datos[[amenidad]] <- as.numeric(datos[[amenidad]])
      datos[[amenidad]][is.na(datos[[amenidad]])] <- 0
      datos[[amenidad]] <- ifelse(datos[[amenidad]] > 0, 1, 0)
    }
  }
}

# Calcular scores por categor√≠a (METODOLOG√çA EXACTA del Script 8 original)
for (categoria in names(amenidades_categorias_original)) {
  amenidades_en_categoria <- amenidades_categorias_original[[categoria]]
  peso_categoria <- pesos_categoria_original[categoria]
  
  if (length(amenidades_en_categoria) > 0) {
    # Score ponderado por categor√≠a (MULTIPLICACI√ìN DIRECTA como en original)
    datos[[paste0("score_", categoria)]] <- rowSums(
      datos[, amenidades_en_categoria, drop = FALSE], 
      na.rm = TRUE
    ) * peso_categoria  # Multiplicador directo, no proporci√≥n
  } else {
    datos[[paste0("score_", categoria)]] <- 0
  }
}

# Calcular IVP total (SUMA DIRECTA como en Script 8 original)
scores_cols <- paste0("score_", names(amenidades_categorias_original))
datos$ivp_original <- rowSums(datos[, scores_cols], na.rm = TRUE)

# Normalizar IVP a escala 0-1 DESPU√âS del c√°lculo (metodolog√≠a original)
if (max(datos$ivp_original, na.rm = TRUE) > 0) {
  datos$ivp <- datos$ivp_original / max(datos$ivp_original, na.rm = TRUE)
} else {
  datos$ivp <- 0
}

# Crear categor√≠as de IVP (metodolog√≠a original)
datos$ivp_categoria <- cut(
  datos$ivp,
  breaks = c(0, 0.15, 0.3, 0.5, 0.7, 1),
  labels = c("B√°sico", "Est√°ndar", "Bueno", "Excelente", "Premium"),
  include.lowest = TRUE
)

cat("‚úÖ IVP calculado - Estad√≠sticas:\n")
cat("- Promedio:", round(mean(datos$ivp, na.rm = TRUE), 4), "\n")
cat("- Rango:", round(min(datos$ivp, na.rm = TRUE), 4), "-", round(max(datos$ivp, na.rm = TRUE), 4), "\n")

# ---- 10. MODELO DE EVOLUCI√ìN NSE (SCRIPTS 5 Y 7 ORIGINALES) ----
cat("\nüîÆ CONSTRUYENDO MODELO DE EVOLUCI√ìN NSE SEG√öN SCRIPTS 5 Y 7 ORIGINALES...\n")

# Mapeos EXACTOS de los Scripts 5 y 7 originales
nse_valores_originales <- c(
  "A+" = 7, "A" = 6, "B" = 5, "C+" = 4, "C" = 3, "D+" = 2, "D" = 1, "E" = 0
)

segmento_valores_originales <- c(
  "Premium Plus" = 7, "Premium" = 6, "Residencial Plus" = 5, 
  "Residencial" = 4, "Medio" = 3, "Econ√≥mico" = 2, "Social" = 1
)

# Convertir categor√≠as a valores num√©ricos (metodolog√≠a original)
datos$nse_valor <- sapply(datos$nse, function(x) {
  if (is.na(x)) return(NA)
  if (x %in% names(nse_valores_originales)) return(nse_valores_originales[x]) else return(NA)
})

datos$segmento_valor <- sapply(datos$Segmento, function(x) {
  if (is.na(x)) return(NA)
  if (x %in% names(segmento_valores_originales)) return(segmento_valores_originales[x]) else return(NA)
})

# Calcular factores seg√∫n metodolog√≠a original Script 5
datos$brecha_nse_segmento <- datos$segmento_valor - datos$nse_valor

# Calcular otros factores seg√∫n disponibilidad
datos$influencia_vecinos <- ifelse(!is.na(datos$nse_valor), 
                                   pmax(0, (datos$nse_valor - 3) / 4), 0.5)

datos$rendimiento_ajustado <- ifelse(!is.na(datos$absorcion) & datos$absorcion > 0, 
                                     datos$absorcion / 12, 1)

datos$ratio_ventas <- ifelse(!is.na(datos$unidades_vendidas) & !is.na(datos$unidades_totales) & datos$unidades_totales > 0,
                             datos$unidades_vendidas / datos$unidades_totales, 0.5)

datos$brecha_segmento_predominante_nse <- ifelse(!is.na(datos$brecha_nse_segmento),
                                                 pmax(0, datos$brecha_nse_segmento), 0)

# Calcular score de evoluci√≥n NSE con PESOS EXACTOS del Script 5 original
datos$score_evolucion_nse <- with(datos, {
  w1 <- 0.30  # Peso brecha NSE-Segmento del proyecto
  w2 <- 0.20  # Peso influencia de vecinos
  w3 <- 0.15  # Peso rendimiento de absorci√≥n
  w4 <- 0.10  # Peso ratio de ventas
  w5 <- 0.25  # Peso segmento predominante en la zona
  
  # C√°lculo ponderado EXACTO del Script 5 original
  (w1 * pmax(0, brecha_nse_segmento, na.rm = TRUE)) +
    (w2 * pmax(0, influencia_vecinos, na.rm = TRUE)) +
    (w3 * pmax(0, rendimiento_ajustado - 1, na.rm = TRUE)) +
    (w4 * ratio_ventas) +
    (w5 * pmax(0, brecha_segmento_predominante_nse, na.rm = TRUE))
})

# Normalizar score (metodolog√≠a original)
min_score <- min(datos$score_evolucion_nse, na.rm = TRUE)
max_score <- max(datos$score_evolucion_nse, na.rm = TRUE)

if (max_score > min_score) {
  datos$score_norm <- (datos$score_evolucion_nse - min_score) / (max_score - min_score)
} else {
  datos$score_norm <- rep(0.5, nrow(datos))
}

# Calcular probabilidad de incremento NSE (metodolog√≠a original)
datos$prob_incremento_nse <- pmin(1, pmax(0, datos$score_norm))

# Clasificar en categor√≠as (CORTES EXACTOS del Script 5 original)
datos$tendencia_nse <- cut(
  datos$prob_incremento_nse,
  breaks = c(0, 0.3, 0.7, 1),
  labels = c("Estable", "Potencial incremento", "Alto potencial de incremento"),
  include.lowest = TRUE
)

# Tiempo estimado para cambio de NSE (metodolog√≠a original)
datos$tiempo_estimado_cambio <- case_when(
  datos$prob_incremento_nse >= 0.7 ~ "1-3 a√±os",
  datos$prob_incremento_nse >= 0.5 ~ "3-5 a√±os",
  datos$prob_incremento_nse >= 0.3 ~ "5-10 a√±os",
  TRUE ~ "M√°s de 10 a√±os o sin cambio previsible"
)

cat("‚úÖ Modelo de evoluci√≥n NSE calculado seg√∫n metodolog√≠a original\n")

# ---- 11. VERSIONES SEGMENTADAS (SCRIPT 9 ORIGINAL) ----
cat("\nüìä CREANDO VERSIONES SEGMENTADAS SEG√öN SCRIPT 9 ORIGINAL...\n")

# Crear variable segmento_nse (metodolog√≠a Script 9 original)
datos$segmento_nse <- paste0(datos$Segmento, "_", datos$nse)

# Verificar si tenemos suficientes datos para segmentaci√≥n
if ("Segmento" %in% colnames(datos) && sum(!is.na(datos$Segmento)) > 0) {
  
  # Inicializar columnas segmentadas
  datos$ivu_segmentado <- NA
  datos$ivp_segmentado <- NA
  
  # Agrupar por segmento_nse (metodolog√≠a EXACTA Script 9 original)
  segmentos_nse_unicos <- unique(datos$segmento_nse[!is.na(datos$segmento_nse)])
  
  for (seg_nse in segmentos_nse_unicos) {
    mask_grupo <- datos$segmento_nse == seg_nse & !is.na(datos$segmento_nse)
    datos_grupo <- datos[mask_grupo, ]
    
    # Filtro de m√≠nimo 3 proyectos (metodolog√≠a original)
    if (nrow(datos_grupo) >= 3) {
      
      # IVU segmentado (normalizaci√≥n dentro del grupo)
      min_ivu <- min(datos_grupo$ivu, na.rm = TRUE)
      max_ivu <- max(datos_grupo$ivu, na.rm = TRUE)
      if (max_ivu > min_ivu) {
        datos$ivu_segmentado[mask_grupo] <- (datos_grupo$ivu - min_ivu) / (max_ivu - min_ivu)
      } else {
        datos$ivu_segmentado[mask_grupo] <- 0.5
      }
      
      # IVP segmentado (normalizaci√≥n dentro del grupo)
      min_ivp <- min(datos_grupo$ivp, na.rm = TRUE)
      max_ivp <- max(datos_grupo$ivp, na.rm = TRUE)
      if (max_ivp > min_ivp) {
        datos$ivp_segmentado[mask_grupo] <- (datos_grupo$ivp - min_ivp) / (max_ivp - min_ivp)
      } else {
        datos$ivp_segmentado[mask_grupo] <- 0.5
      }
      
    } else {
      # Si no hay suficientes datos, usar valores originales (metodolog√≠a original)
      datos$ivu_segmentado[mask_grupo] <- datos_grupo$ivu
      datos$ivp_segmentado[mask_grupo] <- datos_grupo$ivp
    }
  }
  
  cat("‚úÖ Versiones segmentadas creadas para", length(segmentos_nse_unicos), "combinaciones segmento-NSE\n")
  
} else {
  cat("‚ö†Ô∏è Variable Segmento no disponible, usando valores originales\n")
  datos$ivu_segmentado <- datos$ivu
  datos$ivp_segmentado <- datos$ivp
}

# ---- 12. M√âTRICAS COMBINADAS (METODOLOG√çA ORIGINAL) ----
cat("\nüîó CREANDO M√âTRICAS COMBINADAS...\n")

# IVU Proyectado (del Script 6 original)
datos$ivu_proyectado <- datos$ivu * (1 + (datos$prob_incremento_nse * 0.3))

# √çndice de Potencial de Inversi√≥n Integral
datos$indice_potencial_inversion_integral <- (datos$ivu * 0.4) + 
  (datos$ivp * 0.3) + 
  (datos$prob_incremento_nse * 0.3)

# Score 4S b√°sico
datos$score_4s <- (datos$ivu * 0.4) + (datos$ivp * 0.3) + (datos$prob_incremento_nse * 0.3)

datos$categoria_4s <- cut(
  datos$score_4s,
  breaks = c(0, 0.3, 0.5, 0.7, 0.85, 1),
  labels = c("En desarrollo", "S√≥lido", "Muy bueno", "Excelente", "4S Completo"),
  include.lowest = TRUE
)

cat("‚úÖ M√©tricas combinadas creadas\n")

# ---- 13. VALIDACI√ìN Y ESTAD√çSTICAS ----
cat("\nüìà VALIDACI√ìN Y ESTAD√çSTICAS FINALES...\n")

# Correlaci√≥n IVU vs precio (si es posible calcular)
if (sum(!is.na(datos$ivu) & !is.na(datos$p_m2)) > 3) {
  correlacion_ivu_precio <- cor(datos$ivu, datos$p_m2, use = "complete.obs")
  cat("- Correlaci√≥n IVU vs Precio/m¬≤:", round(correlacion_ivu_precio, 4), "\n")
}

# Estad√≠sticas generales
cat("- Proyectos procesados:", nrow(datos), "\n")
cat("- Proyectos con IVU >0.6:", sum(datos$ivu > 0.6, na.rm = TRUE), "\n")
cat("- Proyectos con IVP >0.5:", sum(datos$ivp > 0.5, na.rm = TRUE), "\n")
cat("- Proyectos con alto potencial NSE:", sum(datos$prob_incremento_nse > 0.7, na.rm = TRUE), "\n")

# CORRECCI√ìN PARA SCRIPT 2: CATEGORIZACI√ìN 4S
# Agregar este c√≥digo al final del Script 2, despu√©s de todas las otras categorizaciones

# ---- CORRECCI√ìN: FORZAR CATEGORIZACI√ìN 4S CORRECTA ----
cat("\nüîß CORRIGIENDO CATEGORIZACI√ìN 4S...\n")

# 1. Verificar si existe una variable previa con nombres incorrectos
if("categoria_4s" %in% names(datos)) {
  valores_unicos <- unique(datos$categoria_4s)
  cat("‚ö†Ô∏è  Variable categoria_4s existente encontrada con valores:", paste(valores_unicos, collapse = ", "), "\n")
  
  # Si tiene nombres incorrectos, eliminar la variable
  nombres_incorrectos <- c("En desarrollo", "Excelente", "Muy bueno", "S√≥lido", 
                           "Deficiente", "Regular", "Bueno", "Excepcional")
  
  if(any(valores_unicos %in% nombres_incorrectos)) {
    cat("üóëÔ∏è  Eliminando categorizaci√≥n incorrecta existente...\n")
    datos$categoria_4s <- NULL
  }
}

# 2. Forzar recreaci√≥n con metodolog√≠a original correcta
cat("‚öôÔ∏è  Creando categorizaci√≥n 4S con metodolog√≠a original...\n")

# 2.1 Verificar que tenemos las variables base necesarias
if(!"ivu_segmentado" %in% names(datos) || !"ivp_segmentado" %in% names(datos)) {
  cat("‚ö†Ô∏è  Variables segmentadas faltantes, usando valores generales como fallback...\n")
  
  if(!"ivu_segmentado" %in% names(datos)) {
    datos$ivu_segmentado <- datos$ivu
  }
  if(!"ivp_segmentado" %in% names(datos)) {
    datos$ivp_segmentado <- datos$ivp_v2  # o datos$ivp si es el nombre correcto
  }
}

# 2.2 Aplicar categorizaci√≥n 4S con metodolog√≠a original EXACTA
datos <- datos %>%
  mutate(
    # Categorizaci√≥n 4S con criterios exactos del m√©todo original
    categoria_4s = case_when(
      is.na(ivu_segmentado) | is.na(ivp_segmentado) ~ NA_character_,
      ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR",
      ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "S√ìLIDO", 
      ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE",
      TRUE ~ "SINGULAR"
    ),
    
    # Convertir a factor con niveles ordenados
    categoria_4s = factor(categoria_4s, 
                          levels = c("SUPERIOR", "S√ìLIDO", "SUSTENTABLE", "SINGULAR"),
                          ordered = FALSE)
  )

# 2.3 Verificar la distribuci√≥n resultante
cat("‚úÖ Nueva categorizaci√≥n 4S aplicada\n")
distribucion_4s <- table(datos$categoria_4s, useNA = "ifany")
cat("üìä Distribuci√≥n corregida:\n")
for(categoria in names(distribucion_4s)) {
  pct <- round(distribucion_4s[categoria] / sum(distribucion_4s) * 100, 1)
  cat("   ", categoria, ":", distribucion_4s[categoria], "(", pct, "%)\n")
}

# 2.4 Diagn√≥stico de valores para entender la distribuci√≥n
cat("\nüîç DIAGN√ìSTICO DE VALORES:\n")
cat("- Rango IVU segmentado:", round(min(datos$ivu_segmentado, na.rm = TRUE), 3), 
    "a", round(max(datos$ivu_segmentado, na.rm = TRUE), 3), "\n")
cat("- Rango IVP segmentado:", round(min(datos$ivp_segmentado, na.rm = TRUE), 3), 
    "a", round(max(datos$ivp_segmentado, na.rm = TRUE), 3), "\n")

# Contar proyectos por umbrales
proyectos_ivu_alto <- sum(datos$ivu_segmentado >= 0.5, na.rm = TRUE)
proyectos_ivp_alto <- sum(datos$ivp_segmentado >= 0.5, na.rm = TRUE)
cat("- Proyectos con IVU segmentado >= 0.5:", proyectos_ivu_alto, "\n")
cat("- Proyectos con IVP segmentado >= 0.5:", proyectos_ivp_alto, "\n")

# Si la distribuci√≥n sigue siendo problem√°tica, investigar m√°s
if(sum(datos$categoria_4s == "S√ìLIDO", na.rm = TRUE) > (nrow(datos) * 0.6)) {
  cat("\n‚ö†Ô∏è  DISTRIBUCI√ìN SIGUE SESGADA - INVESTIGACI√ìN ADICIONAL:\n")
  
  # Estad√≠sticas detalladas
  stats_ivu <- summary(datos$ivu_segmentado)
  stats_ivp <- summary(datos$ivp_segmentado)
  
  cat("üìà Estad√≠sticas IVU segmentado:\n")
  print(stats_ivu)
  cat("üìà Estad√≠sticas IVP segmentado:\n") 
  print(stats_ivp)
  
  # Verificar si los valores est√°n normalizados correctamente
  if(max(datos$ivu_segmentado, na.rm = TRUE) > 1.1 || max(datos$ivp_segmentado, na.rm = TRUE) > 1.1) {
    cat("üö® PROBLEMA: Los √≠ndices no est√°n normalizados entre 0-1\n")
    cat("   Considera renormalizar antes de aplicar categorizaci√≥n 4S\n")
  }
}

cat("‚úÖ Correcci√≥n de categorizaci√≥n 4S completada\n")

# ---- 14. EXPORTAR RESULTADOS ----
cat("\nüíæ EXPORTANDO RESULTADOS...\n")

# Seleccionar columnas para export
columnas_output <- c(
  "Proyecto", "Desarrollador", "Municipio", "Segmento", "nse",
  "p_m2", "unidades_totales", "unidades_vendidas", 
  "latitud", "longitud",
  "ivu", "ivu_categoria", "ivu_segmentado",
  "ivp", "ivp_categoria", "ivp_segmentado", 
  "prob_incremento_nse", "tendencia_nse", "tiempo_estimado_cambio",
  "ivu_proyectado", "indice_potencial_inversion_integral", 
  "score_4s", "categoria_4s"
)

# Verificar columnas existentes
columnas_existentes <- intersect(columnas_output, colnames(datos))
datos_finales <- datos

# Exportar
write.csv(datos_finales, "indices_principales_completos_metodologia_original.csv", row.names = FALSE)

# Exportar pesos para referencia
write.csv(data.frame(
  factor = names(pesos_calculados),
  peso = pesos_calculados,
  correlacion_original = correlaciones[names(pesos_calculados)],
  correlacion_ajustada = correlaciones_ajustadas[names(pesos_calculados)]
), "pesos_detallados_metodologia_original.csv", row.names = FALSE)

cat("‚úÖ Archivos exportados:\n")
cat("- indices_principales_completos_metodologia_original.csv\n")
cat("- pesos_detallados_metodologia_original.csv\n")

# ---- 15. RESUMEN FINAL ----
tiempo_fin <- Sys.time()
tiempo_total <- as.numeric(difftime(tiempo_fin, tiempo_inicio, units = "mins"))

cat("\n", rep("=", 80), "\n")
cat("SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES - METODOLOG√çA ORIGINAL FIEL\n")
cat("COMPLETADO EXITOSAMENTE\n")
cat("Tiempo de ejecuci√≥n:", round(tiempo_total, 2), "minutos\n")
cat("‚úÖ IVU construido con metodolog√≠a EXACTA del Script 4 original\n")
cat("‚úÖ IVP construido con metodolog√≠a EXACTA del Script 8 original\n")
cat("‚úÖ Modelo evoluci√≥n NSE con metodolog√≠a EXACTA de Scripts 5 y 7 originales\n")
cat("‚úÖ Versiones segmentadas con metodolog√≠a EXACTA del Script 9 original\n")
cat("‚úÖ Pesos calculados con metodolog√≠a EXACTA del Script 3 original\n")
cat("‚úÖ M√©tricas combinadas generadas\n")
cat("\nüéØ FIDELIDAD AL 100% A LAS METODOLOG√çAS ORIGINALES GARANTIZADA\n")
cat(rep("=", 80), "\n")

# Finalizar log
sink()
cat("üìÑ Log guardado en:", archivo_log, "\n")
