# ================================================================================
# SISTEMA IVU-IVP: SCRIPT MAESTRO DE CONTROL - VERSI√ìN CORREGIDA
# ================================================================================
# Punto de entrada √∫nico para todo el sistema de an√°lisis inmobiliario
# Versi√≥n: 2.2 - Bug cr√≠tico corregido en detecci√≥n de modo testeo
# Autor: Sistema 4S Real Estate
# ================================================================================

# ---- CONFIGURACI√ìN DEL SISTEMA ----
cat("üèóÔ∏è  INICIANDO SISTEMA IVU-IVP VERSI√ìN 2.2\n")
cat("================================================================================\n")

# ---- DETECCI√ìN INTELIGENTE DE MODO TESTEO Y LIMPIEZA SEGURA ----
# Detectar modo testeo ANTES de cualquier limpieza
MODO_TESTEO <- exists("DIRECTORIO_BASE_SISTEMA") && exists("DIRECTORIO_SCRIPTS")

# Guardar variables cr√≠ticas ANTES de limpiar (si est√°n disponibles)
if(MODO_TESTEO) {
  cat("üß™ MODO TESTEO DETECTADO - Conservando variables del testeo\n")
  cat("üìù Variables de testeo preservadas para continuidad\n")
  
  # Guardar variables cr√≠ticas del testeo antes de cualquier limpieza
  DIRECTORIO_BASE_TESTEO <- get("DIRECTORIO_BASE_SISTEMA", envir = .GlobalEnv)
  DIRECTORIO_SCRIPTS_TESTEO <- get("DIRECTORIO_SCRIPTS", envir = .GlobalEnv)
  DIRECTORIO_DATOS_TESTEO <- get("DIRECTORIO_DATOS", envir = .GlobalEnv)
  
  # Guardar configuraci√≥n del testeo si existe
  if(exists("CONFIGURACION_USUARIO")) {
    CONFIGURACION_TESTEO <- get("CONFIGURACION_USUARIO", envir = .GlobalEnv)
  }
  
} else {
  cat("üöÄ MODO PRODUCCI√ìN - Limpieza completa del entorno\n")
  # Limpiar entorno solo en modo producci√≥n, excluyendo variables cr√≠ticas
  variables_a_conservar <- c("MODO_TESTEO")
  rm(list = setdiff(ls(), variables_a_conservar))
}

# Configuraci√≥n de warnings y opciones
options(warn = 1)  # Mostrar warnings inmediatamente
options(stringsAsFactors = FALSE)

# ---- CONFIGURACI√ìN DE DIRECTORIOS ----
if(MODO_TESTEO) {
  # En modo testeo, usar directorios del script de testeo
  DIRECTORIO_BASE <- DIRECTORIO_BASE_TESTEO
  cat("‚úÖ Usando directorios del testeo\n")
} else {
  # En modo producci√≥n, usar configuraci√≥n est√°ndar
  # INSTRUCCI√ìN: Modificar solo estas rutas seg√∫n tu sistema
  DIRECTORIO_BASE <- "/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO"
}

DIRECTORIO_PROYECTO <- file.path(DIRECTORIO_BASE, "[04] MODELACI√ìN", "[00] RESULTADOS")

# Crear directorios si no existen
dir.create(file.path(DIRECTORIO_PROYECTO, "reportes"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(DIRECTORIO_PROYECTO, "mapas"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(DIRECTORIO_PROYECTO, "exports"), showWarnings = FALSE, recursive = TRUE)

# Establecer directorio de trabajo
setwd(DIRECTORIO_PROYECTO)

# ---- CONFIGURACI√ìN DE USUARIO ----
# INSTRUCCI√ìN: Personalizar seg√∫n necesidades del an√°lisis
if(MODO_TESTEO && exists("CONFIGURACION_TESTEO")) {
  # Usar configuraci√≥n del testeo si est√° disponible
  CONFIGURACION_USUARIO <- CONFIGURACION_TESTEO
  cat("‚úÖ Usando configuraci√≥n del testeo\n")
} else {
  # Configuraci√≥n por defecto
  CONFIGURACION_USUARIO <- list(
    # PROYECTOS A ANALIZAR POR ID (NO POR √çNDICE)
    proyecto_principal_id = 24,          # ID del proyecto para an√°lisis detallado
    proyecto_comparacion_1_id = 25,      # ID del primer proyecto de comparaci√≥n  
    proyecto_comparacion_2_id = 32,      # ID del segundo proyecto de comparaci√≥n
    
    # CONFIGURACIONES DE AN√ÅLISIS
    generar_mapas_interactivos = TRUE,
    generar_reportes_pdf = TRUE,
    exportar_para_keynote = TRUE,
    
    # CONFIGURACIONES DE NSE
    evaluar_evolucion_nse = TRUE,
    incluir_analisis_espacial_nse = TRUE,
    
    # CONFIGURACIONES DE VISUALIZACI√ìN
    usar_paleta_4s = TRUE,
    incluir_termometros = TRUE,
    generar_radares_dimensionales = TRUE
  )
}

# ---- CARGA DE LIBRER√çAS REQUERIDAS ----
librerias_requeridas <- c(
  # Manipulaci√≥n de datos
  "dplyr", "tidyr", "readr", "readxl", "janitor", "stringr",
  
  # An√°lisis espacial
  "sf", "lwgeom", "geosphere",
  
  # Visualizaci√≥n b√°sica
  "ggplot2", "scales", "RColorBrewer", "viridis",
  
  # Visualizaci√≥n avanzada
  "plotly", "leaflet", "corrplot", "gridExtra",
  
  # An√°lisis estad√≠stico
  "randomForest", "caret",
  
  # Tablas y reportes
  "DT", "knitr", "kableExtra", "htmltools",
  
  # Exportaci√≥n
  "openxlsx"
)

# Funci√≥n para instalar y cargar librer√≠as
cargar_librerias <- function(librerias) {
  instaladas <- character(0)
  fallidas <- character(0)
  
  for (lib in librerias) {
    if (!require(lib, character.only = TRUE, quietly = TRUE)) {
      cat("üì¶ Instalando librer√≠a:", lib, "\n")
      tryCatch({
        install.packages(lib, dependencies = TRUE, quiet = TRUE)
        library(lib, character.only = TRUE)
        instaladas <- c(instaladas, lib)
      }, error = function(e) {
        fallidas <- c(fallidas, lib)
        cat("‚ùå Error instalando", lib, ":", conditionMessage(e), "\n")
      })
    }
  }
  
  if(length(fallidas) > 0) {
    cat("‚ö†Ô∏è  Librer√≠as no instaladas:", paste(fallidas, collapse = ", "), "\n")
    cat("   El sistema funcionar√° con funcionalidad limitada\n")
  }
  cat("‚úÖ Librer√≠as cargadas exitosamente\n")
}

cat("üì¶ Cargando librer√≠as del sistema...\n")
cargar_librerias(librerias_requeridas)

# ---- CARGA DE M√ìDULOS DEL SISTEMA ----
modulos_sistema <- c(
  "modulos/mod_validaciones.R",
  "modulos/mod_utilidades.R",
  "modulos/mod_visualizaciones.R",
  "modulos/mod_exportacion.R"
)

cat("üîß Cargando m√≥dulos del sistema...\n")
for (modulo in modulos_sistema) {
  if (file.exists(modulo)) {
    source(modulo)
    cat("  ‚úÖ", basename(modulo), "cargado\n")
  } else {
    cat("  ‚ö†Ô∏è ", basename(modulo), "no encontrado - funcionalidad limitada\n")
  }
}

# ---- VALIDACI√ìN DEL SISTEMA ----
cat("\nüîç VALIDANDO CONFIGURACI√ìN DEL SISTEMA...\n")

# Validar directorios cr√≠ticos
directorios_criticos <- c(
  file.path(DIRECTORIO_BASE, "[02] DATOS"),
  file.path(DIRECTORIO_BASE, "[02] DATOS", "[00] BASE INTEGRADA"),
  file.path(DIRECTORIO_BASE, "[02] DATOS", "[03] VARIABLES"),
  DIRECTORIO_PROYECTO
)

for (dir in directorios_criticos) {
  if (dir.exists(dir)) {
    cat("  ‚úÖ Directorio encontrado:", basename(dir), "\n")
  } else {
    cat("  ‚ùå Directorio faltante:", dir, "\n")
    cat("     ACCI√ìN REQUERIDA: Crear este directorio antes de continuar\n")
  }
}

# ---- CONFIGURACI√ìN DE PALETAS Y ESTILOS ----
# Paletas de colores 4S estandarizadas
PALETAS_4S <- list(
  principal = c("#68D192", "#9B87F4", "#F4E785", "#F8C579"),
  categorias_4s = c(
    "SUPERIOR" = "#68D192",
    "S√ìLIDO" = "#9B87F4", 
    "SUSTENTABLE" = "#F4E785",
    "SINGULAR" = "#F8C579"
  ),
  ivu_ivp = c(
    "Muy bajo" = "#EF6558",
    "Bajo" = "#F8C579",
    "Medio" = "#F4E785", 
    "Alto" = "#68D192",
    "Muy alto" = "#2C6C66"
  ),
  nse = c(
    "A+" = "#2C6C66", "A" = "#68D192", "B" = "#54C1C4", 
    "C+" = "#F8C579", "C" = "#EF6558", "D+" = "#F4BCCD", "D/E" = "#9B87F4"
  )
)

# ---- CONFIGURAR RUTAS DE SCRIPTS ----
if(MODO_TESTEO) {
  # En modo testeo, usar la ruta del testeo
  DIRECTORIO_SCRIPTS <- DIRECTORIO_SCRIPTS_TESTEO
  cat("‚úÖ Usando directorio de scripts del testeo:", basename(DIRECTORIO_SCRIPTS), "\n")
} else {
  # En modo producci√≥n, asumir que est√°n en la misma carpeta que el Master Control
  tryCatch({
    if(requireNamespace("rstudioapi", quietly = TRUE)) {
      DIRECTORIO_SCRIPTS <- dirname(rstudioapi::getActiveDocumentContext()$path)
    } else {
      DIRECTORIO_SCRIPTS <- getwd()
    }
  }, error = function(e) {
    DIRECTORIO_SCRIPTS <- getwd()
  })
  
  if(DIRECTORIO_SCRIPTS == "" || is.na(DIRECTORIO_SCRIPTS)) {
    DIRECTORIO_SCRIPTS <- getwd()
  }
  cat("‚úÖ Directorio de scripts en modo producci√≥n:", basename(DIRECTORIO_SCRIPTS), "\n")
}

# ---- RESTAURAR VARIABLES DEL TESTEO SI ES NECESARIO ----
if(MODO_TESTEO) {
  # Restaurar variables cr√≠ticas para el testeo
  assign("DIRECTORIO_BASE_SISTEMA", DIRECTORIO_BASE_TESTEO, envir = .GlobalEnv)
  assign("DIRECTORIO_SCRIPTS", DIRECTORIO_SCRIPTS, envir = .GlobalEnv)
  assign("PROYECTO_PRINCIPAL_ID", CONFIGURACION_USUARIO$proyecto_principal_id, envir = .GlobalEnv)
  assign("PROYECTO_COMPARACION_1_ID", CONFIGURACION_USUARIO$proyecto_comparacion_1_id, envir = .GlobalEnv)  
  assign("PROYECTO_COMPARACION_2_ID", CONFIGURACION_USUARIO$proyecto_comparacion_2_id, envir = .GlobalEnv)
  assign("DIRECTORIO_DATOS", DIRECTORIO_DATOS_TESTEO, envir = .GlobalEnv)
  cat("‚úÖ Variables del testeo restauradas para continuidad\n")
} else {
  # En modo producci√≥n, asegurar que DIRECTORIO_SCRIPTS est√© disponible globalmente
  assign("DIRECTORIO_SCRIPTS", DIRECTORIO_SCRIPTS, envir = .GlobalEnv)
}

# ---- FUNCI√ìN PRINCIPAL DE EJECUCI√ìN ----
ejecutar_sistema_completo <- function(config = CONFIGURACION_USUARIO) {
  
  cat("\nüöÄ EJECUTANDO SISTEMA COMPLETO IVU-IVP\n")
  cat("================================================================================\n")
  
  timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
  
  # Asignar configuraci√≥n de proyectos al entorno global
  assign("PROYECTO_PRINCIPAL", config$proyecto_principal, envir = .GlobalEnv)
  assign("PROYECTO_COMPARACION_1", config$proyecto_comparacion_1, envir = .GlobalEnv)
  assign("PROYECTO_COMPARACION_2", config$proyecto_comparacion_2, envir = .GlobalEnv)
  
  try({
    # FASE 1: PREPARACI√ìN DE DATOS
    cat("\nüìä FASE 1: PREPARACI√ìN Y CARGA DE DATOS\n")
    source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_02_PREPARACION_DATOS.R"))
    if(!exists("base_integrada")) stop("Error en preparaci√≥n de datos")
    
    # FASE 2: C√ÅLCULO DE √çNDICES
    cat("\nüßÆ FASE 2: C√ÅLCULO DE √çNDICES IVU-IVP\n")
    source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_03_CALCULO_INDICES.R"))
    if(!exists("datos_completos")) stop("Error en c√°lculo de √≠ndices")
    
    # FASE 3: AN√ÅLISIS AVANZADO
    cat("\nüî¨ FASE 3: AN√ÅLISIS AVANZADO Y VISUALIZACIONES\n")
    source(file.path(DIRECTORIO_SCRIPTS, "SCRIPT_04_ANALISIS_AVANZADO.R"))
    if(!exists("resultados_analisis_avanzado")) stop("Error en an√°lisis avanzado")
    
    return(TRUE)
    
  }, error = function(e) {
    cat("\n‚ùå ERROR EN LA EJECUCI√ìN:\n")
    cat("Error:", conditionMessage(e), "\n")
    return(FALSE)
  })
}

# ---- FUNCI√ìN DE VALIDACI√ìN COMPLETA ----
validar_sistema_completo <- function() {
  cat("\nüîç VALIDACI√ìN COMPLETA DEL SISTEMA\n")
  cat("===================================\n")
  
  validaciones <- list()
  
  # 1. Validar archivos de scripts
  scripts_requeridos <- c(
    "SCRIPT_02_PREPARACION_DATOS.R",
    "SCRIPT_03_CALCULO_INDICES.R", 
    "SCRIPT_04_ANALISIS_AVANZADO.R"
  )
  
  for (script in scripts_requeridos) {
    ruta_script <- file.path(DIRECTORIO_SCRIPTS, script)
    if (file.exists(ruta_script)) {
      validaciones[[script]] <- "‚úÖ Encontrado"
    } else {
      validaciones[[script]] <- "‚ùå Faltante"
    }
  }
  
  # 2. Validar archivos de datos cr√≠ticos
  archivos_datos <- c(
    file.path(DIRECTORIO_BASE, "[02] DATOS", "[01] PROYECTOS", "[01] VIVIENDA VERTICAL", "Proyectos Integrados_ZMM.csv"),
    file.path(DIRECTORIO_BASE, "[02] DATOS", "[00] BASE INTEGRADA", "base_inmobiliaria_transformada.csv")
  )
  
  for (archivo in archivos_datos) {
    if (file.exists(archivo)) {
      validaciones[[basename(archivo)]] <- "‚úÖ Encontrado"
    } else {
      validaciones[[basename(archivo)]] <- "‚ùå Faltante"
    }
  }
  
  # 3. Mostrar resultados
  for (item in names(validaciones)) {
    cat(item, ":", validaciones[[item]], "\n")
  }
  
  # 4. Diagn√≥stico general
  fallos <- sum(grepl("‚ùå", validaciones))
  if (fallos == 0) {
    cat("\nüéâ SISTEMA VALIDADO CORRECTAMENTE - LISTO PARA EJECUTAR\n")
    return(TRUE)
  } else {
    cat("\n‚ö†Ô∏è  ENCONTRADOS", fallos, "PROBLEMAS - CORREGIR ANTES DE EJECUTAR\n")
    return(FALSE)
  }
}

# ---- VALIDACI√ìN FINAL DE CONFIGURACI√ìN ----
validar_configuracion_usuario <- function() {
  config <- CONFIGURACION_USUARIO
  
  # Validar que los √≠ndices de proyecto son num√©ricos y positivos
  indices <- c(config$proyecto_principal, config$proyecto_comparacion_1, config$proyecto_comparacion_2)
  
  if(any(!is.numeric(indices)) || any(indices <= 0)) {
    stop("‚ùå √çndices de proyecto deben ser n√∫meros positivos")
  }
  
  if(length(unique(indices)) != 3) {
    warning("‚ö†Ô∏è  Se recomiendan 3 proyectos diferentes para comparaci√≥n √≥ptima")
  }
  
  cat("‚úÖ Configuraci√≥n de usuario validada\n")
  return(TRUE)
}

# Ejecutar validaci√≥n
validar_configuracion_usuario()

# ---- FUNCI√ìN DE AYUDA PARA USUARIOS ----
mostrar_ayuda <- function() {
  cat("\nüìö AYUDA DEL SISTEMA IVU-IVP\n")
  cat("============================\n")
  cat("\nüöÄ EJECUCI√ìN R√ÅPIDA:\n")
  cat("ejecutar_sistema_completo()\n")
  
  cat("\nüîß CONFIGURACI√ìN:\n")
  cat("1. Modificar DIRECTORIO_BASE al inicio del script\n")
  cat("2. Ajustar CONFIGURACION_USUARIO seg√∫n necesidades\n")
  cat("3. Ejecutar validar_sistema_completo() antes del an√°lisis\n")
  
  cat("\nüìä AN√ÅLISIS INDIVIDUAL:\n")
  cat("- Para solo preparar datos: source('", file.path(DIRECTORIO_SCRIPTS, "SCRIPT_02_PREPARACION_DATOS.R"), "')\n", sep="")
  cat("- Para solo calcular √≠ndices: source('", file.path(DIRECTORIO_SCRIPTS, "SCRIPT_03_CALCULO_INDICES.R"), "')\n", sep="")
  cat("- Para an√°lisis avanzado: source('", file.path(DIRECTORIO_SCRIPTS, "SCRIPT_04_ANALISIS_AVANZADO.R"), "')\n", sep="")
  
  cat("\nüÜò SOLUCI√ìN DE PROBLEMAS:\n")
  cat("- validar_sistema_completo(): Verificar que todo est√© correcto\n")
  cat("- mostrar_ayuda(): Mostrar esta ayuda\n")
  cat("- Ver documentacion/MANUAL_USUARIO.md para gu√≠a completa\n")
}

# ---- MENSAJE DE BIENVENIDA ----
if(MODO_TESTEO) {
  cat("\nüß™ SISTEMA IVU-IVP 2.2 CONFIGURADO PARA TESTEO\n")
  cat("===============================================\n")
  cat("‚úÖ Variables del testeo preservadas correctamente\n")
} else {
  cat("\nüéØ SISTEMA IVU-IVP 2.2 LISTO PARA EJECUTAR\n")
  cat("==========================================\n")
}

cat("üí° COMANDOS DISPONIBLES:\n")
cat("‚Ä¢ ejecutar_sistema_completo()  - Ejecutar an√°lisis completo\n")
cat("‚Ä¢ validar_sistema_completo()   - Validar configuraci√≥n\n") 
cat("‚Ä¢ mostrar_ayuda()              - Mostrar ayuda detallada\n")
cat("\nüî• Para comenzar inmediatamente: ejecutar_sistema_completo()\n")
cat("================================================================================\n")
