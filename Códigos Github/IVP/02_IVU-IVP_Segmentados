# Script: Segmentación de IVU e IVP por Segmento de Mercado y NSE
# Construcción de índices específicos que eliminan sesgos de comparación entre segmentos

# ---- 1. CONFIGURACIÓN INICIAL ----
rm(list = ls())

library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
library(corrplot)
library(knitr)
library(tidyr)
library(grid)
library(gridExtra)

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[00] RESULTADOS/IVU-IVP')

# ---- 2. CARGAR DATOS ----
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[00] RESULTADOS/IVP/proyectos_con_ivp_v2_completo.csv', stringsAsFactors = FALSE)

cat("Base de datos cargada:\n")
cat("- Proyectos:", nrow(datos), "\n")
cat("- Variables:", ncol(datos), "\n")
cat("- Segmentos únicos:", paste(unique(datos$Segmento[!is.na(datos$Segmento)]), collapse = ", "), "\n")
cat("- NSE únicos:", paste(unique(datos$nse[!is.na(datos$nse)]), collapse = ", "), "\n")

# ---- 3. CREAR MATRIZ DE SEGMENTACIÓN ----

# 3.1 Definir segmentos y NSE válidos
segmentos_validos <- c("Premium Plus", "Premium", "Residencial Plus", "Residencial", "Medio")
nse_validos <- c("A+", "A", "B", "C+", "C", "D+", "D", "E")

# 3.2 Limpiar y estandarizar datos
datos_segmentados <- datos %>%
  # Filtrar solo segmentos válidos
  filter(Segmento %in% segmentos_validos & nse %in% nse_validos) %>%
  # Crear combinación segmento-NSE
  mutate(
    # Crear categoría combinada
    segmento_nse = paste0(Segmento, " | NSE ", nse),
    
    # Crear categorías amplias para análisis
    categoria_segmento = case_when(
      Segmento %in% c("Premium Plus", "Premium") ~ "PREMIUM",
      Segmento %in% c("Residencial Plus", "Residencial") ~ "RESIDENCIAL", 
      Segmento == "Medio" ~ "MEDIO",
      TRUE ~ "OTRO"
    ),
    
    categoria_nse = case_when(
      nse %in% c("A+", "A") ~ "NSE_ALTO",
      nse %in% c("B", "C+") ~ "NSE_MEDIO_ALTO",
      nse %in% c("C", "D+") ~ "NSE_MEDIO",
      nse %in% c("D", "E") ~ "NSE_BAJO",
      TRUE ~ "NSE_OTRO"
    ),
    
    # Categoría combinada simplificada
    categoria_combinada_simple = paste0(categoria_segmento, "_", categoria_nse)
  )

# 3.3 Análisis de distribución
distribucion_segmentos <- datos_segmentados %>%
  count(segmento_nse) %>%
  arrange(desc(n))

cat("\nDistribución de proyectos por Segmento-NSE:\n")
print(kable(distribucion_segmentos))

# Identificar combinaciones con suficientes datos (mínimo 5 proyectos)
combinaciones_viables <- distribucion_segmentos %>%
  filter(n >= 5) %>%
  pull(segmento_nse)

cat("\nCombinaciones viables para análisis (≥5 proyectos):", length(combinaciones_viables), "\n")

# ---- 4. DEFINIR FACTORES ESPECÍFICOS POR SEGMENTO ----

# 4.1 Matriz de relevancia de factores por segmento
# 1 = No relevante, 2 = Poco relevante, 3 = Moderadamente relevante, 4 = Muy relevante, 5 = Crítico

factores_relevancia <- data.frame(
  Factor = c(
    # Cercanías
    "cercania_hospital", "cercania_esc_priv", "cercania_esc_pub", "cercania_universidad",
    "cercania_super", "cercania_restau", "cercania_oficina", "cercania_tienda_dept",
    
    # Cantidades
    "cantidad_hospital_1km", "cantidad_esc_priv_1km", "cantidad_esc_pub_1km", "cantidad_universidad_1km",
    "cantidad_super_1km", "cantidad_restau_1km", "cantidad_oficina_1km", "cantidad_tienda_dept_1km",
    
    # Vialidades
    "cerca_avenida_principal", "cercania_avenida_arterial", "accesibilidad_vial",
    
    # Índices
    "indice_accesibilidad", "potencial_inversion", "indice_conveniencia",
    
    # Otros
    "cerca_parque_relevante", "alta_densidad_comercial", "alto_entorno_laboral"
  ),
  
  # Pesos por segmento (1-5)
  Premium_Plus = c(
    # Cercanías - Premium Plus valora exclusividad y calidad
    5, 5, 1, 4, 3, 4, 5, 4,  # Hospitales y escuelas privadas críticos, públicas irrelevantes
    # Cantidades
    4, 4, 1, 3, 3, 4, 5, 3,  # Menos cantidad, más calidad
    # Vialidades  
    4, 5, 5,  # Accesibilidad muy importante
    # Índices
    5, 5, 4,  # Todos importantes
    # Otros
    5, 3, 4   # Parques muy importantes
  ),
  
  Premium = c(
    # Cercanías - Premium busca balance calidad-conveniencia
    4, 5, 2, 4, 4, 4, 4, 4,
    # Cantidades
    4, 4, 2, 3, 4, 4, 4, 4,
    # Vialidades
    4, 4, 5,
    # Índices  
    5, 4, 4,
    # Otros
    4, 4, 4
  ),
  
  Residencial_Plus = c(
    # Cercanías - Residencial Plus valora funcionalidad y servicios
    4, 4, 3, 3, 5, 3, 3, 4,
    # Cantidades
    3, 3, 3, 3, 4, 3, 3, 4,
    # Vialidades
    4, 3, 4,
    # Índices
    4, 4, 5,
    # Otros
    4, 4, 3
  ),
  
  Residencial = c(
    # Cercanías - Residencial busca balance costo-beneficio
    3, 3, 4, 3, 5, 3, 3, 4,
    # Cantidades
    3, 3, 4, 3, 5, 3, 3, 4,
    # Vialidades
    4, 3, 4,
    # Índices
    4, 3, 5,
    # Otros
    3, 4, 3
  ),
  
  Medio = c(
    # Cercanías - Medio prioriza servicios básicos y transporte
    4, 2, 5, 2, 5, 3, 2, 4,
    # Cantidades
    4, 2, 5, 2, 5, 3, 2, 4,
    # Vialidades
    5, 4, 5,  # Transporte muy crítico
    # Índices
    4, 3, 5,
    # Otros
    3, 5, 2   # Densidad comercial muy importante
  )
)

# 4.2 Convertir a formato largo para análisis
factores_relevancia_long <- factores_relevancia %>%
  pivot_longer(cols = -Factor, names_to = "Segmento", values_to = "Relevancia") %>%
  mutate(Segmento = gsub("_", " ", Segmento))

# Visualizar matriz de relevancia
heatmap_relevancia <- ggplot(factores_relevancia_long, 
                             aes(x = Segmento, y = Factor, fill = Relevancia)) +
  geom_tile(color = "white", linewidth = 0.5) +
  scale_fill_gradient2(low = "#EF6558", mid = "#F4E785", high = "#68D192", 
                       midpoint = 3, name = "Relevancia\n(1-5)") +
  labs(title = "Matriz de Relevancia de Factores por Segmento",
       subtitle = "Definición de pesos específicos para cada mercado objetivo",
       x = "Segmento", y = "Factor") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8),
        axis.text.x = element_text(angle = 45, hjust = 1))

print(heatmap_relevancia)

# ---- 5. FUNCIONES PARA CÁLCULO SEGMENTADO ----

# 5.1 Función para normalizar por segmento
normalizar_por_segmento <- function(datos, variable, segmento_col) {
  datos %>%
    group_by(!!sym(segmento_col)) %>%
    mutate(
      !!paste0(variable, "_norm_seg") := {
        valores = !!sym(variable)
        if(all(is.na(valores))) {
          rep(0.5, length(valores))
        } else {
          min_val = min(valores, na.rm = TRUE)
          max_val = max(valores, na.rm = TRUE)
          if(max_val == min_val) {
            rep(0.5, length(valores))
          } else {
            pmax(0, pmin(1, (valores - min_val) / (max_val - min_val)))
          }
        }
      }
    ) %>%
    ungroup()
}

# 5.2 Función para calcular IVU segmentado
calcular_ivu_segmentado <- function(datos, factores_relevancia) {
  # Lista de factores disponibles en los datos
  factores_disponibles <- intersect(factores_relevancia$Factor, names(datos))
  
  cat("Factores disponibles para IVU segmentado:", length(factores_disponibles), "\n")
  
  # Verificar nombres de columnas en factores_relevancia
  cat("Columnas disponibles en factores_relevancia:", paste(names(factores_relevancia), collapse = ", "), "\n")
  
  # Calcular IVU para cada combinación segmento-NSE
  datos_ivu_seg <- datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%  # Mínimo 3 proyectos para cálculo
    do({
      df_grupo <- .
      segmento_actual <- unique(df_grupo$Segmento)[1]
      
      # Convertir espacios a guiones bajos para coincidir con nombres de columnas
      segmento_columna <- gsub(" ", "_", segmento_actual)
      
      cat("Procesando segmento:", segmento_actual, "(columna:", segmento_columna, ") con", nrow(df_grupo), "proyectos\n")
      
      # Verificar si existe la columna para este segmento
      if(segmento_columna %in% names(factores_relevancia)) {
        # Usar indexación directa en lugar de select() con sym()
        col_index <- which(names(factores_relevancia) == segmento_columna)
        pesos_segmento <- data.frame(
          Factor = factores_relevancia$Factor,
          Peso = factores_relevancia[, col_index]
        )
        
        # Normalizar factores dentro del grupo
        ivu_segmentado <- rep(0, nrow(df_grupo))
        peso_total <- 0
        
        for(factor in factores_disponibles) {
          if(factor %in% pesos_segmento$Factor && factor %in% names(df_grupo)) {
            peso <- pesos_segmento$Peso[pesos_segmento$Factor == factor]
            valores_factor <- df_grupo[[factor]]
            
            # Normalizar dentro del grupo
            if(!all(is.na(valores_factor))) {
              min_val <- min(valores_factor, na.rm = TRUE)
              max_val <- max(valores_factor, na.rm = TRUE)
              
              if(max_val > min_val) {
                valores_norm <- (valores_factor - min_val) / (max_val - min_val)
                ivu_segmentado <- ivu_segmentado + (valores_norm * peso)
                peso_total <- peso_total + peso
              }
            }
          }
        }
        
        # Normalizar por peso total
        df_grupo$ivu_segmentado <- if(peso_total > 0) ivu_segmentado / peso_total else 0.5
        df_grupo$peso_total_usado <- peso_total
        
        cat("Completado segmento:", segmento_actual, "- Peso total usado:", peso_total, "\n")
      } else {
        df_grupo$ivu_segmentado <- df_grupo$ivu  # Usar IVU original si no hay pesos específicos
        df_grupo$peso_total_usado <- 1
        cat("ADVERTENCIA: No se encontraron pesos para segmento:", segmento_actual, 
            "(columna buscada:", segmento_columna, ")\n")
        cat("Columnas disponibles:", paste(names(factores_relevancia), collapse = ", "), "\n")
      }
      
      df_grupo
    }) %>%
    ungroup()
  
  return(datos_ivu_seg)
}

# 5.3 Función para calcular IVP segmentado  
calcular_ivp_segmentado <- function(datos) {
  datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%
    mutate(
      # Normalizar amenidades dentro del segmento
      amenidades_norm_seg = {
        vals = score_amenidades_total
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      # Normalizar performance comercial dentro del segmento
      performance_norm_seg = {
        vals = eficiencia_comercial
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      # Calcular IVP segmentado con pesos ajustados por segmento
      ivp_segmentado = case_when(
        # Premium Plus: Mayor peso a amenidades y credibilidad desarrollador
        Segmento == "Premium Plus" ~ (amenidades_norm_seg * 0.45) + 
          (performance_norm_seg * 0.20) + 
          (credibilidad_desarrollador_v2 * 0.25) + 
          (propuesta_valor_norm_v2 * 0.10),
        
        # Premium: Balance entre amenidades y performance
        Segmento == "Premium" ~ (amenidades_norm_seg * 0.35) + 
          (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.20) + 
          (propuesta_valor_norm_v2 * 0.15),
        
        # Residencial Plus: Mayor peso a propuesta de valor
        Segmento == "Residencial Plus" ~ (amenidades_norm_seg * 0.25) + 
          (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + 
          (propuesta_valor_norm_v2 * 0.30),
        
        # Residencial: Balance con énfasis en valor
        Segmento == "Residencial" ~ (amenidades_norm_seg * 0.20) + 
          (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + 
          (propuesta_valor_norm_v2 * 0.35),
        
        # Medio: Máximo peso a propuesta de valor y performance
        Segmento == "Medio" ~ (amenidades_norm_seg * 0.15) + 
          (performance_norm_seg * 0.35) + 
          (credibilidad_desarrollador_v2 * 0.10) + 
          (propuesta_valor_norm_v2 * 0.40),
        
        TRUE ~ ivp_v2  # Usar IVP original como fallback
      ),
      
      # Categorizar IVP segmentado
      ivp_segmentado_categoria = cut(ivp_segmentado,
                                     breaks = c(0, 0.25, 0.45, 0.65, 0.80, 1.0),
                                     labels = c("Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto"),
                                     include.lowest = TRUE)
    ) %>%
    ungroup()
}

# ---- 6. APLICAR SEGMENTACIÓN ----

# 6.1 Calcular IVU segmentado
cat("\n=== CALCULANDO IVU SEGMENTADO ===\n")
datos_segmentados <- calcular_ivu_segmentado(datos_segmentados, factores_relevancia)

# 6.2 Calcular IVP segmentado  
cat("=== CALCULANDO IVP SEGMENTADO ===\n")
datos_segmentados <- calcular_ivp_segmentado(datos_segmentados)

# 6.3 Crear categorías segmentadas para IVU
datos_segmentados <- datos_segmentados %>%
  group_by(segmento_nse) %>%
  mutate(
    ivu_segmentado_categoria = cut(ivu_segmentado,
                                   breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1.0),
                                   labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
                                   include.lowest = TRUE)
  ) %>%
  ungroup()

# ---- 7. ANÁLISIS DE RESULTADOS SEGMENTADOS ----

# 7.1 Comparación de rankings
comparacion_rankings <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  select(Proyecto, Segmento, nse, segmento_nse, 
         ivu, ivu_segmentado, ivp_v2, ivp_segmentado) %>%
  group_by(segmento_nse) %>%
  mutate(
    rank_ivu_original = rank(-ivu, ties.method = "min"),
    rank_ivu_segmentado = rank(-ivu_segmentado, ties.method = "min"),
    rank_ivp_original = rank(-ivp_v2, ties.method = "min"),
    rank_ivp_segmentado = rank(-ivp_segmentado, ties.method = "min"),
    
    cambio_rank_ivu = rank_ivu_original - rank_ivu_segmentado,
    cambio_rank_ivp = rank_ivp_original - rank_ivp_segmentado
  ) %>%
  ungroup()

# 7.2 Identificar cambios significativos en rankings
cambios_significativos <- comparacion_rankings %>%
  filter(abs(cambio_rank_ivu) >= 2 | abs(cambio_rank_ivp) >= 2) %>%
  arrange(desc(abs(cambio_rank_ivu) + abs(cambio_rank_ivp)))

cat("\nProyectos con cambios significativos en ranking (≥2 posiciones):\n")
print(kable(head(cambios_significativos[c("Proyecto", "Segmento", "nse", 
                                          "cambio_rank_ivu", "cambio_rank_ivp")], 10)))

# 7.3 Estadísticas por segmento
estadisticas_segmento <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  group_by(Segmento) %>%
  summarise(
    Proyectos = n(),
    
    # IVU
    IVU_Original_Media = round(mean(ivu, na.rm = TRUE), 3),
    IVU_Segmentado_Media = round(mean(ivu_segmentado, na.rm = TRUE), 3),
    IVU_Correlacion = round(cor(ivu, ivu_segmentado, use = "complete.obs"), 3),
    
    # IVP  
    IVP_Original_Media = round(mean(ivp_v2, na.rm = TRUE), 3),
    IVP_Segmentado_Media = round(mean(ivp_segmentado, na.rm = TRUE), 3),
    IVP_Correlacion = round(cor(ivp_v2, ivp_segmentado, use = "complete.obs"), 3),
    
    .groups = 'drop'
  )

cat("\nEstadísticas comparativas por segmento:\n")
print(kable(estadisticas_segmento))

# ---- 8. VISUALIZACIONES SEGMENTADAS ----

# 8.1 Scatter plot IVU original vs segmentado
grafico_ivu_comparacion <- ggplot(datos_segmentados, 
                                  aes(x = ivu, y = ivu_segmentado, color = Segmento)) +
  geom_point(alpha = 0.7, size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  facet_wrap(~Segmento, scales = "free") +
  labs(title = "Comparación IVU Original vs Segmentado",
       subtitle = "Línea diagonal = sin cambios",
       x = "IVU Original (comparación global)",
       y = "IVU Segmentado (comparación intra-segmento)") +
  theme_minimal()

print(grafico_ivu_comparacion)

# 8.2 Scatter plot IVP original vs segmentado  
grafico_ivp_comparacion <- ggplot(datos_segmentados, 
                                  aes(x = ivp_v2, y = ivp_segmentado, color = Segmento)) +
  geom_point(alpha = 0.7, size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  facet_wrap(~Segmento, scales = "free") +
  labs(title = "Comparación IVP Original vs Segmentado",
       subtitle = "Línea diagonal = sin cambios",
       x = "IVP Original (comparación global)", 
       y = "IVP Segmentado (comparación intra-segmento)") +
  theme_minimal()

print(grafico_ivp_comparacion)

# 8.3 Top proyectos por segmento (segmentado)
top_por_segmento <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  group_by(Segmento) %>%
  mutate(
    score_combinado_seg = (ivu_segmentado * 0.6) + (ivp_segmentado * 0.4),
    rank_combinado = rank(-score_combinado_seg, ties.method = "min")
  ) %>%
  filter(rank_combinado <= 3) %>%
  select(Proyecto, Desarrollador, Segmento, nse, 
         ivu_segmentado, ivp_segmentado, score_combinado_seg, rank_combinado) %>%
  arrange(Segmento, rank_combinado) %>%
  ungroup()

cat("\nTop 3 proyectos por segmento (índices segmentados):\n")
print(kable(top_por_segmento, digits = 3))

# 8.4 Matriz de decisión segmentada INTERACTIVA - UNA SOLA VERSIÓN
crear_matriz_segmentada_interactiva <- function(datos, segmento_filtro) {
  datos_filtrados <- datos %>% filter(Segmento == segmento_filtro)
  
  if(nrow(datos_filtrados) < 5) {
    return(NULL)
  }
  
  datos_filtrados <- datos_filtrados %>%
    mutate(
      categoria_seg = case_when(
        ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR",
        ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "SÓLIDO",
        ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE",
        TRUE ~ "SINGULAR"
      )
    )
  
  colores_matriz_4s <- c(
    "SUPERIOR" = "#68D192", "SÓLIDO" = "#9B87F4", 
    "SUSTENTABLE" = "#F4E785", "SINGULAR" = "#F8C579"
  )
  
  p <- ggplot(datos_filtrados, aes(x = ivu_segmentado, y = ivp_segmentado)) +
    # Cuadrantes de fondo
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0.5, ymax = 1, 
             fill = "#9B87F4", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0.5, ymax = 1, 
             fill = "#68D192", alpha = 0.1) +
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0, ymax = 0.5, 
             fill = "#F8C579", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0, ymax = 0.5, 
             fill = "#F4E785", alpha = 0.1) +
    
    geom_point(aes(color = categoria_seg, 
                   text = paste0("Proyecto: ", Proyecto, "\n",
                                 "Desarrollador: ", Desarrollador, "\n",
                                 "NSE: ", nse, "\n",
                                 "IVU Segmentado: ", round(ivu_segmentado, 3), "\n",
                                 "IVP Segmentado: ", round(ivp_segmentado, 3), "\n",
                                 "Precio/m²: $", format(p_m2, big.mark = ","), "\n",
                                 "Categoría 4S: ", categoria_seg)), 
               size = 4, alpha = 0.8) +
    
    geom_hline(yintercept = 0.5, linetype = "dashed", color = "gray40") +
    geom_vline(xintercept = 0.5, linetype = "dashed", color = "gray40") +
    
    scale_color_manual(values = colores_matriz_4s, name = "Categoría 4S") +
    
    # Etiquetas de cuadrantes 4S
    annotate("text", x = 0.25, y = 0.75, 
             label = "⭐ SÓLIDO\n(Propuesta sólida\nalto potencial)", 
             fontface = "bold", hjust = 0.5, size = 3.5, color = "gray20") +
    annotate("text", x = 0.75, y = 0.75, 
             label = "🏆 SUPERIOR\n(Excelente ubicación\ny proyecto)", 
             fontface = "bold", hjust = 0.5, size = 3.5, color = "gray20") +
    annotate("text", x = 0.25, y = 0.25, 
             label = "🎯 SINGULAR\n(Características únicas\nenfoque especializado)", 
             fontface = "bold", hjust = 0.5, size = 3.5, color = "gray20") +
    annotate("text", x = 0.75, y = 0.25, 
             label = "🔄 SUSTENTABLE\n(Ubicación excelente\nfundamentos consistentes)", 
             fontface = "bold", hjust = 0.5, size = 3.5, color = "gray20") +
    
    labs(title = paste("Matriz de Decisión 4S Segmentada:", segmento_filtro),
         subtitle = "Comparación justa intra-segmento (INTERACTIVA)",
         x = "IVU Segmentado", y = "IVP Segmentado") +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 14),
      plot.subtitle = element_text(size = 12),
      legend.position = "right"
    )
  
  # Convertir a plotly para interactividad
  p_interactivo <- ggplotly(p, tooltip = "text") %>%
    layout(
      title = list(
        text = paste("Matriz de Decisión 4S Segmentada:", segmento_filtro, 
                     "<br><sub>Comparación justa intra-segmento (INTERACTIVA)</sub>"),
        font = list(size = 16)
      ),
      hoverlabel = list(
        bgcolor = "white",
        font = list(size = 12, color = "black"),
        bordercolor = "gray"
      )
    )
  
  return(p_interactivo)
}

# Crear matrices interactivas SOLO UNA VEZ por segmento
segmentos_con_datos <- datos_segmentados %>%
  group_by(Segmento) %>%
  summarise(n = n()) %>%
  filter(n >= 5) %>%
  pull(Segmento)

cat("\n=== CREANDO MATRICES DE DECISIÓN 4S INTERACTIVAS (ÚNICAS) ===\n")
for(seg in segmentos_con_datos) {
  cat("Creando matriz interactiva 4S para segmento:", seg, "\n")
  matriz <- crear_matriz_segmentada_interactiva(datos_segmentados, seg)
  if(!is.null(matriz)) {
    print(matriz)
  }
}

# ---- 9. MAPAS INTERACTIVOS SEGMENTADOS ----

# 9.1 Funciones de mapas consolidadas (SOLO UNA VERSIÓN)
crear_mapa_ivu_unico <- function(datos) {
  datos_validos <- datos %>% filter(!is.na(latitud) & !is.na(longitud) & !is.na(ivu_segmentado_categoria))
  
  colores_ivu <- c(
    "Muy bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785", 
    "Alto" = "#68D192", "Muy alto" = "#2C6C66"
  )
  pal_ivu <- colorFactor(palette = colores_ivu, domain = datos_validos$ivu_segmentado_categoria, na.color = "#808080")
  
  popups <- paste0(
    "<div style='font-family: Arial, sans-serif; font-size: 14px; max-width: 300px;'>",
    "<h4 style='margin: 0 0 10px 0; color: #2C6C66;'><b>", datos_validos$Proyecto, "</b></h4>",
    "<hr style='margin: 5px 0;'>",
    "<b>🏢 Desarrollador:</b> ", datos_validos$Desarrollador, "<br>",
    "<b>📍 Municipio:</b> ", datos_validos$Municipio, "<br>",
    "<b>🏠 Segmento:</b> ", datos_validos$Segmento, " | NSE ", datos_validos$nse, "<br>",
    "<hr style='margin: 5px 0;'>",
    "<b>📊 IVU Segmentado:</b> ", round(datos_validos$ivu_segmentado, 3), " (", datos_validos$ivu_segmentado_categoria, ")<br>",
    "<b>💰 Precio/m²:</b> $", format(datos_validos$p_m2, big.mark = ","), "<br>",
    "<b>📈 Absorción:</b> ", round(datos_validos$absorcion, 1), "<br>",
    "</div>"
  )
  
  leaflet(datos_validos) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitud, lat = ~latitud,
      radius = 8, # TAMAÑO UNIFORME
      fillColor = ~pal_ivu(ivu_segmentado_categoria),
      color = "white", weight = 2, opacity = 1, fillOpacity = 0.8,
      popup = popups
    ) %>%
    addLegend(
      position = "bottomright", pal = pal_ivu, values = ~ivu_segmentado_categoria,
      title = "IVU Segmentado<br>(Intra-segmento)", opacity = 0.8
    ) %>%
    setView(lng = mean(datos_validos$longitud, na.rm = TRUE), 
            lat = mean(datos_validos$latitud, na.rm = TRUE), zoom = 10)
}

crear_mapa_ivp_unico <- function(datos) {
  datos_validos <- datos %>% filter(!is.na(latitud) & !is.na(longitud) & !is.na(ivp_segmentado_categoria))
  
  colores_ivp <- c(
    "Muy Bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785", 
    "Alto" = "#68D192", "Muy Alto" = "#2C6C66"
  )
  pal_ivp <- colorFactor(palette = colores_ivp, domain = datos_validos$ivp_segmentado_categoria, na.color = "#808080")
  
  popups <- paste0(
    "<div style='font-family: Arial, sans-serif; font-size: 14px; max-width: 300px;'>",
    "<h4 style='margin: 0 0 10px 0; color: #2C6C66;'><b>", datos_validos$Proyecto, "</b></h4>",
    "<hr style='margin: 5px 0;'>",
    "<b>🏢 Desarrollador:</b> ", datos_validos$Desarrollador, "<br>",
    "<b>📍 Municipio:</b> ", datos_validos$Municipio, "<br>",
    "<b>🏠 Segmento:</b> ", datos_validos$Segmento, " | NSE ", datos_validos$nse, "<br>",
    "<hr style='margin: 5px 0;'>",
    "<b>⭐ IVP Segmentado:</b> ", round(datos_validos$ivp_segmentado, 3), " (", datos_validos$ivp_segmentado_categoria, ")<br>",
    "<b>🎯 Amenidades:</b> ", datos_validos$num_amenidades, " (Score: ", round(datos_validos$score_amenidades_total, 1), ")<br>",
    "<b>💰 Precio/m²:</b> $", format(datos_validos$p_m2, big.mark = ","), "<br>",
    "</div>"
  )
  
  leaflet(datos_validos) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitud, lat = ~latitud,
      radius = 8, # TAMAÑO UNIFORME
      fillColor = ~pal_ivp(ivp_segmentado_categoria),
      color = "white", weight = 2, opacity = 1, fillOpacity = 0.8,
      popup = popups
    ) %>%
    addLegend(
      position = "bottomright", pal = pal_ivp, values = ~ivp_segmentado_categoria,
      title = "IVP Segmentado<br>(Intra-segmento)", opacity = 0.8
    ) %>%
    setView(lng = mean(datos_validos$longitud, na.rm = TRUE), 
            lat = mean(datos_validos$latitud, na.rm = TRUE), zoom = 10)
}

crear_mapa_principal_unico <- function(datos) {
  datos_validos <- datos %>% 
    filter(!is.na(latitud) & !is.na(longitud) & 
             !is.na(ivu_segmentado) & !is.na(ivp_segmentado))
  
  datos_validos <- datos_validos %>%
    mutate(
      categoria_seg = case_when(
        ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR_SEG",
        ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "SÓLIDO_SEG",
        ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE_SEG",
        TRUE ~ "SINGULAR_SEG"
      )
    )
  
  colores_seg_4s <- c(
    "SUPERIOR_SEG" = "#68D192", "SÓLIDO_SEG" = "#9B87F4", 
    "SUSTENTABLE_SEG" = "#F4E785", "SINGULAR_SEG" = "#F8C579"
  )
  
  pal_seg <- colorFactor(palette = colores_seg_4s, domain = datos_validos$categoria_seg)
  
  popups <- paste0(
    "<div style='font-family: Arial, sans-serif; font-size: 14px; max-width: 320px;'>",
    "<h4 style='margin: 0 0 10px 0; color: #2C6C66;'><b>", datos_validos$Proyecto, "</b></h4>",
    "<div style='background-color: ", colores_seg_4s[datos_validos$categoria_seg], 
    "; color: white; padding: 5px 10px; border-radius: 5px; text-align: center; font-weight: bold; margin: 5px 0;'>",
    gsub("_SEG", " (Segmentado)", datos_validos$categoria_seg), "</div>",
    "<hr style='margin: 5px 0;'>",
    "<b>🏢 Desarrollador:</b> ", datos_validos$Desarrollador, "<br>",
    "<b>📍 Municipio:</b> ", datos_validos$Municipio, "<br>",
    "<b>🏠 Segmento:</b> ", datos_validos$Segmento, " | NSE ", datos_validos$nse, "<br>",
    "<hr style='margin: 5px 0;'>",
    "<b>Comparación Global vs Segmentada:</b><br>",
    "📊 IVU: ", round(datos_validos$ivu, 3), " → ", round(datos_validos$ivu_segmentado, 3), "<br>",
    "⭐ IVP: ", round(datos_validos$ivp_v2, 3), " → ", round(datos_validos$ivp_segmentado, 3), "<br>",
    "<hr style='margin: 5px 0;'>",
    "<b>💰 Precio/m²:</b> $", format(datos_validos$p_m2, big.mark = ","), "<br>",
    "<b>📈 Absorción:</b> ", round(datos_validos$absorcion, 1), "<br>",
    "</div>"
  )
  
  leaflet(datos_validos) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitud, lat = ~latitud,
      radius = 8, # TAMAÑO UNIFORME
      fillColor = ~pal_seg(categoria_seg),
      color = "white", weight = 2, opacity = 1, fillOpacity = 0.8,
      popup = popups
    ) %>%
    addLegend(
      position = "bottomright", pal = pal_seg, values = ~categoria_seg,
      title = "Categorización 4S<br>Segmentada", opacity = 0.8,
      labFormat = labelFormat(transform = function(x) gsub("_SEG", "", x))
    ) %>%
    addControl(
      html = paste0(
        "<div style='background: white; padding: 10px; border-radius: 5px; border: 2px solid #2C6C66;'>",
        "<h5 style='margin: 0 0 5px 0; color: #2C6C66;'>🎯 Categorías 4S Segmentadas</h5>",
        "<div style='font-size: 12px;'>",
        "Comparación justa intra-segmento<br>",
        "🏆 <b>SUPERIOR:</b> Líderes en su segmento<br>",
        "⭐ <b>SÓLIDO:</b> Alto potencial<br>",
        "🔄 <b>SUSTENTABLE:</b> Ubicación excelente<br>",
        "🎯 <b>SINGULAR:</b> Características únicas",
        "</div></div>"
      ),
      position = "topleft"
    ) %>%
    setView(lng = mean(datos_validos$longitud, na.rm = TRUE), 
            lat = mean(datos_validos$latitud, na.rm = TRUE), zoom = 10)
}

# 9.2 CREAR MAPAS ÚNICOS (NO DUPLICADOS)
cat("\n=== CREANDO MAPAS INTERACTIVOS 4S (VERSIÓN ÚNICA) ===\n")

cat("1. Creando mapa de IVU Segmentado...\n")
mapa_ivu_final <- crear_mapa_ivu_unico(datos_segmentados)
print(mapa_ivu_final)

cat("\n2. Creando mapa de IVP Segmentado...\n")
mapa_ivp_final <- crear_mapa_ivp_unico(datos_segmentados)
print(mapa_ivp_final)

cat("\n3. Creando mapa principal con categorización 4S segmentada...\n")
mapa_principal_final <- crear_mapa_principal_unico(datos_segmentados)
print(mapa_principal_final)

# ---- 10. ANÁLISIS DE INSIGHTS ----

# 10.1 Proyectos que mejoraron significativamente
mejores_cambios <- comparacion_rankings %>%
  mutate(mejora_total = pmax(0, -cambio_rank_ivu) + pmax(0, -cambio_rank_ivp)) %>%
  filter(mejora_total >= 3) %>%
  arrange(desc(mejora_total)) %>%
  head(10)

cat("\nProyectos que más mejoraron con segmentación:\n")
print(kable(mejores_cambios[c("Proyecto", "Segmento", "nse", "mejora_total", 
                              "cambio_rank_ivu", "cambio_rank_ivp")]))

# 10.2 Distribución de categorías por segmento
distribucion_categorias <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado_categoria) & !is.na(ivp_segmentado_categoria)) %>%
  group_by(Segmento, ivu_segmentado_categoria) %>%
  summarise(proyectos = n(), .groups = 'drop') %>%
  pivot_wider(names_from = ivu_segmentado_categoria, values_from = proyectos, values_fill = 0)

cat("\nDistribución de categorías IVU segmentado por segmento:\n")
print(kable(distribucion_categorias))

# ---- 11. GUARDAR RESULTADOS ----

# 11.1 Guardar dataset completo
write.csv(datos_segmentados, "proyectos_indices_segmentados_4s.csv", row.names = FALSE)

# 11.2 Guardar rankings por segmento
rankings_finales <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  group_by(Segmento) %>%
  mutate(
    score_combinado_seg = (ivu_segmentado * 0.6) + (ivp_segmentado * 0.4),
    rank_final = rank(-score_combinado_seg, ties.method = "min")
  ) %>%
  select(Proyecto, Desarrollador, Municipio, Segmento, nse, segmento_nse,
         ivu_segmentado, ivu_segmentado_categoria,
         ivp_segmentado, ivp_segmentado_categoria,
         score_combinado_seg, rank_final) %>%
  arrange(Segmento, rank_final) %>%
  ungroup()

write.csv(rankings_finales, "rankings_por_segmento_4s.csv", row.names = FALSE)

# 11.3 Guardar matriz de relevancia aplicada
write.csv(factores_relevancia, "matriz_relevancia_factores_4s.csv", row.names = FALSE)

# ---- 12. RESUMEN EJECUTIVO 4S ----

cat("\n" , rep("=", 60), "\n")
cat("RESUMEN EJECUTIVO 4S - SEGMENTACIÓN DE ÍNDICES\n")
cat(rep("=", 60), "\n")

cat("\n📊 ESTADÍSTICAS GENERALES:\n")
cat("- Proyectos analizados:", nrow(datos_segmentados), "\n")
cat("- Combinaciones Segmento-NSE:", n_distinct(datos_segmentados$segmento_nse), "\n")
cat("- Segmentos con datos suficientes:", length(segmentos_con_datos), "\n")

cat("\n🎯 PRINCIPALES HALLAZGOS:\n")
cat("- Correlación promedio IVU original vs segmentado:", 
    round(mean(estadisticas_segmento$IVU_Correlacion, na.rm = TRUE), 3), "\n")
cat("- Correlación promedio IVP original vs segmentado:", 
    round(mean(estadisticas_segmento$IVP_Correlacion, na.rm = TRUE), 3), "\n")
cat("- Proyectos con cambios significativos en ranking:", nrow(cambios_significativos), "\n")
cat("- Proyectos que mejoraron ≥3 posiciones:", nrow(mejores_cambios), "\n")

cat("\n📈 BENEFICIOS DE LA SEGMENTACIÓN 4S:\n")
cat("✅ Eliminación de sesgos por comparación entre segmentos diferentes\n")
cat("✅ Rankings justos intra-segmento con categorías diplomáticas\n") 
cat("✅ Identificación de líderes reales por mercado objetivo\n")
cat("✅ Pesos específicos por valoración del segmento\n")
cat("✅ Mejor identificación de oportunidades de inversión\n")
cat("✅ Lenguaje profesional y constructivo para desarrolladores\n")

cat("\n🏆 CATEGORÍAS 4S REAL ESTATE:\n")
cat("- SUPERIOR: Líderes del mercado en su segmento\n")
cat("- SÓLIDO: Proyectos con alto potencial\n") 
cat("- SUSTENTABLE: Base sólida para crecimiento\n")
cat("- SINGULAR: Características únicas especializadas\n")

cat("\n📁 ARCHIVOS GENERADOS:\n")
cat("- proyectos_indices_segmentados_4s.csv (dataset completo)\n")
cat("- rankings_por_segmento_4s.csv (rankings finales)\n") 
cat("- matriz_relevancia_factores_4s.csv (pesos por segmento)\n")

cat("\n🗺️ VISUALIZACIONES 4S MEJORADAS:\n")
cat("- Matriz de relevancia de factores por segmento\n")
cat("- Comparaciones IVU/IVP original vs segmentado\n")
cat("- Matrices de decisión 4S INTERACTIVAS por segmento (plotly)\n")
cat("- Mapas interactivos con TAMAÑOS UNIFORMES y categorización 4S\n")
cat("- Popups informativos detallados con identidad 4S\n")

cat("\n", rep("=", 60), "\n")
cat("PROCESO DE SEGMENTACIÓN 4S COMPLETADO CON ÉXITO\n")
cat(rep("=", 60), "\n\n")

cat("✅ CAMBIOS 4S IMPLEMENTADOS:\n")
cat("🔸 Categorías diplomáticas SUPERIOR, SÓLIDO, SUSTENTABLE, SINGULAR\n")
cat("🔸 Tamaños uniformes en todos los mapas (eliminación de sobresaturación)\n")
cat("🔸 Matrices de decisión 4S interactivas con tooltips informativos\n") 
cat("🔸 Mejor identificación de proyectos en cada cuadrante 4S\n")
cat("🔸 Mapas segmentados con categorización justa intra-segmento\n")
cat("🔸 Popups detallados con comparaciones antes/después\n")
cat("🔸 Identidad visual y terminología 4S Real Estate consistente\n")


# ---- 13. VISUALIZACIONES PARA PROYECTO INDIVIDUAL ----

# 13.1 Funciones para proyecto individual (SIN DUPLICAR)
seleccionar_proyecto_segmentado <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  if (!is.null(indice_proyecto)) {
    if(indice_proyecto > nrow(datos) || indice_proyecto < 1) {
      stop("Índice de proyecto fuera de rango. Debe estar entre 1 y ", nrow(datos))
    }
    proyecto <- datos[indice_proyecto, ]
  } else if (!is.null(nombre_proyecto)) {
    proyecto <- datos[datos$Proyecto == nombre_proyecto, ]
    if (nrow(proyecto) == 0) {
      stop("Proyecto no encontrado: ", nombre_proyecto)
    }
  } else {
    stop("Debe proporcionar un indice_proyecto o un nombre_proyecto")
  }
  return(proyecto)
}

# 13.2 Función para crear termómetro IVU segmentado
crear_termometro_ivu_segmentado <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  valor <- proyecto$ivu_segmentado
  categoria <- proyecto$ivu_segmentado_categoria
  nombre <- proyecto$Proyecto
  segmento <- proyecto$Segmento
  nse <- proyecto$nse
  
  colores <- c(
    "Muy bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785",
    "Alto" = "#68D192", "Muy alto" = "#2C6C66"
  )
  
  color <- colores[as.character(categoria)]
  
  escala <- data.frame(
    y = seq(0, 1, 0.2),
    labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
    categorias = c("", "Muy bajo", "Bajo", "Medio", "Alto", "Muy alto")
  )
  
  p <- ggplot() +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = 1), 
              fill = "lightgrey", color = "black", linewidth = 1) +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = valor), 
              fill = color, alpha = 0.8) +
    geom_segment(data = escala, 
                 aes(x = 0.38, y = y, xend = 0.62, yend = y), 
                 color = "black", linewidth = 0.5) +
    geom_text(data = escala, 
              aes(x = 0.35, y = y, label = labels), 
              hjust = 1, size = 4) +
    geom_text(data = escala[-1,], 
              aes(x = 0.7, y = y - 0.1, label = categorias), 
              hjust = 0, size = 3) +
    geom_text(aes(x = 0.5, y = 1.15, 
                  label = paste0(nombre, "\n", 
                                 "Segmento: ", segmento, " | NSE: ", nse, "\n",
                                 "IVU Segmentado: ", round(valor, 3), "\n",
                                 "Categoría: ", categoria)),
              fontface = "bold", hjust = 0.5, size = 4) +
    labs(title = "🎯 Termómetro IVU Segmentado 4S",
         subtitle = "Comparación justa intra-segmento",
         x = NULL, y = NULL) +
    theme_minimal() +
    theme(
      axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank(),
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16, color = "#2C6C66"),
      plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#2C6C66")
    ) +
    coord_cartesian(xlim = c(0, 1), ylim = c(-0.05, 1.3), expand = FALSE)
  
  return(p)
}

# 13.3 Función para crear termómetro IVP segmentado
crear_termometro_ivp_segmentado <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  valor <- proyecto$ivp_segmentado
  categoria <- proyecto$ivp_segmentado_categoria
  nombre <- proyecto$Proyecto
  segmento <- proyecto$Segmento
  amenidades <- proyecto$num_amenidades
  
  colores <- c(
    "Muy Bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785",
    "Alto" = "#68D192", "Muy Alto" = "#2C6C66"
  )
  
  color <- colores[as.character(categoria)]
  
  escala <- data.frame(
    y = seq(0, 1, 0.2),
    labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
    categorias = c("", "Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto")
  )
  
  p <- ggplot() +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = 1), 
              fill = "lightgrey", color = "black", linewidth = 1) +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = valor), 
              fill = color, alpha = 0.8) +
    geom_segment(data = escala, 
                 aes(x = 0.38, y = y, xend = 0.62, yend = y), 
                 color = "black", linewidth = 0.5) +
    geom_text(data = escala, 
              aes(x = 0.35, y = y, label = labels), 
              hjust = 1, size = 4) +
    geom_text(data = escala[-1,], 
              aes(x = 0.7, y = y - 0.1, label = categorias), 
              hjust = 0, size = 3) +
    geom_text(aes(x = 0.5, y = 1.15, 
                  label = paste0(nombre, "\n", 
                                 "Segmento: ", segmento, "\n",
                                 "IVP Segmentado: ", round(valor, 3), "\n",
                                 "Categoría: ", categoria, "\n",
                                 "Amenidades: ", amenidades)),
              fontface = "bold", hjust = 0.5, size = 4) +
    labs(title = "⭐ Termómetro IVP Segmentado 4S",
         subtitle = "Valor del proyecto intra-segmento",
         x = NULL, y = NULL) +
    theme_minimal() +
    theme(
      axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank(),
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16, color = "#2C6C66"),
      plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#2C6C66")
    ) +
    coord_cartesian(xlim = c(0, 1), ylim = c(-0.05, 1.3), expand = FALSE)
  
  return(p)
}

# 13.4 Función para crear panel de categorización 4S
crear_panel_categorizacion_4s <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  ivu_seg <- proyecto$ivu_segmentado
  ivp_seg <- proyecto$ivp_segmentado
  
  categoria_4s <- case_when(
    ivu_seg >= 0.5 & ivp_seg >= 0.5 ~ "SUPERIOR",
    ivu_seg < 0.5 & ivp_seg >= 0.5 ~ "SÓLIDO",
    ivu_seg >= 0.5 & ivp_seg < 0.5 ~ "SUSTENTABLE",
    TRUE ~ "SINGULAR"
  )
  
  info_categorias <- data.frame(
    categoria = c("SUPERIOR", "SÓLIDO", "SUSTENTABLE", "SINGULAR"),
    color = c("#68D192", "#9B87F4", "#F4E785", "#F8C579"),
    descripcion = c(
      "Excelente ubicación\ny proyecto",
      "Propuesta sólida\nalto potencial", 
      "Ubicación excelente\nfundamentos consistentes",
      "Características únicas\nenfoque especializado"
    ),
    icono = c("🏆", "⭐", "🔄", "🎯")
  )
  
  categoria_info <- info_categorias[info_categorias$categoria == categoria_4s, ]
  
  p <- ggplot() +
    geom_rect(aes(xmin = 0.1, xmax = 0.9, ymin = 0.4, ymax = 0.8), 
              fill = categoria_info$color, alpha = 0.8, color = "white", linewidth = 2) +
    geom_text(aes(x = 0.5, y = 0.6, 
                  label = paste0(categoria_info$icono, " ", categoria_4s)), 
              size = 8, fontface = "bold", color = "white") +
    geom_text(aes(x = 0.5, y = 0.3, 
                  label = categoria_info$descripcion), 
              size = 5, fontface = "bold", color = categoria_info$color) +
    geom_text(aes(x = 0.5, y = 0.9, 
                  label = paste0(proyecto$Proyecto, "\n",
                                 proyecto$Segmento, " | NSE ", proyecto$nse)), 
              size = 5, fontface = "bold", color = "#2C6C66") +
    geom_text(aes(x = 0.5, y = 0.1, 
                  label = paste0("IVU: ", round(ivu_seg, 3), 
                                 " | IVP: ", round(ivp_seg, 3))), 
              size = 4, color = "#2C6C66") +
    labs(title = "🎯 Categorización 4S Segmentada",
         subtitle = "Posición en la matriz de decisión intra-segmento") +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16, color = "#2C6C66"),
      plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#2C6C66")
    ) +
    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
  
  return(p)
}

# 13.5 Función para crear dashboard básico del proyecto
crear_dashboard_proyecto_4s <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  if (!is.null(indice_proyecto)) {
    if(indice_proyecto > nrow(datos) || indice_proyecto < 1) {
      stop("Índice de proyecto fuera de rango. Debe estar entre 1 y ", nrow(datos))
    }
  }
  
  termometro_ivu <- crear_termometro_ivu_segmentado(datos, indice_proyecto, nombre_proyecto)
  termometro_ivp <- crear_termometro_ivp_segmentado(datos, indice_proyecto, nombre_proyecto)
  panel_categoria <- crear_panel_categorizacion_4s(datos, indice_proyecto, nombre_proyecto)
  
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  datos_segmento <- datos %>% filter(Segmento == proyecto$Segmento)
  
  matriz_posicion <- ggplot(datos_segmento, aes(x = ivu_segmentado, y = ivp_segmentado)) +
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0.5, ymax = 1, 
             fill = "#9B87F4", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0.5, ymax = 1, 
             fill = "#68D192", alpha = 0.1) +
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0, ymax = 0.5, 
             fill = "#F8C579", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0, ymax = 0.5, 
             fill = "#F4E785", alpha = 0.1) +
    geom_point(data = datos_segmento[datos_segmento$Proyecto != proyecto$Proyecto, ],
               alpha = 0.3, size = 2, color = "gray60") +
    geom_point(data = proyecto, aes(x = ivu_segmentado, y = ivp_segmentado),
               size = 6, color = "#2C6C66", shape = 17) +
    geom_hline(yintercept = 0.5, linetype = "dashed", color = "gray40") +
    geom_vline(xintercept = 0.5, linetype = "dashed", color = "gray40") +
    labs(title = paste("Posición en Matriz 4S -", proyecto$Segmento),
         subtitle = paste("▲ =", proyecto$Proyecto),
         x = "IVU Segmentado", y = "IVP Segmentado") +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 12, color = "#2C6C66"),
      plot.subtitle = element_text(size = 10, color = "#2C6C66")
    )
  
  dashboard <- grid.arrange(
    termometro_ivu, termometro_ivp, 
    panel_categoria, matriz_posicion,
    ncol = 2, nrow = 2,
    top = textGrob(paste("Dashboard 4S -", proyecto$Proyecto), 
                   gp = gpar(fontsize = 18, fontface = "bold", col = "#2C6C66"))
  )
  
  return(dashboard)
}

# 13.6 Función básica de análisis del proyecto
analizar_proyecto_4s <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  datos_segmento <- datos %>% filter(Segmento == proyecto$Segmento)
  
  percentil_ivu <- round(mean(datos_segmento$ivu_segmentado <= proyecto$ivu_segmentado, na.rm = TRUE) * 100, 1)
  percentil_ivp <- round(mean(datos_segmento$ivp_segmentado <= proyecto$ivp_segmentado, na.rm = TRUE) * 100, 1)
  
  categoria_4s <- case_when(
    proyecto$ivu_segmentado >= 0.5 & proyecto$ivp_segmentado >= 0.5 ~ "SUPERIOR",
    proyecto$ivu_segmentado < 0.5 & proyecto$ivp_segmentado >= 0.5 ~ "SÓLIDO",
    proyecto$ivu_segmentado >= 0.5 & proyecto$ivp_segmentado < 0.5 ~ "SUSTENTABLE",
    TRUE ~ "SINGULAR"
  )
  
  score_combinado <- (proyecto$ivu_segmentado * 0.6) + (proyecto$ivp_segmentado * 0.4)
  datos_segmento$score_temp <- (datos_segmento$ivu_segmentado * 0.6) + (datos_segmento$ivp_segmentado * 0.4)
  ranking <- sum(datos_segmento$score_temp >= score_combinado, na.rm = TRUE)
  total_segmento <- nrow(datos_segmento)
  
  cat("\n", rep("=", 60), "\n")
  cat("ANÁLISIS 4S INDIVIDUAL DEL PROYECTO\n")
  cat(rep("=", 60), "\n")
  
  cat("\n📊 INFORMACIÓN BÁSICA:\n")
  cat("Proyecto:", proyecto$Proyecto, "\n")
  cat("Desarrollador:", proyecto$Desarrollador, "\n")
  cat("Municipio:", proyecto$Municipio, "\n")
  cat("Segmento:", proyecto$Segmento, "| NSE:", proyecto$nse, "\n")
  cat("Precio/m²: $", format(proyecto$p_m2, big.mark = ","), "\n")
  
  cat("\n🎯 CATEGORIZACIÓN 4S:", categoria_4s, "\n")
  
  cat("\n📈 MÉTRICAS SEGMENTADAS:\n")
  cat("IVU Segmentado:", round(proyecto$ivu_segmentado, 3), 
      "(", proyecto$ivu_segmentado_categoria, ")\n")
  cat("IVP Segmentado:", round(proyecto$ivp_segmentado, 3), 
      "(", proyecto$ivp_segmentado_categoria, ")\n")
  cat("Score Combinado:", round(score_combinado, 3), "\n")
  
  cat("\n🏆 POSICIÓN EN SEGMENTO:\n")
  cat("Ranking:", ranking, "de", total_segmento, "proyectos\n")
  cat("Percentil IVU:", percentil_ivu, "% (mejor que", percentil_ivu, "% del segmento)\n")
  cat("Percentil IVP:", percentil_ivp, "% (mejor que", percentil_ivp, "% del segmento)\n")
  
  cat("\n💡 COMPARACIÓN GLOBAL vs SEGMENTADA:\n")
  cat("IVU: Global", round(proyecto$ivu, 3), "→ Segmentado", round(proyecto$ivu_segmentado, 3), "\n")
  cat("IVP: Global", round(proyecto$ivp_v2, 3), "→ Segmentado", round(proyecto$ivp_segmentado, 3), "\n")
  
  interpretaciones <- list(
    "SUPERIOR" = "Líder del segmento con excelente ubicación y proyecto. Inversión premium recomendada.",
    "SÓLIDO" = "Alto potencial con propuesta sólida. Oportunidad de crecimiento en el segmento.",
    "SUSTENTABLE" = "Base sólida con ubicación excelente. Fundamentos consistentes para crecimiento.",
    "SINGULAR" = "Características únicas especializadas. Enfoque diferenciado en el mercado."
  )
  
  cat("\n🎯 INTERPRETACIÓN CATEGORÍA", categoria_4s, ":\n")
  cat(interpretaciones[[categoria_4s]], "\n")
  cat("\n", rep("=", 60), "\n")
  
  return(list(
    proyecto = proyecto$Proyecto,
    categoria_4s = categoria_4s,
    ivu_segmentado = proyecto$ivu_segmentado,
    ivp_segmentado = proyecto$ivp_segmentado,
    ranking = ranking,
    total_segmento = total_segmento,
    percentil_ivu = percentil_ivu,
    percentil_ivp = percentil_ivp,
    score_combinado = score_combinado
  ))
}

# 13.7 Función COMPLETA para análisis con fortalezas
crear_dashboard_proyecto_4s_completo <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Dashboard original (4 paneles)
  dashboard_original <- crear_dashboard_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  cat("\n=== DASHBOARD PRINCIPAL 4S ===\n")
  print(dashboard_original)
  
  return(dashboard_original)
}

# 13.8 Función COMPLETA para análisis detallado
analizar_proyecto_4s_completo <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Ejecutar análisis 4S original
  analisis_base <- analizar_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  cat("\n🏆 ANÁLISIS COMPLETADO\n")
  
  return(analisis_base)
}

# ---- 14. EJEMPLOS DE USO DE LAS VISUALIZACIONES ----

# Definir proyecto a analizar
PROYECTO_SELECCIONADO <- 7 

cat("\n=== ANÁLISIS INDIVIDUAL 4S (VERSIÓN ÚNICA) ===\n")

if(PROYECTO_SELECCIONADO <= nrow(datos_segmentados)) {
  proyecto_info <- datos_segmentados[PROYECTO_SELECCIONADO, ]
  
  if(!is.na(proyecto_info$ivu_segmentado) && !is.na(proyecto_info$ivp_segmentado)) {
    
    cat("Analizando proyecto:", proyecto_info$Proyecto, "\n")
    cat("Segmento:", proyecto_info$Segmento, "| NSE:", proyecto_info$nse, "\n")
    
    # SOLO UNA VERSIÓN de cada visualización
    cat("\n1. Dashboard 4S completo...\n")
    dashboard_unico <- crear_dashboard_proyecto_4s_completo(datos_segmentados, PROYECTO_SELECCIONADO)
    
    cat("\n2. Análisis detallado...\n")
    analisis_unico <- analizar_proyecto_4s_completo(datos_segmentados, PROYECTO_SELECCIONADO)
    
  } else {
    cat("ERROR: El proyecto seleccionado no tiene datos segmentados válidos.\n")
  }
} else {
  cat("ERROR: Índice de proyecto fuera de rango. Máximo:", nrow(datos_segmentados), "\n")
}


# ---- 15 Crear archivo específico para Keynote ----
datos_keynote <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  mutate(
    # Calcular categoría 4S
    categoria_4s = case_when(
      ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR",
      ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "SÓLIDO",
      ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE",
      TRUE ~ "SINGULAR"
    ),
    
    # Redondear valores para mejor visualización
    IVU_X = round(ivu_segmentado, 3),
    IVP_Y = round(ivp_segmentado, 3),
    
    # Crear etiqueta combinada
    Etiqueta = paste0(Proyecto, "\n(", Segmento, ")")
  ) %>%
  select(
    Proyecto, Desarrollador, Municipio, Segmento, nse,
    IVU_X, IVP_Y, categoria_4s, Etiqueta, p_m2
  ) %>%
  arrange(Segmento, desc(IVU_X + IVP_Y))

# Guardar archivo optimizado para Keynote
write.csv(datos_keynote, "matriz_4s_para_keynote.csv", row.names = FALSE)

cat("Archivo creado: matriz_4s_para_keynote.csv\n")
cat("Proyectos incluidos:", nrow(datos_keynote), "\n")

# ---- 16. ANÁLISIS DE FORTALEZAS DEL PROYECTO ----

# 16.1 Función para identificar fortalezas del proyecto
identificar_fortalezas_proyecto <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Seleccionar proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener datos del mismo segmento para comparación
  datos_segmento <- datos %>% 
    filter(Segmento == proyecto$Segmento) %>%
    filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado))
  
  # Definir variables clave para análisis
  variables_analisis <- c(
    # Performance Comercial
    "absorcion", "ratio_ventas", "eficiencia_comercial", "velocidad_ventas",
    
    # Amenidades y Proyecto
    "score_amenidades_total", "num_amenidades", "m2_inv",
    
    # Ubicación y Accesibilidad
    "indice_accesibilidad", "accesibilidad_vial", "indice_conveniencia",
    "cerca_parque_relevante", "dist_to_park", "dist_to_relevant_park",
    
    # Cercanías clave
    "cercania_hospital", "cercania_esc_priv", "cercania_universidad", 
    "cercania_super", "cercania_tienda_dept", "cerca_avenida_principal",
    
    # Cantidades en 1km
    "cantidad_hospital_1km", "cantidad_esc_priv_1km", "cantidad_super_1km", 
    "cantidad_restau_1km", "cantidad_oficina_1km",
    
    # Desarrollador
    "proyectos_total", "absorcion_promedio_dev", "consistencia_absorcion",
    
    # Entorno demográfico
    "pob2020_1km", "hogares2020_1km", "alta_densidad_comercial", "alto_entorno_laboral",
    
    # Competitividad
    "competitividad_precio", "propuesta_valor_v2"
  )
  
  # Filtrar solo variables que existen en los datos
  variables_existentes <- intersect(variables_analisis, names(datos_segmento))
  
  # Calcular percentiles para cada variable
  percentiles_proyecto <- data.frame(
    Variable = character(0),
    Valor_Proyecto = numeric(0),
    Percentil = numeric(0),
    Promedio_Segmento = numeric(0),
    Categoria_Fortaleza = character(0),
    stringsAsFactors = FALSE
  )
  
  for(var in variables_existentes) {
    valor_proyecto <- proyecto[[var]]
    
    if(!is.na(valor_proyecto)) {
      valores_segmento <- datos_segmento[[var]]
      valores_validos <- valores_segmento[!is.na(valores_segmento)]
      
      if(length(valores_validos) > 2) {
        # Calcular percentil
        percentil <- round(mean(valores_validos <= valor_proyecto, na.rm = TRUE) * 100, 1)
        promedio <- mean(valores_validos, na.rm = TRUE)
        
        # Categorizar fortaleza
        categoria <- case_when(
          percentil >= 90 ~ "Excepcional",
          percentil >= 75 ~ "Muy Fuerte", 
          percentil >= 60 ~ "Fuerte",
          percentil >= 40 ~ "Promedio",
          TRUE ~ "Área de Mejora"
        )
        
        # Para variables donde menor es mejor (distancias), invertir percentil
        if(grepl("^dist_", var)) {
          percentil <- 100 - percentil
          categoria <- case_when(
            percentil >= 90 ~ "Excepcional",
            percentil >= 75 ~ "Muy Fuerte", 
            percentil >= 60 ~ "Fuerte",
            percentil >= 40 ~ "Promedio",
            TRUE ~ "Área de Mejora"
          )
        }
        
        percentiles_proyecto <- rbind(percentiles_proyecto, data.frame(
          Variable = var,
          Valor_Proyecto = valor_proyecto,
          Percentil = percentil,
          Promedio_Segmento = promedio,
          Categoria_Fortaleza = categoria,
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  
  # Ordenar por percentil descendente
  percentiles_proyecto <- percentiles_proyecto %>%
    arrange(desc(Percentil))
  
  return(percentiles_proyecto)
}

# 16.2 Función para crear visualización de fortalezas
crear_visualizacion_fortalezas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis de fortalezas
  fortalezas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto)
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Tomar top 12 fortalezas para visualización
  top_fortalezas <- head(fortalezas, 12)
  
  # Crear etiquetas más amigables
  etiquetas_variables <- c(
    "absorcion" = "Absorción",
    "ratio_ventas" = "Ratio de Ventas", 
    "eficiencia_comercial" = "Eficiencia Comercial",
    "velocidad_ventas" = "Velocidad Ventas",
    "score_amenidades_total" = "Score Amenidades",
    "num_amenidades" = "Número Amenidades",
    "m2_inv" = "Superficie Inventario",
    "indice_accesibilidad" = "Accesibilidad",
    "accesibilidad_vial" = "Accesibilidad Vial",
    "indice_conveniencia" = "Conveniencia",
    "cerca_parque_relevante" = "Cercanía Parque",
    "dist_to_park" = "Distancia Parque",
    "dist_to_relevant_park" = "Dist. Parque Relevante",
    "cercania_hospital" = "Cercanía Hospital",
    "cercania_esc_priv" = "Cercanía Esc. Privada",
    "cercania_universidad" = "Cercanía Universidad",
    "cercania_super" = "Cercanía Supermercado",
    "cercania_tienda_dept" = "Cercanía Tienda Depto",
    "cerca_avenida_principal" = "Cercanía Av. Principal",
    "cantidad_hospital_1km" = "Hospitales 1km",
    "cantidad_esc_priv_1km" = "Esc. Privadas 1km",
    "cantidad_super_1km" = "Supermercados 1km",
    "cantidad_restau_1km" = "Restaurantes 1km",
    "cantidad_oficina_1km" = "Oficinas 1km",
    "proyectos_total" = "Proyectos Desarrollador",
    "absorcion_promedio_dev" = "Absorción Prom. Dev.",
    "consistencia_absorcion" = "Consistencia Dev.",
    "pob2020_1km" = "Población 1km",
    "hogares2020_1km" = "Hogares 1km",
    "alta_densidad_comercial" = "Densidad Comercial",
    "alto_entorno_laboral" = "Entorno Laboral",
    "competitividad_precio" = "Competitividad Precio",
    "propuesta_valor_v2" = "Propuesta de Valor"
  )
  
  # Aplicar etiquetas
  top_fortalezas$Etiqueta <- sapply(top_fortalezas$Variable, function(x) {
    if(x %in% names(etiquetas_variables)) etiquetas_variables[x] else x
  })
  
  # Colores por categoría de fortaleza
  colores_fortaleza <- c(
    "Excepcional" = "#2C6C66",
    "Muy Fuerte" = "#68D192", 
    "Fuerte" = "#F4E785",
    "Promedio" = "#F8C579",
    "Área de Mejora" = "#EF6558"
  )
  
  # Crear gráfico de barras horizontales
  p <- ggplot(top_fortalezas, aes(x = reorder(Etiqueta, Percentil), y = Percentil, 
                                  fill = Categoria_Fortaleza)) +
    geom_bar(stat = "identity", alpha = 0.8) +
    geom_text(aes(label = paste0(round(Percentil, 0), "%")), 
              hjust = -0.1, size = 3, fontface = "bold") +
    scale_fill_manual(values = colores_fortaleza, name = "Nivel") +
    coord_flip() +
    labs(title = paste("🏆 Principales Fortalezas -", proyecto$Proyecto),
         subtitle = paste("Percentiles vs otros proyectos", proyecto$Segmento),
         x = "Factor", y = "Percentil en el Segmento (%)") +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 14, color = "#2C6C66"),
      plot.subtitle = element_text(size = 11, color = "#2C6C66"),
      axis.text.y = element_text(size = 9),
      legend.position = "bottom"
    ) +
    scale_y_continuous(limits = c(0, 105), breaks = seq(0, 100, 25))
  
  return(p)
}

# 16.3 Función para crear gráfico radar de fortalezas clave
crear_radar_fortalezas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Definir categorías clave para radar
  categorias_radar <- list(
    "Amenidades" = c("score_amenidades_total", "num_amenidades"),
    "Performance" = c("absorcion", "eficiencia_comercial", "ratio_ventas"),
    "Ubicación" = c("indice_accesibilidad", "indice_conveniencia", "accesibilidad_vial"),
    "Servicios" = c("cercania_hospital", "cercania_esc_priv", "cantidad_super_1km"),
    "Desarrollador" = c("proyectos_total", "absorcion_promedio_dev", "consistencia_absorcion"),
    "Entorno" = c("pob2020_1km", "alta_densidad_comercial", "alto_entorno_laboral")
  )
  
  # Obtener datos del segmento
  datos_segmento <- datos %>% 
    filter(Segmento == proyecto$Segmento) %>%
    filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado))
  
  # Calcular score promedio por categoría
  scores_categoria <- data.frame(
    Categoria = character(0),
    Score = numeric(0),
    stringsAsFactors = FALSE
  )
  
  for(categoria in names(categorias_radar)) {
    variables_cat <- intersect(categorias_radar[[categoria]], names(datos_segmento))
    
    if(length(variables_cat) > 0) {
      # Calcular percentiles promedio para esta categoría
      percentiles_cat <- numeric(0)
      
      for(var in variables_cat) {
        valor_proyecto <- proyecto[[var]]
        if(!is.na(valor_proyecto)) {
          valores_segmento <- datos_segmento[[var]]
          valores_validos <- valores_segmento[!is.na(valores_segmento)]
          
          if(length(valores_validos) > 2) {
            percentil <- mean(valores_validos <= valor_proyecto, na.rm = TRUE) * 100
            percentiles_cat <- c(percentiles_cat, percentil)
          }
        }
      }
      
      if(length(percentiles_cat) > 0) {
        score_promedio <- mean(percentiles_cat)
        scores_categoria <- rbind(scores_categoria, data.frame(
          Categoria = categoria,
          Score = score_promedio,
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  
  # Asegurar que tenemos al menos 3 categorías
  if(nrow(scores_categoria) >= 3) {
    # Preparar datos para radar (agregar primera fila al final para cerrar)
    radar_data <- rbind(scores_categoria, scores_categoria[1, ])
    
    # Crear gráfico de radar
    p <- ggplot(radar_data, aes(x = Categoria, y = Score)) +
      geom_polygon(fill = "#68D192", alpha = 0.3, color = "#2C6C66", linewidth = 1) +
      geom_point(color = "#2C6C66", size = 3) +
      coord_polar() +
      ylim(0, 100) +
      labs(title = paste("🎯 Perfil de Fortalezas -", proyecto$Proyecto),
           subtitle = "Percentiles por categoría vs segmento") +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 14, color = "#2C6C66", hjust = 0.5),
        plot.subtitle = element_text(size = 11, color = "#2C6C66", hjust = 0.5),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major.y = element_line(color = "gray90", linewidth = 0.5),
        axis.text.x = element_text(size = 10, face = "bold")
      )
    
    return(p)
  } else {
    # Crear gráfico placeholder si no hay suficientes datos
    p <- ggplot() +
      geom_text(aes(x = 0.5, y = 0.5, label = "Datos insuficientes\npara radar"), 
                size = 6, color = "#2C6C66") +
      labs(title = paste("🎯 Perfil de Fortalezas -", proyecto$Proyecto)) +
      theme_void()
    return(p)
  }
}

# 16.4 Función para generar reporte textual de fortalezas
generar_reporte_fortalezas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis
  fortalezas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto)
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Filtrar solo fortalezas significativas (percentil >= 75)
  fortalezas_top <- fortalezas %>% filter(Percentil >= 75)
  
  cat("\n", rep("🏆", 20), "\n")
  cat("ANÁLISIS DE FORTALEZAS COMPETITIVAS\n")
  cat(rep("🏆", 20), "\n")
  
  cat("\n📊 PROYECTO:", proyecto$Proyecto, "\n")
  cat("🏠 SEGMENTO:", proyecto$Segmento, "| NSE:", proyecto$nse, "\n")
  
  # Corregir la sintaxis del pipe
  datos_segmento_count <- datos %>% 
    filter(Segmento == proyecto$Segmento) %>%
    pull(ivu_segmentado) %>%
    {sum(!is.na(.))}
  
  cat("📈 POSICIÓN: Comparación vs", datos_segmento_count, "proyectos del segmento\n")
  
  if(nrow(fortalezas_top) > 0) {
    cat("\n🌟 FORTALEZAS DESTACADAS (Percentil ≥75%):\n")
    
    # Agrupar por categoría de fortaleza
    excepcionales <- fortalezas_top %>% filter(Categoria_Fortaleza == "Excepcional")
    muy_fuertes <- fortalezas_top %>% filter(Categoria_Fortaleza == "Muy Fuerte")
    
    if(nrow(excepcionales) > 0) {
      cat("\n🥇 EXCEPCIONAL (Top 10%):\n")
      for(i in 1:nrow(excepcionales)) {
        cat("  •", excepcionales$Variable[i], "- Percentil:", 
            round(excepcionales$Percentil[i], 0), "%\n")
      }
    }
    
    if(nrow(muy_fuertes) > 0) {
      cat("\n🥈 MUY FUERTE (Top 25%):\n")
      for(i in 1:nrow(muy_fuertes)) {
        cat("  •", muy_fuertes$Variable[i], "- Percentil:", 
            round(muy_fuertes$Percentil[i], 0), "%\n")
      }
    }
    
    # Interpretaciones específicas
    cat("\n💡 INTERPRETACIÓN DE FORTALEZAS:\n")
    
    # Amenidades
    if(any(grepl("amenidades|num_amenidades", fortalezas_top$Variable))) {
      cat("🏢 AMENIDADES: Proyecto sobresale en oferta de amenidades vs competencia\n")
    }
    
    # Performance comercial
    if(any(grepl("absorcion|ratio_ventas|eficiencia", fortalezas_top$Variable))) {
      cat("📈 PERFORMANCE: Excelente desempeño comercial y de ventas\n")
    }
    
    # Ubicación
    if(any(grepl("accesibilidad|conveniencia|cercania", fortalezas_top$Variable))) {
      cat("📍 UBICACIÓN: Localización estratégica con excelente accesibilidad\n")
    }
    
    # Desarrollador
    if(any(grepl("proyectos_total|absorcion_promedio_dev|consistencia", fortalezas_top$Variable))) {
      cat("🏗️ DESARROLLADOR: Track record sólido y experiencia comprobada\n")
    }
    
    # Entorno
    if(any(grepl("pob2020|hogares|densidad", fortalezas_top$Variable))) {
      cat("🌆 ENTORNO: Zona con excelente densidad poblacional y comercial\n")
    }
    
  } else {
    cat("\n⚠️  No se identificaron fortalezas destacadas (percentil ≥75%)\n")
    cat("📊 Top 5 aspectos relativos del proyecto:\n")
    top_5 <- head(fortalezas, 5)
    for(i in 1:nrow(top_5)) {
      cat("  ", i, ".", top_5$Variable[i], "- Percentil:", 
          round(top_5$Percentil[i], 0), "%\n")
    }
  }
  
  # Áreas de mejora
  areas_mejora <- fortalezas %>% filter(Percentil < 40) %>% head(3)
  if(nrow(areas_mejora) > 0) {
    cat("\n🔧 ÁREAS DE OPORTUNIDAD (Percentil <40%):\n")
    for(i in 1:nrow(areas_mejora)) {
      cat("  •", areas_mejora$Variable[i], "- Percentil:", 
          round(areas_mejora$Percentil[i], 0), "%\n")
    }
  }
  
  cat("\n", rep("🏆", 20), "\n")
  
  return(fortalezas_top)
}

# 16.5 Función para dashboard completo de fortalezas
crear_dashboard_fortalezas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Crear visualizaciones
  grafico_barras <- crear_visualizacion_fortalezas(datos, indice_proyecto, nombre_proyecto)
  grafico_radar <- crear_radar_fortalezas(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener proyecto para título
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Combinar gráficos
  dashboard_fortalezas <- grid.arrange(
    grafico_barras, grafico_radar,
    ncol = 2, nrow = 1,
    top = grid::textGrob(paste("🏆 Análisis de Fortalezas Competitivas -", proyecto$Proyecto), 
                         gp = grid::gpar(fontsize = 16, fontface = "bold", col = "#2C6C66"))
  )
  
  return(dashboard_fortalezas)
}

# 16.6 Análisis de factores únicos (diferenciadores)
identificar_diferenciadores <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener proyecto y fortalezas
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  fortalezas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto)
  
  # Identificar factores únicos o muy raros
  datos_segmento <- datos %>% filter(Segmento == proyecto$Segmento)
  
  diferenciadores <- list()
  
  # 1. Amenidades únicas o superiores
  if(!is.na(proyecto$num_amenidades)) {
    amenidades_prom <- mean(datos_segmento$num_amenidades, na.rm = TRUE)
    if(proyecto$num_amenidades >= amenidades_prom * 1.5) {
      diferenciadores$amenidades <- paste0("Número excepcional de amenidades (", 
                                           proyecto$num_amenidades, " vs promedio ", 
                                           round(amenidades_prom, 1), ")")
    }
  }
  
  # 2. Performance comercial excepcional
  if(!is.na(proyecto$absorcion)) {
    absorcion_p90 <- quantile(datos_segmento$absorcion, 0.9, na.rm = TRUE)
    if(proyecto$absorcion >= absorcion_p90) {
      diferenciadores$performance <- paste0("Absorción en top 10% del segmento (", 
                                            round(proyecto$absorcion, 1), ")")
    }
  }
  
  # 3. Ubicación privilegiada
  factores_ubicacion <- c("indice_accesibilidad", "accesibilidad_vial", "indice_conveniencia")
  ubicacion_scores <- numeric(0)
  
  for(factor in factores_ubicacion) {
    if(factor %in% names(proyecto) && !is.na(proyecto[[factor]])) {
      valores_segmento <- datos_segmento[[factor]]
      percentil <- mean(valores_segmento <= proyecto[[factor]], na.rm = TRUE) * 100
      ubicacion_scores <- c(ubicacion_scores, percentil)
    }
  }
  
  if(length(ubicacion_scores) > 0 && mean(ubicacion_scores) >= 85) {
    diferenciadores$ubicacion <- "Ubicación en top 15% con excelente accesibilidad integral"
  }
  
  # 4. Desarrollador de elite
  if(!is.na(proyecto$proyectos_total) && !is.na(proyecto$absorcion_promedio_dev)) {
    if(proyecto$proyectos_total >= 5 && proyecto$absorcion_promedio_dev >= 4) {
      diferenciadores$desarrollador <- paste0("Desarrollador experimentado (", 
                                              proyecto$proyectos_total, " proyectos, absorción prom: ", 
                                              round(proyecto$absorcion_promedio_dev, 1), ")")
    }
  }
  
  return(diferenciadores)
}

# ---- 17. INTEGRACIÓN CON ANÁLISIS EXISTENTE ----

# 17.1 Actualizar función de análisis principal para incluir fortalezas
analizar_proyecto_4s_completo <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Ejecutar análisis 4S original
  analisis_base <- analizar_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  # Agregar análisis de fortalezas
  cat("\n" , rep("🏆", 30), "\n")
  cat("ANÁLISIS DETALLADO DE FORTALEZAS COMPETITIVAS\n")
  cat(rep("🏆", 30), "\n")
  
  fortalezas_detalle <- generar_reporte_fortalezas(datos, indice_proyecto, nombre_proyecto)
  
  # Diferenciadores únicos
  diferenciadores <- identificar_diferenciadores(datos, indice_proyecto, nombre_proyecto)
  
  if(length(diferenciadores) > 0) {
    cat("\n🎯 DIFERENCIADORES ÚNICOS:\n")
    for(i in 1:length(diferenciadores)) {
      cat("  ", i, ".", diferenciadores[[i]], "\n")
    }
  }
  
  cat("\n", rep("🏆", 30), "\n")
  
  # Retornar análisis combinado
  return(list(
    analisis_4s = analisis_base,
    fortalezas = fortalezas_detalle,
    diferenciadores = diferenciadores
  ))
}

# 17.2 Actualizar dashboard principal para incluir fortalezas
crear_dashboard_proyecto_4s_completo <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Dashboard original (4 paneles)
  dashboard_original <- crear_dashboard_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  # Dashboard de fortalezas (2 paneles)
  dashboard_fortalezas <- crear_dashboard_fortalezas(datos, indice_proyecto, nombre_proyecto)
  
  # Mostrar ambos dashboards
  cat("\n=== DASHBOARD PRINCIPAL 4S ===\n")
  print(dashboard_original)
  
  cat("\n=== DASHBOARD DE FORTALEZAS ===\n") 
  print(dashboard_fortalezas)
  
  return(list(
    dashboard_principal = dashboard_original,
    dashboard_fortalezas = dashboard_fortalezas
  ))
}

# ---- 18. ACTUALIZACIÓN DE EJEMPLOS DE USO ----

# Actualizar la sección 14 del script original para incluir análisis de fortalezas
# Esta sección reemplaza o complementa la sección 14 existente

# 18.1 Definir proyecto a analizar (mismo que antes)
# PROYECTO_SELECCIONADO <- 29  # Ya definido en el script principal

# 18.2 Análisis completo incluyendo fortalezas
cat("\n=== ANÁLISIS COMPLETO CON FORTALEZAS ===\n")

if(PROYECTO_SELECCIONADO <= nrow(datos_segmentados)) {
  proyecto_info <- datos_segmentados[PROYECTO_SELECCIONADO, ]
  
  if(!is.na(proyecto_info$ivu_segmentado) && !is.na(proyecto_info$ivp_segmentado)) {
    
    cat("Analizando proyecto:", proyecto_info$Proyecto, "\n")
    cat("Segmento:", proyecto_info$Segmento, "| NSE:", proyecto_info$nse, "\n")
    
    # Visualizaciones principales (como antes)
    cat("\n1. Creando termómetros y panel 4S...\n")
    termometro_ivu_individual <- crear_termometro_ivu_segmentado(datos_segmentados, PROYECTO_SELECCIONADO)
    print(termometro_ivu_individual)
    
    termometro_ivp_individual <- crear_termometro_ivp_segmentado(datos_segmentados, PROYECTO_SELECCIONADO)
    print(termometro_ivp_individual)
    
    panel_4s_individual <- crear_panel_categorizacion_4s(datos_segmentados, PROYECTO_SELECCIONADO)
    print(panel_4s_individual)
    
    # NUEVAS VISUALIZACIONES DE FORTALEZAS
    cat("\n2. Creando análisis de fortalezas...\n")
    
    # Gráfico de barras de fortalezas
    cat("   a) Gráfico de fortalezas principales...\n")
    grafico_fortalezas <- crear_visualizacion_fortalezas(datos_segmentados, PROYECTO_SELECCIONADO)
    print(grafico_fortalezas)
    
    # Gráfico radar de categorías
    cat("   b) Radar de perfil de fortalezas...\n")
    radar_fortalezas <- crear_radar_fortalezas(datos_segmentados, PROYECTO_SELECCIONADO)
    print(radar_fortalezas)
    
    # Dashboard combinado de fortalezas
    cat("   c) Dashboard integrado de fortalezas...\n")
    dashboard_fortalezas_completo <- crear_dashboard_fortalezas(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # Análisis textual completo
    cat("\n3. Generando análisis completo con fortalezas...\n")
    analisis_completo <- analizar_proyecto_4s_completo(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # Dashboard completo (original + fortalezas)
    cat("\n4. Creando dashboard completo...\n")
    dashboards_completos <- crear_dashboard_proyecto_4s_completo(datos_segmentados, PROYECTO_SELECCIONADO)
    
  } else {
    cat("ERROR: El proyecto seleccionado no tiene datos segmentados válidos.\n")
  }
} else {
  cat("ERROR: Índice de proyecto fuera de rango. Máximo:", nrow(datos_segmentados), "\n")
}

# 18.3 Funciones de uso directo para análisis rápido
cat("\n=== FUNCIONES DE USO RÁPIDO ===\n")
cat("Para análisis rápido de fortalezas de cualquier proyecto:\n\n")

cat("# Análisis de fortalezas específico:\n")
cat("fortalezas <- identificar_fortalezas_proyecto(datos_segmentados, 25)\n")
cat("View(fortalezas)  # Ver tabla completa de percentiles\n\n")

cat("# Visualización rápida de fortalezas:\n") 
cat("crear_visualizacion_fortalezas(datos_segmentados, 25)\n\n")

cat("# Reporte textual de fortalezas:\n")
cat("generar_reporte_fortalezas(datos_segmentados, 25)\n\n")

cat("# Dashboard completo:\n")
cat("crear_dashboard_proyecto_4s_completo(datos_segmentados, 25)\n\n")

cat("# Análisis por nombre:\n")
cat("analizar_proyecto_4s_completo(datos_segmentados, nombre_proyecto = 'Nombre Proyecto')\n\n")

# 18.4 Ejemplo de análisis comparativo entre proyectos
comparar_fortalezas_proyectos <- function(datos, proyecto1, proyecto2) {
  cat("\n=== COMPARACIÓN DE FORTALEZAS ENTRE PROYECTOS ===\n")
  
  # Obtener fortalezas de ambos proyectos
  fortalezas1 <- identificar_fortalezas_proyecto(datos, proyecto1)
  fortalezas2 <- identificar_fortalezas_proyecto(datos, proyecto2)
  
  proy1 <- seleccionar_proyecto_segmentado(datos, proyecto1)
  proy2 <- seleccionar_proyecto_segmentado(datos, proyecto2)
  
  cat("Proyecto 1:", proy1$Proyecto, "(", proy1$Segmento, ")\n")
  cat("Proyecto 2:", proy2$Proyecto, "(", proy2$Segmento, ")\n\n")
  
  # Top 5 fortalezas de cada uno
  cat("🏆 TOP 5 FORTALEZAS PROYECTO 1:\n")
  top5_1 <- head(fortalezas1, 5)
  for(i in 1:nrow(top5_1)) {
    cat("  ", i, ".", top5_1$Variable[i], "- Percentil:", round(top5_1$Percentil[i], 0), "%\n")
  }
  
  cat("\n🏆 TOP 5 FORTALEZAS PROYECTO 2:\n") 
  top5_2 <- head(fortalezas2, 5)
  for(i in 1:nrow(top5_2)) {
    cat("  ", i, ".", top5_2$Variable[i], "- Percentil:", round(top5_2$Percentil[i], 0), "%\n")
  }
  
  cat("\n💡 Usar esta función: comparar_fortalezas_proyectos(datos_segmentados, 15, 25)\n")
}

cat("\n=== ANÁLISIS DE FORTALEZAS IMPLEMENTADO EXITOSAMENTE ===\n")
cat("✅ Identificación automática de fortalezas por percentiles\n")
cat("✅ Visualizaciones de barras y radar para fortalezas\n") 
cat("✅ Reporte textual interpretativo de diferenciadores\n")
cat("✅ Dashboard integrado con análisis 4S + fortalezas\n")
cat("✅ Funciones de comparación entre proyectos\n")
cat("✅ Análisis de factores únicos y diferenciadores\n")

# ---- 19. ANÁLISIS INTEGRADO DE FORTALEZAS Y DEBILIDADES ----
## 19.1 Función para identificar debilidades del proyecto
identificar_debilidades_proyecto <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Reutilizar la función de fortalezas existente pero filtrar por debilidades
  fortalezas_completas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto)
  
  # Filtrar solo las debilidades (percentil <= 30)
  debilidades <- fortalezas_completas %>%
    filter(Percentil <= 30) %>%
    arrange(Percentil) %>%  # Ordenar de menor a mayor percentil
    mutate(
      Categoria_Debilidad = case_when(
        Percentil <= 10 ~ "Crítica",
        Percentil <= 20 ~ "Muy Débil",
        TRUE ~ "Débil"
      )
    )
  
  return(debilidades)
}

## 19.2 Función para crear visualización de debilidades
crear_visualizacion_debilidades <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis de debilidades
  debilidades <- identificar_debilidades_proyecto(datos, indice_proyecto, nombre_proyecto)
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  if(nrow(debilidades) == 0) {
    # Si no hay debilidades significativas, crear gráfico placeholder
    p <- ggplot() +
      geom_text(aes(x = 0.5, y = 0.5, label = "¡Excelente!\nNo se identificaron\ndebilidades significativas"), 
                size = 6, color = "#2C6C66", fontface = "bold") +
      labs(title = paste("⚠️ Áreas de Mejora -", proyecto$Proyecto),
           subtitle = "Proyecto sin debilidades críticas identificadas") +
      theme_void() +
      theme(
        plot.title = element_text(face = "bold", size = 14, color = "#2C6C66", hjust = 0.5),
        plot.subtitle = element_text(size = 11, color = "#68D192", hjust = 0.5)
      )
    return(p)
  }
  
  # Tomar top 12 debilidades para visualización
  top_debilidades <- head(debilidades, 12)
  
  # Crear etiquetas más amigables (reutilizar del código existente)
  etiquetas_variables <- c(
    "absorcion" = "Absorción",
    "ratio_ventas" = "Ratio de Ventas", 
    "eficiencia_comercial" = "Eficiencia Comercial",
    "velocidad_ventas" = "Velocidad Ventas",
    "score_amenidades_total" = "Score Amenidades",
    "num_amenidades" = "Número Amenidades",
    "m2_inv" = "Superficie Inventario",
    "indice_accesibilidad" = "Accesibilidad",
    "accesibilidad_vial" = "Accesibilidad Vial",
    "indice_conveniencia" = "Conveniencia",
    "cerca_parque_relevante" = "Cercanía Parque",
    "dist_to_park" = "Distancia Parque",
    "cercania_hospital" = "Cercanía Hospital",
    "cercania_esc_priv" = "Cercanía Esc. Privada",
    "cercania_universidad" = "Cercanía Universidad",
    "cercania_super" = "Cercanía Supermercado",
    "cantidad_hospital_1km" = "Hospitales 1km",
    "cantidad_esc_priv_1km" = "Esc. Privadas 1km",
    "pob2020_1km" = "Población 1km",
    "competitividad_precio" = "Competitividad Precio",
    "meses_inv" = "Meses en Inventario",
    "meses_mercado" = "Meses en Mercado"
  )
  
  # Aplicar etiquetas
  top_debilidades$Etiqueta <- sapply(top_debilidades$Variable, function(x) {
    if(x %in% names(etiquetas_variables)) etiquetas_variables[x] else x
  })
  
  # Colores por categoría de debilidad
  colores_debilidad <- c(
    "Crítica" = "#C53030",
    "Muy Débil" = "#E53E3E", 
    "Débil" = "#EF6558"
  )
  
  # Crear gráfico de barras horizontales
  p <- ggplot(top_debilidades, aes(x = reorder(Etiqueta, -Percentil), y = Percentil, 
                                   fill = Categoria_Debilidad)) +
    geom_bar(stat = "identity", alpha = 0.8) +
    geom_text(aes(label = paste0(round(Percentil, 0), "%")), 
              hjust = 1.1, size = 3, fontface = "bold", color = "white") +
    scale_fill_manual(values = colores_debilidad, name = "Nivel") +
    coord_flip() +
    labs(title = paste("⚠️ Principales Áreas de Mejora -", proyecto$Proyecto),
         subtitle = paste("Percentiles más bajos vs otros proyectos", proyecto$Segmento),
         x = "Factor", y = "Percentil en el Segmento (%)") +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 14, color = "#C53030"),
      plot.subtitle = element_text(size = 11, color = "#C53030"),
      axis.text.y = element_text(size = 9),
      legend.position = "bottom"
    ) +
    scale_y_continuous(limits = c(0, 35), breaks = seq(0, 30, 10))
  
  return(p)
}

## 19.3 Función para crear gráfico espejo fortalezas vs debilidades
crear_grafico_espejo_fortalezas_debilidades <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener ambos análisis
  fortalezas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto) %>%
    filter(Percentil >= 70) %>%
    head(6)
  
  debilidades <- identificar_debilidades_proyecto(datos, indice_proyecto, nombre_proyecto) %>%
    head(6)
  
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Crear etiquetas amigables
  etiquetas_variables <- c(
    "absorcion" = "Absorción", "score_amenidades_total" = "Score Amenidades",
    "indice_accesibilidad" = "Accesibilidad", "num_amenidades" = "Núm. Amenidades",
    "accesibilidad_vial" = "Accesibilidad Vial", "indice_conveniencia" = "Conveniencia",
    "cercania_hospital" = "Cercanía Hospital", "meses_inv" = "Meses Inventario",
    "competitividad_precio" = "Competitividad", "dist_to_park" = "Dist. Parque"
  )
  
  # Preparar datos para el gráfico espejo
  max_items <- max(nrow(fortalezas), nrow(debilidades), 3)
  
  # Datos de fortalezas (lado positivo)
  datos_fortalezas <- data.frame(
    Orden = 1:max_items,
    Variable = character(max_items),
    Valor = numeric(max_items),
    Tipo = "Fortaleza",
    stringsAsFactors = FALSE
  )
  
  for(i in 1:max_items) {
    if(i <= nrow(fortalezas)) {
      var_name <- fortalezas$Variable[i]
      datos_fortalezas$Variable[i] <- ifelse(var_name %in% names(etiquetas_variables), 
                                             etiquetas_variables[var_name], var_name)
      datos_fortalezas$Valor[i] <- fortalezas$Percentil[i]
    } else {
      datos_fortalezas$Variable[i] <- ""
      datos_fortalezas$Valor[i] <- NA
    }
  }
  
  # Datos de debilidades (lado negativo)
  datos_debilidades <- data.frame(
    Orden = 1:max_items,
    Variable = character(max_items),
    Valor = numeric(max_items),
    Tipo = "Debilidad",
    stringsAsFactors = FALSE
  )
  
  for(i in 1:max_items) {
    if(i <= nrow(debilidades)) {
      var_name <- debilidades$Variable[i]
      datos_debilidades$Variable[i] <- ifelse(var_name %in% names(etiquetas_variables), 
                                              etiquetas_variables[var_name], var_name)
      datos_debilidades$Valor[i] <- -debilidades$Percentil[i]  # Negativo para el espejo
    } else {
      datos_debilidades$Variable[i] <- ""
      datos_debilidades$Valor[i] <- NA
    }
  }
  
  # Combinar datos y filtrar valores válidos
  datos_combinados <- rbind(datos_fortalezas, datos_debilidades) %>%
    filter(!is.na(Valor) & Variable != "")
  
  if(nrow(datos_combinados) == 0) {
    # Si no hay datos, crear gráfico placeholder
    p <- ggplot() +
      geom_text(aes(x = 0.5, y = 0.5, label = "Datos insuficientes\npara análisis espejo"), 
                size = 6, color = "#6c757d") +
      labs(title = paste("⚖️ Análisis Espejo -", proyecto$Proyecto)) +
      theme_void()
    return(p)
  }
  
  # Crear gráfico espejo
  colores_espejo <- c("Fortaleza" = "#68D192", "Debilidad" = "#EF6558")
  
  p <- ggplot(datos_combinados, aes(x = reorder(Variable, abs(Valor)), y = Valor, fill = Tipo)) +
    geom_bar(stat = "identity", alpha = 0.8, width = 0.7) +
    geom_hline(yintercept = 0, color = "gray40", linewidth = 1) +
    
    # Etiquetas de valores
    geom_text(aes(label = paste0(abs(round(Valor)), "%")), 
              hjust = ifelse(datos_combinados$Valor > 0, -0.1, 1.1), 
              size = 3.5, fontface = "bold", color = "gray20") +
    
    scale_fill_manual(values = colores_espejo, name = "") +
    coord_flip() +
    
    labs(title = paste("⚖️ Análisis Espejo: Fortalezas vs Debilidades"),
         subtitle = paste("Proyecto:", proyecto$Proyecto, "|", proyecto$Segmento),
         x = "", y = "Percentil en Segmento (%)") +
    
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16, color = "#2C6C66", hjust = 0.5),
      plot.subtitle = element_text(size = 12, color = "#2C6C66", hjust = 0.5),
      axis.text.y = element_text(size = 10),
      axis.text.x = element_text(size = 9),
      legend.position = "bottom",
      legend.title = element_text(face = "bold"),
      panel.grid.major.y = element_blank(),
      panel.grid.minor = element_blank()
    ) +
    
    scale_y_continuous(
      limits = c(-100, 100),
      breaks = seq(-100, 100, 25),
      labels = function(x) paste0(abs(x), "%")
    ) +
    
    # Anotaciones explicativas
    annotate("text", x = max_items * 0.7, y = 75, 
             label = "FORTALEZAS\n(Percentil ≥70)", 
             fontface = "bold", color = "#2C6C66", size = 3.5) +
    annotate("text", x = max_items * 0.7, y = -75, 
             label = "DEBILIDADES\n(Percentil ≤30)", 
             fontface = "bold", color = "#C53030", size = 3.5)
  
  return(p)
}

## 19.4 Función para crear dashboard completo con fortalezas y debilidades
crear_dashboard_fortalezas_debilidades_integrado <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Obtener información del proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Crear visualizaciones individuales
  grafico_fortalezas <- crear_visualizacion_fortalezas(datos, indice_proyecto, nombre_proyecto)
  grafico_debilidades <- crear_visualizacion_debilidades(datos, indice_proyecto, nombre_proyecto)
  grafico_espejo <- crear_grafico_espejo_fortalezas_debilidades(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener estadísticas para panel de resumen
  fortalezas <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto) %>%
    filter(Percentil >= 70)
  debilidades <- identificar_debilidades_proyecto(datos, indice_proyecto, nombre_proyecto)
  
  # Crear panel de resumen estadístico
  num_fortalezas <- nrow(fortalezas)
  num_debilidades <- nrow(debilidades)
  
  # Calcular score general (promedio de todos los percentiles)
  todos_percentiles <- identificar_fortalezas_proyecto(datos, indice_proyecto, nombre_proyecto)
  score_general <- round(mean(todos_percentiles$Percentil, na.rm = TRUE), 1)
  
  # Determinar balance competitivo
  balance <- case_when(
    num_fortalezas >= 5 & num_debilidades <= 2 ~ "DOMINANTE",
    num_fortalezas >= 3 & num_debilidades <= 3 ~ "COMPETITIVO",
    num_fortalezas >= 2 & num_debilidades <= 5 ~ "EQUILIBRADO",
    num_fortalezas <= 2 & num_debilidades >= 3 ~ "DESAFIANTE",
    TRUE ~ "NEUTRAL"
  )
  
  # Crear panel de resumen
  panel_resumen <- ggplot() +
    geom_rect(aes(xmin = 0.05, xmax = 0.95, ymin = 0.1, ymax = 0.9), 
              fill = "#f8f9fa", color = "#2C6C66", linewidth = 2, alpha = 0.8) +
    
    # Título del panel
    geom_text(aes(x = 0.5, y = 0.8, label = "📊 RESUMEN COMPETITIVO"),
              size = 6, fontface = "bold", color = "#2C6C66") +
    
    # Estadísticas principales
    geom_text(aes(x = 0.25, y = 0.65, label = paste0("🏆 FORTALEZAS\n", num_fortalezas)),
              size = 5, fontface = "bold", color = "#68D192") +
    geom_text(aes(x = 0.75, y = 0.65, label = paste0("⚠️ DEBILIDADES\n", num_debilidades)),
              size = 5, fontface = "bold", color = "#EF6558") +
    
    # Score general
    geom_text(aes(x = 0.5, y = 0.5, label = paste0("📈 SCORE GENERAL\n", score_general, "%")),
              size = 5, fontface = "bold", color = "#2C6C66") +
    
    # Balance competitivo
    geom_text(aes(x = 0.5, y = 0.35, label = paste0("⚖️ BALANCE: ", balance)),
              size = 4, fontface = "bold", 
              color = case_when(
                balance == "DOMINANTE" ~ "#2C6C66",
                balance == "COMPETITIVO" ~ "#68D192",
                balance == "EQUILIBRADO" ~ "#F4A261",
                balance == "DESAFIANTE" ~ "#E76F51",
                TRUE ~ "#6c757d"
              )) +
    
    # Información del proyecto
    geom_text(aes(x = 0.5, y = 0.2, 
                  label = paste0(proyecto$Proyecto, " | ", proyecto$Segmento, " | NSE: ", proyecto$nse)),
              size = 3.5, color = "#6c757d") +
    
    theme_void() +
    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
  
  # Combinar en dashboard usando grid.arrange
  dashboard <- grid.arrange(
    grafico_espejo,                           # Fila 1: Gráfico espejo completo
    arrangeGrob(grafico_fortalezas, grafico_debilidades, ncol = 2),  # Fila 2: Fortalezas y debilidades
    panel_resumen,                            # Fila 3: Panel de resumen
    ncol = 1, nrow = 3,
    heights = c(2, 1.5, 0.8),
    top = textGrob(paste("🎯 Dashboard Integral de Fortalezas y Debilidades -", proyecto$Proyecto), 
                   gp = gpar(fontsize = 18, fontface = "bold", col = "#2C6C66"))
  )
  
  return(dashboard)
}

## 19.5 Función para reporte textual integrado
generar_reporte_fortalezas_debilidades <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis de fortalezas (función existente)
  fortalezas_detalle <- generar_reporte_fortalezas(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener análisis de debilidades
  debilidades <- identificar_debilidades_proyecto(datos, indice_proyecto, nombre_proyecto)
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  cat("\n" , rep("⚖️", 30), "\n")
  cat("ANÁLISIS INTEGRAL DE DEBILIDADES\n")
  cat(rep("⚖️", 30), "\n")
  
  if(nrow(debilidades) > 0) {
    cat("\n⚠️ DEBILIDADES IDENTIFICADAS (Percentil ≤30%):\n")
    
    # Agrupar por categoría de debilidad
    criticas <- debilidades %>% filter(Categoria_Debilidad == "Crítica")
    muy_debiles <- debilidades %>% filter(Categoria_Debilidad == "Muy Débil")
    debiles <- debilidades %>% filter(Categoria_Debilidad == "Débil")
    
    if(nrow(criticas) > 0) {
      cat("\n🚨 CRÍTICAS (Bottom 10%):\n")
      for(i in 1:nrow(criticas)) {
        cat("  •", criticas$Variable[i], "- Percentil:", 
            round(criticas$Percentil[i], 0), "%\n")
      }
    }
    
    if(nrow(muy_debiles) > 0) {
      cat("\n❌ MUY DÉBILES (Bottom 20%):\n")
      for(i in 1:nrow(muy_debiles)) {
        cat("  •", muy_debiles$Variable[i], "- Percentil:", 
            round(muy_debiles$Percentil[i], 0), "%\n")
      }
    }
    
    if(nrow(debiles) > 0) {
      cat("\n⚡ DÉBILES (Bottom 30%):\n")
      for(i in 1:nrow(debiles)) {
        cat("  •", debiles$Variable[i], "- Percentil:", 
            round(debiles$Percentil[i], 0), "%\n")
      }
    }
    
    # Recomendaciones específicas
    cat("\n🔧 RECOMENDACIONES DE MEJORA:\n")
    
    # Análisis por tipo de debilidad
    if(any(grepl("amenidades|num_amenidades", debilidades$Variable))) {
      cat("🏢 AMENIDADES: Considerar ampliar oferta de amenidades para competir mejor\n")
    }
    
    if(any(grepl("absorcion|ratio_ventas|eficiencia", debilidades$Variable))) {
      cat("📈 VENTAS: Revisar estrategia comercial y pricing para mejorar absorción\n")
    }
    
    if(any(grepl("accesibilidad|conveniencia|cercania", debilidades$Variable))) {
      cat("📍 UBICACIÓN: Compensar limitaciones de ubicación con propuesta de valor\n")
    }
    
    if(any(grepl("meses_inv|meses_mercado", debilidades$Variable))) {
      cat("⏱️ TIEMPO: Acelerar comercialización y reducir tiempo en mercado\n")
    }
    
  } else {
    cat("\n✅ ¡EXCELENTE POSICIÓN COMPETITIVA!\n")
    cat("No se identificaron debilidades significativas (percentil ≤30%)\n")
    cat("El proyecto mantiene un rendimiento sólido en todos los factores analizados.\n")
  }
  
  cat("\n", rep("⚖️", 30), "\n")
  
  return(debilidades)
}

## 19.6 Actualización de función de análisis completo
analizar_proyecto_4s_fortalezas_debilidades <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Ejecutar análisis 4S base (función existente)
  analisis_base <- analizar_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  # Agregar análisis de fortalezas (función existente)
  cat("\n" , rep("🏆", 30), "\n")
  cat("ANÁLISIS DETALLADO DE FORTALEZAS COMPETITIVAS\n")
  cat(rep("🏆", 30), "\n")
  
  fortalezas_detalle <- generar_reporte_fortalezas(datos, indice_proyecto, nombre_proyecto)
  
  # Agregar análisis de debilidades (nueva función)
  debilidades_detalle <- generar_reporte_fortalezas_debilidades(datos, indice_proyecto, nombre_proyecto)
  
  # Diferenciadores únicos (función existente)
  diferenciadores <- identificar_diferenciadores(datos, indice_proyecto, nombre_proyecto)
  
  if(length(diferenciadores) > 0) {
    cat("\n🎯 DIFERENCIADORES ÚNICOS:\n")
    for(i in 1:length(diferenciadores)) {
      cat("  ", i, ".", diferenciadores[[i]], "\n")
    }
  }
  
  # Balance general
  num_fortalezas <- nrow(fortalezas_detalle)
  num_debilidades <- nrow(debilidades_detalle)
  
  cat("\n📊 BALANCE COMPETITIVO GENERAL:\n")
  cat("- Fortalezas identificadas:", num_fortalezas, "\n")
  cat("- Debilidades identificadas:", num_debilidades, "\n")
  
  if(num_fortalezas > num_debilidades) {
    cat("- Estrategia recomendada: 📈 OFENSIVA - Capitalizar ventajas competitivas\n")
  } else if(num_debilidades > num_fortalezas) {
    cat("- Estrategia recomendada: 🛡️ DEFENSIVA - Corregir debilidades críticas\n")
  } else {
    cat("- Estrategia recomendada: ⚖️ EQUILIBRADA - Mantener fortalezas y mejorar debilidades\n")
  }
  
  cat("\n", rep("🎯", 30), "\n")
  
  # Retornar análisis combinado
  return(list(
    analisis_4s = analisis_base,
    fortalezas = fortalezas_detalle,
    debilidades = debilidades_detalle,
    diferenciadores = diferenciadores,
    balance = list(
      num_fortalezas = num_fortalezas,
      num_debilidades = num_debilidades
    )
  ))
}

## 19.7 Actualización de dashboard principal
crear_dashboard_4s_fortalezas_debilidades <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Dashboard 4S original (funciones existentes)
  dashboard_original <- crear_dashboard_proyecto_4s(datos, indice_proyecto, nombre_proyecto)
  
  # Dashboard integrado de fortalezas y debilidades
  dashboard_integrado <- crear_dashboard_fortalezas_debilidades_integrado(datos, indice_proyecto, nombre_proyecto)
  
  # Mostrar ambos dashboards
  cat("\n=== DASHBOARD PRINCIPAL 4S ===\n")
  print(dashboard_original)
  
  cat("\n=== DASHBOARD INTEGRADO DE FORTALEZAS Y DEBILIDADES ===\n") 
  print(dashboard_integrado)
  
  return(list(
    dashboard_principal = dashboard_original,
    dashboard_integrado = dashboard_integrado
  ))
}

## 19.8 Actualización del ejemplo de uso final

# Actualizar la sección 18 del script para incluir el nuevo análisis
cat("\n=== ANÁLISIS COMPLETO CON FORTALEZAS Y DEBILIDADES (INTEGRADO) ===\n")

if(PROYECTO_SELECCIONADO <= nrow(datos_segmentados)) {
  proyecto_info <- datos_segmentados[PROYECTO_SELECCIONADO, ]
  
  if(!is.na(proyecto_info$ivu_segmentado) && !is.na(proyecto_info$ivp_segmentado)) {
    
    cat("Analizando proyecto:", proyecto_info$Proyecto, "\n")
    cat("Segmento:", proyecto_info$Segmento, "| NSE:", proyecto_info$nse, "\n")
    
    # Análisis textual completo (4S + Fortalezas + Debilidades)
    cat("\n1. Generando análisis completo con fortalezas y debilidades...\n")
    analisis_completo_integrado <- analizar_proyecto_4s_fortalezas_debilidades(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # Dashboard completo (Original + Integrado)
    cat("\n2. Creando dashboards integrados...\n")
    dashboards_integrados <- crear_dashboard_4s_fortalezas_debilidades(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # Visualizaciones individuales adicionales
    cat("\n3. Creando visualizaciones específicas...\n")
    
    # a) Gráfico espejo específico
    cat("   a) Gráfico espejo fortalezas vs debilidades...\n")
    grafico_espejo_especifico <- crear_grafico_espejo_fortalezas_debilidades(datos_segmentados, PROYECTO_SELECCIONADO)
    print(grafico_espejo_especifico)
    
    # b) Visualización de debilidades específica
    cat("   b) Análisis específico de debilidades...\n")
    grafico_debilidades_especifico <- crear_visualizacion_debilidades(datos_segmentados, PROYECTO_SELECCIONADO)
    print(grafico_debilidades_especifico)
    
  } else {
    cat("ERROR: El proyecto seleccionado no tiene datos segmentados válidos.\n")
  }
} else {
  cat("ERROR: Índice de proyecto fuera de rango. Máximo:", nrow(datos_segmentados), "\n")
}

## 19.9 Funciones de uso rápido
cat("\n=== FUNCIONES DE USO RÁPIDO INTEGRADAS ===\n")
cat("Para análisis rápido de fortalezas y debilidades:\n\n")

cat("# Análisis completo 4S + fortalezas + debilidades:\n")
cat("analizar_proyecto_4s_fortalezas_debilidades(datos_segmentados, 25)\n\n")

cat("# Dashboard completo integrado:\n") 
cat("crear_dashboard_4s_fortalezas_debilidades(datos_segmentados, 25)\n\n")

cat("# Solo gráfico espejo:\n")
cat("crear_grafico_espejo_fortalezas_debilidades(datos_segmentados, 25)\n\n")

cat("# Solo análisis de debilidades:\n")
cat("crear_visualizacion_debilidades(datos_segmentados, 25)\n\n")

cat("# Dashboard integrado de fortalezas y debilidades:\n")
cat("crear_dashboard_fortalezas_debilidades_integrado(datos_segmentados, 25)\n\n")

## 19.10 Resumen de integración
cat("\n", rep("✅", 40), "\n")
cat("INTEGRACIÓN COMPLETADA - ANÁLISIS DE FORTALEZAS Y DEBILIDADES\n")
cat(rep("✅", 40), "\n")

cat("\n🎯 NUEVAS FUNCIONES INTEGRADAS:\n")
cat("19.1 identificar_debilidades_proyecto() - Identifica áreas de mejora\n")
cat("19.2 crear_visualizacion_debilidades() - Gráfico de barras de debilidades\n") 
cat("19.3 crear_grafico_espejo_fortalezas_debilidades() - Visualización espejo\n")
cat("19.4 crear_dashboard_fortalezas_debilidades_integrado() - Dashboard completo\n")
cat("19.5 generar_reporte_fortalezas_debilidades() - Reporte textual de debilidades\n")
cat("19.6 analizar_proyecto_4s_fortalezas_debilidades() - Análisis completo integrado\n")
cat("19.7 crear_dashboard_4s_fortalezas_debilidades() - Dashboard principal expandido\n")

cat("\n💡 CARACTERÍSTICAS DE LA INTEGRACIÓN:\n")
cat("✅ Totalmente compatible con funciones 4S existentes\n")
cat("✅ Mantiene el mismo estilo de visualización (ggplot2 + grid.arrange)\n")
cat("✅ Reutiliza funciones existentes donde es posible\n")
cat("✅ Agrega análisis de debilidades sin modificar código existente\n")
cat("✅ Proporciona visualización espejo innovadora\n")
cat("✅ Incluye recomendaciones estratégicas específicas\n")
cat("✅ Dashboard integrado con resumen ejecutivo\n")

cat("\n🚀 READY TO USE - Funciones listas para usar en el script!\n")
cat(rep("✅", 40), "\n")

# ---- SECCIÓN 20. MEJORA DE CÁLCULO DE PERCENTILES - VERSIÓN REALISTA ----
## 20.1 Función mejorada para calcular percentiles realistas
calcular_percentil_mejorado <- function(valor_proyecto, valores_segmento, variable_name) {
  # Filtrar valores válidos
  valores_validos <- valores_segmento[!is.na(valores_segmento)]
  
  if(length(valores_validos) <= 2) {
    return(50)  # Si hay muy pocos datos, devolver neutral
  }
  
  # Identificar variables binarias o categóricas
  variables_binarias <- c(
    "cerca_avenida_principal", "alto_entorno_laboral", "alta_densidad_comercial",
    "cerca_parque_relevante", "alta_densidad_educativa", "alto_entorno_laboral",
    "cercania_hospital", "cercania_esc_priv", "cercania_universidad", 
    "cercania_super", "cercania_tienda_dept", "cercania_avenida"
  )
  
  # Variables donde menor es mejor (invertir percentil)
  variables_menor_mejor <- c(
    "dist_to_park", "dist_to_relevant_park", "dist_hospital", "dist_esc_priv",
    "dist_universidad", "dist_super", "dist_restau", "dist_oficina", 
    "dist_tienda_dept", "meses_inv", "meses_mercado"
  )
  
  # Calcular percentil base
  if(variable_name %in% variables_menor_mejor) {
    # Para variables donde menor es mejor
    percentil_base <- mean(valores_validos >= valor_proyecto) * 100
  } else {
    # Para variables donde mayor es mejor
    percentil_base <- mean(valores_validos <= valor_proyecto) * 100
  }
  
  # MEJORAS PARA EVITAR TANTOS 100%:
  
  # 1. Si es variable binaria, ajustar percentiles
  if(variable_name %in% variables_binarias) {
    if(percentil_base >= 90) {
      # Reducir percentiles extremos en variables binarias
      percentil_base <- 85 + (percentil_base - 90) * 0.5
    }
  }
  
  # 2. Suavizar percentiles extremos (90-100%)
  if(percentil_base >= 95) {
    # Los percentiles 95-100% se comprimen a 85-95%
    percentil_base <- 85 + (percentil_base - 95) * 2
  } else if(percentil_base >= 90) {
    # Los percentiles 90-95% se comprimen ligeramente
    percentil_base <- 85 + (percentil_base - 90) * 1.5
  }
  
  # 3. Añadir variabilidad basada en el rango de valores
  rango_valores <- max(valores_validos) - min(valores_validos)
  if(rango_valores == 0) {
    # Si todos los valores son iguales, devolver percentil medio
    return(50)
  }
  
  # 4. Ajuste por tamaño de muestra
  n_proyectos <- length(valores_validos)
  if(n_proyectos < 10) {
    # En segmentos pequeños, reducir percentiles extremos
    if(percentil_base >= 85) {
      factor_reduccion <- 0.8 + (n_proyectos / 10) * 0.2
      percentil_base <- percentil_base * factor_reduccion
    }
  }
  
  # 5. Limitar percentiles máximos realistas
  percentil_final <- min(percentil_base, 95)  # Máximo 95% en lugar de 100%
  percentil_final <- max(percentil_final, 5)   # Mínimo 5% en lugar de 0%
  
  return(round(percentil_final, 1))
}

## 20.2 Función mejorada para identificar fortalezas realistas
identificar_fortalezas_realistas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Seleccionar proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener datos del mismo segmento
  datos_segmento <- datos %>% 
    filter(Segmento == proyecto$Segmento) %>%
    filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado))
  
  # Variables para análisis (excluir algunas binarias problemáticas)
  variables_analisis <- c(
    # Performance Comercial (valores continuos)
    "absorcion", "ratio_ventas", "eficiencia_comercial", "velocidad_ventas",
    
    # Amenidades (valores continuos) 
    "score_amenidades_total", "num_amenidades", "m2_inv",
    
    # Índices continuos
    "indice_accesibilidad", "accesibilidad_vial", "indice_conveniencia",
    "ivu", "ivp_segmentado", "potencial_inversion",
    
    # Distancias (menor es mejor)
    "dist_to_park", "dist_to_relevant_park",
    
    # Cantidades (valores continuos)
    "cantidad_hospital_1km", "cantidad_esc_priv_1km", "cantidad_super_1km", 
    "cantidad_restau_1km", "cantidad_oficina_1km",
    
    # Demográficas (valores continuos)
    "pob2020_1km", "hogares2020_1km",
    
    # Precio y competitividad
    "competitividad_precio", "propuesta_valor_v2", "p_m2"
  )
  
  # Filtrar solo variables existentes
  variables_existentes <- intersect(variables_analisis, names(datos_segmento))
  
  # Calcular percentiles mejorados
  resultados <- data.frame(
    Variable = character(0),
    Valor_Proyecto = numeric(0),
    Percentil = numeric(0),
    Promedio_Segmento = numeric(0),
    Categoria_Fortaleza = character(0),
    Tipo_Analisis = character(0),
    stringsAsFactors = FALSE
  )
  
  for(var in variables_existentes) {
    valor_proyecto <- proyecto[[var]]
    
    if(!is.na(valor_proyecto)) {
      valores_segmento <- datos_segmento[[var]]
      valores_validos <- valores_segmento[!is.na(valores_segmento)]
      
      if(length(valores_validos) > 2) {
        # Usar función mejorada de percentiles
        percentil <- calcular_percentil_mejorado(valor_proyecto, valores_validos, var)
        promedio <- mean(valores_validos, na.rm = TRUE)
        
        # Categorizar con umbrales más estrictos
        categoria <- case_when(
          percentil >= 85 ~ "Excepcional",
          percentil >= 75 ~ "Muy Fuerte", 
          percentil >= 65 ~ "Fuerte",
          percentil >= 45 ~ "Promedio",
          percentil >= 25 ~ "Débil",
          TRUE ~ "Muy Débil"
        )
        
        # Clasificar tipo con umbrales ajustados
        tipo_analisis <- case_when(
          percentil >= 75 ~ "Fortaleza",    # Era 70, ahora 75
          percentil <= 25 ~ "Debilidad",    # Era 30, ahora 25
          TRUE ~ "Neutral"
        )
        
        resultados <- rbind(resultados, data.frame(
          Variable = var,
          Valor_Proyecto = valor_proyecto,
          Percentil = percentil,
          Promedio_Segmento = promedio,
          Categoria_Fortaleza = categoria,
          Tipo_Analisis = tipo_analisis,
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  
  # Separar fortalezas y debilidades
  fortalezas <- resultados %>% 
    filter(Tipo_Analisis == "Fortaleza") %>%
    arrange(desc(Percentil))
  
  debilidades <- resultados %>% 
    filter(Tipo_Analisis == "Debilidad") %>%
    arrange(Percentil)
  
  return(list(
    completo = resultados,
    fortalezas = fortalezas,
    debilidades = debilidades,
    proyecto = proyecto$Proyecto,
    segmento = proyecto$Segmento
  ))
}

## 20.3 Función para crear gráfico espejo mejorado
crear_grafico_espejo_mejorado <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis con percentiles mejorados
  analisis <- identificar_fortalezas_realistas(datos, indice_proyecto, nombre_proyecto)
  
  # Seleccionar fortalezas y debilidades balanceadas
  fortalezas <- head(analisis$fortalezas, 6)
  debilidades <- head(analisis$debilidades, 6)
  
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Crear etiquetas amigables
  etiquetas_variables <- c(
    "absorcion" = "Absorción", "score_amenidades_total" = "Score Amenidades",
    "indice_accesibilidad" = "Accesibilidad", "num_amenidades" = "Núm. Amenidades",
    "accesibilidad_vial" = "Accesibilidad Vial", "indice_conveniencia" = "Conveniencia",
    "ivu" = "IVU", "ivp_segmentado" = "IVP Segmentado",
    "cantidad_hospital_1km" = "Hospitales 1km", "cantidad_super_1km" = "Supermercados 1km",
    "pob2020_1km" = "Población 1km", "competitividad_precio" = "Competitividad",
    "dist_to_park" = "Dist. Parque", "propuesta_valor_v2" = "Propuesta Valor",
    "p_m2" = "Precio m²", "potencial_inversion" = "Potencial Inversión"
  )
  
  # Preparar datos para gráfico espejo
  max_items <- max(nrow(fortalezas), nrow(debilidades), 3)
  
  # Crear estructura de datos balanceada
  datos_visualizacion <- data.frame(
    Variable = character(0),
    Valor = numeric(0),
    Tipo = character(0),
    stringsAsFactors = FALSE
  )
  
  # Agregar fortalezas
  if(nrow(fortalezas) > 0) {
    for(i in 1:min(nrow(fortalezas), 6)) {
      var_name <- fortalezas$Variable[i]
      etiqueta <- ifelse(var_name %in% names(etiquetas_variables), 
                         etiquetas_variables[var_name], var_name)
      
      datos_visualizacion <- rbind(datos_visualizacion, data.frame(
        Variable = etiqueta,
        Valor = fortalezas$Percentil[i],
        Tipo = "Fortaleza",
        stringsAsFactors = FALSE
      ))
    }
  }
  
  # Agregar debilidades  
  if(nrow(debilidades) > 0) {
    for(i in 1:min(nrow(debilidades), 6)) {
      var_name <- debilidades$Variable[i]
      etiqueta <- ifelse(var_name %in% names(etiquetas_variables), 
                         etiquetas_variables[var_name], var_name)
      
      datos_visualizacion <- rbind(datos_visualizacion, data.frame(
        Variable = etiqueta,
        Valor = -debilidades$Percentil[i],  # Negativo para espejo
        Tipo = "Debilidad",
        stringsAsFactors = FALSE
      ))
    }
  }
  
  if(nrow(datos_visualizacion) == 0) {
    # Gráfico placeholder si no hay datos
    p <- ggplot() +
      geom_text(aes(x = 0.5, y = 0.5, label = "Perfil equilibrado\nSin fortalezas o debilidades extremas"), 
                size = 6, color = "#6c757d") +
      labs(title = paste("⚖️ Análisis Equilibrado -", proyecto$Proyecto),
           subtitle = "Percentiles ajustados - Sin sesgos extremos") +
      theme_void()
    return(p)
  }
  
  # Crear gráfico espejo con datos realistas
  colores_espejo <- c("Fortaleza" = "#68D192", "Debilidad" = "#EF6558")
  
  p <- ggplot(datos_visualizacion, aes(x = reorder(Variable, abs(Valor)), y = Valor, fill = Tipo)) +
    geom_bar(stat = "identity", alpha = 0.8, width = 0.7) +
    geom_hline(yintercept = 0, color = "gray40", linewidth = 1) +
    
    # Etiquetas de valores (sin %)
    geom_text(aes(label = paste0(abs(round(Valor)), "%")), 
              hjust = ifelse(datos_visualizacion$Valor > 0, -0.1, 1.1), 
              size = 3.5, fontface = "bold", color = "gray20") +
    
    scale_fill_manual(values = colores_espejo, name = "") +
    coord_flip() +
    
    labs(title = "⚖️ Análisis Equilibrado: Fortalezas vs Debilidades",
         subtitle = paste("Proyecto:", proyecto$Proyecto, "| Percentiles ajustados sin sesgos"),
         x = "", y = "Percentil en Segmento (%)") +
    
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16, color = "#2C6C66", hjust = 0.5),
      plot.subtitle = element_text(size = 12, color = "#2C6C66", hjust = 0.5),
      axis.text.y = element_text(size = 10),
      axis.text.x = element_text(size = 9),
      legend.position = "bottom",
      panel.grid.major.y = element_blank(),
      panel.grid.minor = element_blank()
    ) +
    
    scale_y_continuous(
      limits = c(-95, 95),  # Límites ajustados
      breaks = seq(-80, 80, 20),
      labels = function(x) paste0(abs(x), "%")
    ) +
    
    # Anotaciones actualizadas
    annotate("text", x = max_items * 0.7, y = 70, 
             label = "FORTALEZAS\n(Percentil ≥75)", 
             fontface = "bold", color = "#2C6C66", size = 3.5) +
    annotate("text", x = max_items * 0.7, y = -70, 
             label = "DEBILIDADES\n(Percentil ≤25)", 
             fontface = "bold", color = "#C53030", size = 3.5)
  
  return(p)
}

## 20.4 Actualizar función de debilidades con percentiles mejorados
identificar_debilidades_realistas <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Usar la función de fortalezas realistas y filtrar debilidades
  analisis_completo <- identificar_fortalezas_realistas(datos, indice_proyecto, nombre_proyecto)
  
  # Filtrar solo las debilidades con umbrales ajustados
  debilidades <- analisis_completo$debilidades %>%
    mutate(
      Categoria_Debilidad = case_when(
        Percentil <= 10 ~ "Crítica",
        Percentil <= 20 ~ "Muy Débil", 
        TRUE ~ "Débil"
      )
    )
  
  return(debilidades)
}

## 20.5 Función para crear dashboard con percentiles mejorados
crear_dashboard_percentiles_mejorados <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  # Obtener información del proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Análisis con percentiles mejorados
  analisis_mejorado <- identificar_fortalezas_realistas(datos, indice_proyecto, nombre_proyecto)
  
  # Crear gráfico espejo mejorado
  grafico_espejo_mejorado <- crear_grafico_espejo_mejorado(datos, indice_proyecto, nombre_proyecto)
  
  # Estadísticas actualizadas
  num_fortalezas <- nrow(analisis_mejorado$fortalezas)
  num_debilidades <- nrow(analisis_mejorado$debilidades)
  score_promedio <- round(mean(analisis_mejorado$completo$Percentil, na.rm = TRUE), 1)
  
  # Determinar balance realista
  balance <- case_when(
    score_promedio >= 70 & num_fortalezas >= 4 ~ "COMPETITIVO FUERTE",
    score_promedio >= 60 & num_fortalezas >= 2 ~ "COMPETITIVO",
    score_promedio >= 50 ~ "EQUILIBRADO",
    score_promedio >= 40 ~ "DESAFIANTE",
    TRUE ~ "REQUIERE MEJORAS"
  )
  
  # Crear panel de resumen mejorado
  panel_resumen_mejorado <- ggplot() +
    geom_rect(aes(xmin = 0.05, xmax = 0.95, ymin = 0.1, ymax = 0.9), 
              fill = "#f8f9fa", color = "#2C6C66", linewidth = 2, alpha = 0.8) +
    
    geom_text(aes(x = 0.5, y = 0.8, label = "📊 ANÁLISIS REALISTA SIN SESGOS"),
              size = 5.5, fontface = "bold", color = "#2C6C66") +
    
    # Estadísticas balanceadas
    geom_text(aes(x = 0.25, y = 0.65, label = paste0("🏆 FORTALEZAS\n", num_fortalezas, " (≥75%)")),
              size = 4.5, fontface = "bold", color = "#68D192") +
    geom_text(aes(x = 0.75, y = 0.65, label = paste0("⚠️ DEBILIDADES\n", num_debilidades, " (≤25%)")),
              size = 4.5, fontface = "bold", color = "#EF6558") +
    
    # Score promedio realista
    geom_text(aes(x = 0.5, y = 0.5, label = paste0("📈 SCORE PROMEDIO\n", score_promedio, "%")),
              size = 4.5, fontface = "bold", color = "#2C6C66") +
    
    # Balance realista
    geom_text(aes(x = 0.5, y = 0.35, label = paste0("⚖️ POSICIÓN: ", balance)),
              size = 4, fontface = "bold", 
              color = case_when(
                balance == "COMPETITIVO FUERTE" ~ "#2C6C66",
                balance == "COMPETITIVO" ~ "#68D192",
                balance == "EQUILIBRADO" ~ "#F4A261",
                balance == "DESAFIANTE" ~ "#E76F51",
                TRUE ~ "#C53030"
              )) +
    
    # Nota sobre mejoras
    geom_text(aes(x = 0.5, y = 0.2, 
                  label = "Percentiles ajustados para evitar sesgos extremos\nRango realista: 5% - 95%"),
              size = 3, color = "#6c757d", style = "italic") +
    
    theme_void() +
    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
  
  # Dashboard combinado
  dashboard <- grid.arrange(
    grafico_espejo_mejorado,                  # Gráfico espejo mejorado
    panel_resumen_mejorado,                   # Panel de resumen
    ncol = 1, nrow = 2,
    heights = c(2.5, 1),
    top = textGrob(paste("🎯 Análisis Equilibrado sin Sesgos -", proyecto$Proyecto), 
                   gp = gpar(fontsize = 18, fontface = "bold", col = "#2C6C66"))
  )
  
  return(dashboard)
}

## 20.6 Reporte con percentiles mejorados
generar_reporte_percentiles_mejorados <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  analisis <- identificar_fortalezas_realistas(datos, indice_proyecto, nombre_proyecto)
  
  cat("\n", rep("🎯", 40), "\n")
  cat("REPORTE CON PERCENTILES MEJORADOS (SIN SESGOS)\n")
  cat(rep("🎯", 40), "\n")
  
  cat("\n📊 PROYECTO:", analisis$proyecto, "\n")
  cat("🏠 SEGMENTO:", analisis$segmento, "\n")
  
  num_fortalezas <- nrow(analisis$fortalezas)
  num_debilidades <- nrow(analisis$debilidades)
  score_promedio <- round(mean(analisis$completo$Percentil, na.rm = TRUE), 1)
  
  cat("\n📈 ANÁLISIS EQUILIBRADO:\n")
  cat("- Fortalezas identificadas (≥75%):", num_fortalezas, "\n")
  cat("- Debilidades identificadas (≤25%):", num_debilidades, "\n") 
  cat("- Score competitivo promedio:", score_promedio, "%\n")
  cat("- Rango de percentiles: 5% - 95% (realista)\n")
  
  if(num_fortalezas > 0) {
    cat("\n🏆 FORTALEZAS PRINCIPALES (sin sesgos):\n")
    top_fortalezas <- head(analisis$fortalezas, 5)
    for(i in 1:nrow(top_fortalezas)) {
      cat("  ", i, ".", top_fortalezas$Variable[i], 
          "- Percentil:", round(top_fortalezas$Percentil[i], 0), 
          "% (", top_fortalezas$Categoria_Fortaleza[i], ")\n")
    }
  }
  
  if(num_debilidades > 0) {
    cat("\n⚠️ DEBILIDADES PRINCIPALES:\n")
    top_debilidades <- head(analisis$debilidades, 5)
    for(i in 1:nrow(top_debilidades)) {
      cat("  ", i, ".", top_debilidades$Variable[i], 
          "- Percentil:", round(top_debilidades$Percentil[i], 0), "%\n")
    }
  }
  
  cat("\n✅ MEJORAS IMPLEMENTADAS:\n")
  cat("- Eliminación de variables binarias problemáticas\n")
  cat("- Suavizado de percentiles extremos (90-100%)\n")
  cat("- Ajuste por tamaño de segmento\n")
  cat("- Umbrales más estrictos para fortalezas (≥75%)\n")
  cat("- Máximo realista de 95% en lugar de 100%\n")
  
  cat("\n", rep("🎯", 40), "\n")
  
  return(analisis)
}

## 20.7 Ejemplo de uso con percentiles mejorados
cat("\n=== ANÁLISIS CON PERCENTILES MEJORADOS (SIN SESGOS) ===\n")

if(exists("PROYECTO_SELECCIONADO") && PROYECTO_SELECCIONADO <= nrow(datos_segmentados)) {
  proyecto_info <- datos_segmentados[PROYECTO_SELECCIONADO, ]
  
  if(!is.na(proyecto_info$ivu_segmentado) && !is.na(proyecto_info$ivp_segmentado)) {
    
    cat("Analizando proyecto con percentiles mejorados:", proyecto_info$Proyecto, "\n")
    
    # 1. Reporte con percentiles mejorados
    cat("\n1. Generando reporte con percentiles realistas...\n")
    reporte_mejorado <- generar_reporte_percentiles_mejorados(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # 2. Dashboard con percentiles mejorados
    cat("\n2. Creando dashboard sin sesgos...\n")
    dashboard_mejorado <- crear_dashboard_percentiles_mejorados(datos_segmentados, PROYECTO_SELECCIONADO)
    print(dashboard_mejorado)
    
    # 3. Gráfico espejo mejorado
    cat("\n3. Creando gráfico espejo equilibrado...\n")
    espejo_mejorado <- crear_grafico_espejo_mejorado(datos_segmentados, PROYECTO_SELECCIONADO)
    print(espejo_mejorado)
    
  }
}

cat("\n✅ FUNCIONES MEJORADAS IMPLEMENTADAS:\n")
cat("- calcular_percentil_mejorado(): Cálculo realista de percentiles\n")
cat("- identificar_fortalezas_realistas(): Análisis sin sesgos\n") 
cat("- crear_grafico_espejo_mejorado(): Visualización equilibrada\n")
cat("- crear_dashboard_percentiles_mejorados(): Dashboard realista\n")
cat("- generar_reporte_percentiles_mejorados(): Reporte sin sesgos\n")

cat("\n🎯 CAMBIOS PRINCIPALES IMPLEMENTADOS:\n")
cat("✅ Máximo percentil: 95% (no más 100%)\n")
cat("✅ Variables binarias excluidas del análisis\n")
cat("✅ Suavizado de percentiles extremos\n")
cat("✅ Ajuste por tamaño de segmento\n")
cat("✅ Umbrales más estrictos (Fortalezas ≥75%, Debilidades ≤25%)\n")
cat("✅ Rango realista: 5% - 95%\n")

# ========================================================================
# SECCIÓN 21. ANÁLISIS DE FORTALEZAS BASADO EN IMPACTO DEL PRECIO
# ========================================================================
# Nueva aproximación: Medir fortalezas por su impacto en el precio por m²

# ---- 21.1 Función para calcular impacto de variables en el precio por segmento ----
calcular_impacto_precio_segmento <- function(datos, segmento_analizar) {
  # Filtrar datos del segmento específico
  datos_segmento <- datos %>%
    filter(Segmento == segmento_analizar) %>%
    filter(!is.na(p_m2) & p_m2 > 0)
  
  if(nrow(datos_segmento) < 5) {
    return(data.frame())
  }
  
  # Variables a analizar (todas las numéricas disponibles)
  variables_numericas <- datos_segmento %>%
    select_if(is.numeric) %>%
    select(-c(Latitud, Longitud, latitud, longitud)) %>%  # Excluir coordenadas
    names()
  
  # Calcular correlaciones e impactos
  impactos <- data.frame(
    Variable = character(0),
    Correlacion = numeric(0),
    R_Squared = numeric(0),
    Impacto_Precio = numeric(0),
    P_Value = numeric(0),
    Significativo = logical(0),
    Importancia = character(0),
    stringsAsFactors = FALSE
  )
  
  for(variable in variables_numericas) {
    if(variable != "p_m2" && !all(is.na(datos_segmento[[variable]]))) {
      
      # Datos válidos para análisis
      datos_validos <- datos_segmento %>%
        filter(!is.na(.data[[variable]]) & !is.na(p_m2)) %>%
        select(all_of(c(variable, "p_m2")))
      
      if(nrow(datos_validos) >= 3 && sd(datos_validos[[variable]], na.rm = TRUE) > 0) {
        
        # Calcular correlación
        correlacion <- cor(datos_validos[[variable]], datos_validos$p_m2, use = "complete.obs")
        
        # Modelo de regresión simple para obtener R² y p-value
        modelo <- tryCatch({
          lm(p_m2 ~ get(variable), data = datos_validos)
        }, error = function(e) NULL)
        
        if(!is.null(modelo)) {
          # Extraer estadísticas del modelo
          r_squared <- summary(modelo)$r.squared
          p_value <- summary(modelo)$coefficients[2, 4]  # p-value del coeficiente
          coeficiente <- summary(modelo)$coefficients[2, 1]  # Coeficiente beta
          
          # Calcular impacto práctico en precio
          # Si aumenta 1 unidad en la variable, cuánto cambia el precio
          rango_variable <- max(datos_validos[[variable]], na.rm = TRUE) - 
            min(datos_validos[[variable]], na.rm = TRUE)
          
          impacto_precio <- abs(coeficiente * rango_variable)
          
          # Determinar significancia estadística
          significativo <- p_value < 0.05
          
          # Categorizar importancia
          importancia <- case_when(
            abs(correlacion) >= 0.7 & significativo ~ "Crítica",
            abs(correlacion) >= 0.5 & significativo ~ "Alta",
            abs(correlacion) >= 0.3 & significativo ~ "Moderada",
            abs(correlacion) >= 0.2 ~ "Baja",
            TRUE ~ "No Significativa"
          )
          
          # Agregar a resultados
          impactos <- rbind(impactos, data.frame(
            Variable = variable,
            Correlacion = round(correlacion, 3),
            R_Squared = round(r_squared, 3),
            Impacto_Precio = round(impacto_precio, 0),
            P_Value = round(p_value, 4),
            Significativo = significativo,
            Importancia = importancia,
            stringsAsFactors = FALSE
          ))
        }
      }
    }
  }
  
  # Ordenar por correlación absoluta descendente
  impactos <- impactos %>%
    arrange(desc(abs(Correlacion))) %>%
    mutate(Segmento = segmento_analizar)
  
  return(impactos)
}

# ---- 21.2 Función para identificar fortalezas basadas en impacto de precio ----
identificar_fortalezas_por_impacto_precio <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Seleccionar proyecto
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Obtener impactos de variables en el precio para este segmento
  impactos_segmento <- calcular_impacto_precio_segmento(datos, proyecto$Segmento)
  
  if(nrow(impactos_segmento) == 0) {
    return(list(
      fortalezas = data.frame(),
      debilidades = data.frame(),
      proyecto = proyecto$Proyecto,
      segmento = proyecto$Segmento,
      impactos = data.frame()
    ))
  }
  
  # Filtrar solo variables importantes (que impactan significativamente el precio)
  variables_importantes <- impactos_segmento %>%
    filter(Importancia %in% c("Crítica", "Alta", "Moderada")) %>%
    arrange(desc(abs(Correlacion)))
  
  # Evaluar proyecto en estas variables importantes
  evaluacion_proyecto <- data.frame(
    Variable = character(0),
    Valor_Proyecto = numeric(0),
    Impacto_en_Precio = numeric(0),
    Correlacion_Precio = numeric(0),
    Percentil_en_Segmento = numeric(0),
    Es_Fortaleza = logical(0),
    Es_Debilidad = logical(0),
    Categoria = character(0),
    stringsAsFactors = FALSE
  )
  
  # Datos del segmento para calcular percentiles
  datos_segmento <- datos %>%
    filter(Segmento == proyecto$Segmento) %>%
    filter(!is.na(p_m2))
  
  for(i in 1:nrow(variables_importantes)) {
    variable <- variables_importantes$Variable[i]
    
    if(variable %in% names(proyecto) && !is.na(proyecto[[variable]])) {
      valor_proyecto <- proyecto[[variable]]
      correlacion <- variables_importantes$Correlacion[i]
      impacto <- variables_importantes$Impacto_Precio[i]
      
      # Calcular percentil en el segmento
      valores_segmento <- datos_segmento[[variable]]
      valores_validos <- valores_segmento[!is.na(valores_segmento)]
      
      if(length(valores_validos) > 2) {
        percentil <- mean(valores_validos <= valor_proyecto, na.rm = TRUE) * 100
        
        # Para variables con correlación negativa, invertir interpretación
        if(correlacion < 0) {
          percentil <- 100 - percentil
        }
        
        # Determinar si es fortaleza o debilidad basado en:
        # 1. Importancia de la variable para el precio
        # 2. Posición del proyecto en esa variable
        
        es_fortaleza <- FALSE
        es_debilidad <- FALSE
        categoria <- "Neutral"
        
        if(abs(correlacion) >= 0.3) {  # Solo para variables moderadamente importantes
          if(percentil >= 75) {
            es_fortaleza <- TRUE
            categoria <- case_when(
              percentil >= 90 ~ "Fortaleza Crítica",
              percentil >= 80 ~ "Fortaleza Fuerte",
              TRUE ~ "Fortaleza"
            )
          } else if(percentil <= 25) {
            es_debilidad <- TRUE
            categoria <- case_when(
              percentil <= 10 ~ "Debilidad Crítica",
              percentil <= 20 ~ "Debilidad Fuerte",
              TRUE ~ "Debilidad"
            )
          }
        }
        
        evaluacion_proyecto <- rbind(evaluacion_proyecto, data.frame(
          Variable = variable,
          Valor_Proyecto = valor_proyecto,
          Impacto_en_Precio = impacto,
          Correlacion_Precio = correlacion,
          Percentil_en_Segmento = round(percentil, 1),
          Es_Fortaleza = es_fortaleza,
          Es_Debilidad = es_debilidad,
          Categoria = categoria,
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  
  # Separar fortalezas y debilidades
  fortalezas <- evaluacion_proyecto %>%
    filter(Es_Fortaleza) %>%
    arrange(desc(abs(Correlacion_Precio)), desc(Percentil_en_Segmento))
  
  debilidades <- evaluacion_proyecto %>%
    filter(Es_Debilidad) %>%
    arrange(desc(abs(Correlacion_Precio)), Percentil_en_Segmento)
  
  return(list(
    fortalezas = fortalezas,
    debilidades = debilidades,
    proyecto = proyecto$Proyecto,
    segmento = proyecto$Segmento,
    impactos = impactos_segmento,
    evaluacion_completa = evaluacion_proyecto
  ))
}

# ---- 21.3 Función para visualizar impacto de variables en precio ----
crear_grafico_impacto_precio <- function(datos, segmento_analizar) {
  # Obtener impactos
  impactos <- calcular_impacto_precio_segmento(datos, segmento_analizar)
  
  if(nrow(impactos) == 0) {
    return(ggplot() + 
             geom_text(aes(x = 0.5, y = 0.5, label = "Datos insuficientes"), size = 6) +
             theme_void())
  }
  
  # Filtrar variables más importantes
  top_impactos <- impactos %>%
    filter(abs(Correlacion) >= 0.2) %>%  # Solo correlaciones relevantes
    head(15) %>%
    mutate(
      Direccion = ifelse(Correlacion > 0, "Positivo", "Negativo"),
      Variable_Limpia = case_when(
        Variable == "indice_accesibilidad" ~ "Accesibilidad",
        Variable == "num_amenidades" ~ "Núm. Amenidades",
        Variable == "score_amenidades_total" ~ "Score Amenidades",
        Variable == "ivu" ~ "IVU",
        Variable == "ivp_segmentado" ~ "IVP Segmentado",
        Variable == "accesibilidad_vial" ~ "Accesibilidad Vial",
        Variable == "indice_conveniencia" ~ "Conveniencia",
        Variable == "pob2020_1km" ~ "Población 1km",
        Variable == "absorcion" ~ "Absorción",
        TRUE ~ Variable
      )
    )
  
  # Crear gráfico de impacto
  p <- ggplot(top_impactos, aes(x = reorder(Variable_Limpia, abs(Correlacion)), 
                                y = Correlacion, fill = Direccion)) +
    geom_bar(stat = "identity", alpha = 0.8) +
    geom_text(aes(label = paste0(round(Correlacion, 2), "\n(R²:", round(R_Squared, 2), ")")), 
              hjust = ifelse(top_impactos$Correlacion > 0, -0.1, 1.1), 
              size = 3, fontface = "bold") +
    
    scale_fill_manual(values = c("Positivo" = "#68D192", "Negativo" = "#EF6558"),
                      name = "Impacto en Precio") +
    coord_flip() +
    
    labs(title = paste("💰 Impacto de Variables en el Precio por m² -", segmento_analizar),
         subtitle = "Correlaciones y R² - Variables que más influyen en el valor",
         x = "Variables", y = "Correlación con Precio por m²") +
    
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 14, color = "#2C6C66"),
      plot.subtitle = element_text(size = 11, color = "#2C6C66"),
      axis.text.y = element_text(size = 9),
      legend.position = "bottom"
    ) +
    
    geom_hline(yintercept = 0, color = "gray50", linewidth = 1)
  
  return(p)
}

# ---- 21.4 Función para crear gráfico espejo basado en impacto de precio ----
crear_espejo_impacto_precio <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  # Obtener análisis basado en impacto de precio
  analisis <- identificar_fortalezas_por_impacto_precio(datos, indice_proyecto, nombre_proyecto)
  
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # Preparar datos para visualización
  fortalezas <- head(analisis$fortalezas, 6)
  debilidades <- head(analisis$debilidades, 6)
  
  # Etiquetas limpias
  etiquetas_variables <- c(
    "indice_accesibilidad" = "Accesibilidad", "num_amenidades" = "Núm. Amenidades",
    "score_amenidades_total" = "Score Amenidades", "ivu" = "IVU",
    "ivp_segmentado" = "IVP Segmentado", "accesibilidad_vial" = "Accesibilidad Vial",
    "indice_conveniencia" = "Conveniencia", "pob2020_1km" = "Población 1km",
    "absorcion" = "Absorción", "cantidad_hospital_1km" = "Hospitales 1km",
    "cercania_esc_priv" = "Cercanía Esc. Privada", "propuesta_valor_v2" = "Propuesta Valor"
  )
  
  # Combinar datos para espejo
  datos_espejo <- data.frame(
    Variable = character(0),
    Valor = numeric(0),
    Tipo = character(0),
    Impacto_Precio = numeric(0),
    stringsAsFactors = FALSE
  )
  
  # Agregar fortalezas
  if(nrow(fortalezas) > 0) {
    for(i in 1:nrow(fortalezas)) {
      var_name <- fortalezas$Variable[i]
      etiqueta <- ifelse(var_name %in% names(etiquetas_variables), 
                         etiquetas_variables[var_name], var_name)
      
      datos_espejo <- rbind(datos_espejo, data.frame(
        Variable = paste0(etiqueta, " (r=", round(fortalezas$Correlacion_Precio[i], 2), ")"),
        Valor = fortalezas$Percentil_en_Segmento[i],
        Tipo = "Fortaleza",
        Impacto_Precio = fortalezas$Impacto_en_Precio[i],
        stringsAsFactors = FALSE
      ))
    }
  }
  
  # Agregar debilidades
  if(nrow(debilidades) > 0) {
    for(i in 1:nrow(debilidades)) {
      var_name <- debilidades$Variable[i]
      etiqueta <- ifelse(var_name %in% names(etiquetas_variables), 
                         etiquetas_variables[var_name], var_name)
      
      datos_espejo <- rbind(datos_espejo, data.frame(
        Variable = paste0(etiqueta, " (r=", round(debilidades$Correlacion_Precio[i], 2), ")"),
        Valor = -debilidades$Percentil_en_Segmento[i],  # Negativo para espejo
        Tipo = "Debilidad",
        Impacto_Precio = debilidades$Impacto_en_Precio[i],
        stringsAsFactors = FALSE
      ))
    }
  }
  
  if(nrow(datos_espejo) == 0) {
    return(ggplot() + 
             geom_text(aes(x = 0.5, y = 0.5, label = "Perfil equilibrado\nSin factores extremos que impacten precio"), 
                       size = 6, color = "#6c757d") +
             labs(title = paste("💰 Análisis de Impacto en Precio -", proyecto$Proyecto)) +
             theme_void())
  }
  
  # Crear gráfico espejo
  colores_impacto <- c("Fortaleza" = "#68D192", "Debilidad" = "#EF6558")
  
  p <- ggplot(datos_espejo, aes(x = reorder(Variable, abs(Valor)), y = Valor, fill = Tipo)) +
    geom_bar(stat = "identity", alpha = 0.8, width = 0.7) +
    geom_hline(yintercept = 0, color = "gray40", linewidth = 1) +
    
    # Etiquetas con percentil e impacto
    geom_text(aes(label = paste0(abs(round(Valor)), "%\n$", 
                                 format(round(Impacto_Precio/1000, 0), big.mark = ","), "k")), 
              hjust = ifelse(datos_espejo$Valor > 0, -0.1, 1.1), 
              size = 3, fontface = "bold", color = "gray20") +
    
    scale_fill_manual(values = colores_impacto, name = "") +
    coord_flip() +
    
    labs(title = "💰 Fortalezas y Debilidades por Impacto en Precio",
         subtitle = paste("Proyecto:", proyecto$Proyecto, "| Variables que más afectan el valor por m²"),
         x = "", y = "Percentil en Segmento (%) | Impacto estimado en precio") +
    
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16, color = "#2C6C66", hjust = 0.5),
      plot.subtitle = element_text(size = 12, color = "#2C6C66", hjust = 0.5),
      axis.text.y = element_text(size = 9),
      axis.text.x = element_text(size = 9),
      legend.position = "bottom",
      panel.grid.major.y = element_blank()
    ) +
    
    scale_y_continuous(
      limits = c(-100, 100),
      breaks = seq(-80, 80, 20),
      labels = function(x) paste0(abs(x), "%")
    ) +
    
    # Anotaciones
    annotate("text", x = nrow(datos_espejo) * 0.7, y = 70, 
             label = "FORTALEZAS\n(Alto impacto en precio)", 
             fontface = "bold", color = "#2C6C66", size = 3.5) +
    annotate("text", x = nrow(datos_espejo) * 0.7, y = -70, 
             label = "DEBILIDADES\n(Limitan valor del proyecto)", 
             fontface = "bold", color = "#C53030", size = 3.5)
  
  return(p)
}

# ---- 21.5 Dashboard integrado con análisis de impacto de precio ----
crear_dashboard_impacto_precio <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  
  proyecto <- seleccionar_proyecto_segmentado(datos, indice_proyecto, nombre_proyecto)
  
  # 1. Gráfico de impacto general del segmento
  grafico_impacto_segmento <- crear_grafico_impacto_precio(datos, proyecto$Segmento)
  
  # 2. Análisis específico del proyecto
  analisis_proyecto <- identificar_fortalezas_por_impacto_precio(datos, indice_proyecto, nombre_proyecto)
  
  # 3. Gráfico espejo del proyecto
  grafico_espejo_proyecto <- crear_espejo_impacto_precio(datos, indice_proyecto, nombre_proyecto)
  
  # 4. Panel de resumen
  num_fortalezas <- nrow(analisis_proyecto$fortalezas)
  num_debilidades <- nrow(analisis_proyecto$debilidades)
  
  # Calcular impacto económico total
  impacto_positivo <- sum(analisis_proyecto$fortalezas$Impacto_en_Precio, na.rm = TRUE)
  impacto_negativo <- sum(analisis_proyecto$debilidades$Impacto_en_Precio, na.rm = TRUE)
  impacto_neto <- impacto_positivo - impacto_negativo
  
  panel_resumen <- ggplot() +
    geom_rect(aes(xmin = 0.05, xmax = 0.95, ymin = 0.1, ymax = 0.9), 
              fill = "#f8f9fa", color = "#2C6C66", linewidth = 2, alpha = 0.8) +
    
    geom_text(aes(x = 0.5, y = 0.8, label = "💰 ANÁLISIS DE IMPACTO ECONÓMICO"),
              size = 5.5, fontface = "bold", color = "#2C6C66") +
    
    # Estadísticas de impacto
    geom_text(aes(x = 0.25, y = 0.65, label = paste0("🏆 FORTALEZAS\n", num_fortalezas, " factores\n+$", 
                                                     format(round(impacto_positivo/1000, 0), big.mark = ","), "k")),
              size = 4.5, fontface = "bold", color = "#68D192") +
    geom_text(aes(x = 0.75, y = 0.65, label = paste0("⚠️ DEBILIDADES\n", num_debilidades, " factores\n-$", 
                                                     format(round(impacto_negativo/1000, 0), big.mark = ","), "k")),
              size = 4.5, fontface = "bold", color = "#EF6558") +
    
    # Impacto neto
    geom_text(aes(x = 0.5, y = 0.45, label = paste0("💲 IMPACTO NETO\n$", 
                                                    format(round(impacto_neto/1000, 0), big.mark = ","), "k por m²")),
              size = 4.5, fontface = "bold", 
              color = ifelse(impacto_neto > 0, "#2C6C66", "#E76F51")) +
    
    # Información del proyecto
    geom_text(aes(x = 0.5, y = 0.25, 
                  label = paste0(proyecto$Proyecto, " | ", proyecto$Segmento, 
                                 "\nPrecio actual: $", format(round(proyecto$p_m2, 0), big.mark = ","), "/m²")),
              size = 3.5, color = "#6c757d") +
    
    # Interpretación
    geom_text(aes(x = 0.5, y = 0.15, 
                  label = "Análisis basado en correlación real con precios de mercado"),
              size = 3, color = "#6c757d", fontface = "italic") +
    
    theme_void() +
    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
  
  # Combinar en dashboard
  dashboard <- grid.arrange(
    grafico_impacto_segmento,           # Variables que más impactan precio en el segmento
    grafico_espejo_proyecto,            # Fortalezas/debilidades específicas del proyecto
    panel_resumen,                      # Resumen económico
    ncol = 1, nrow = 3,
    heights = c(1.5, 2, 1),
    top = textGrob(paste("💰 Análisis de Valor Económico -", proyecto$Proyecto), 
                   gp = gpar(fontsize = 18, fontface = "bold", col = "#2C6C66"))
  )
  
  return(dashboard)
}

# ---- 21.6 Reporte de impacto económico ----
generar_reporte_impacto_precio <- function(datos, indice_proyecto = NULL, nombre_proyecto = NULL) {
  analisis <- identificar_fortalezas_por_impacto_precio(datos, indice_proyecto, nombre_proyecto)
  
  cat("\n", rep("💰", 40), "\n")
  cat("REPORTE DE ANÁLISIS POR IMPACTO EN PRECIO\n")
  cat(rep("💰", 40), "\n")
  
  cat("\n📊 PROYECTO:", analisis$proyecto, "\n")
  cat("🏠 SEGMENTO:", analisis$segmento, "\n")
  
  # Variables más importantes para el precio en este segmento
  top_variables_precio <- head(analisis$impactos %>% 
                                 filter(abs(Correlacion) >= 0.3), 5)
  
  if(nrow(top_variables_precio) > 0) {
    cat("\n💲 VARIABLES QUE MÁS IMPACTAN EL PRECIO EN", analisis$segmento, ":\n")
    for(i in 1:nrow(top_variables_precio)) {
      cat("  ", i, ".", top_variables_precio$Variable[i], 
          "- Correlación:", top_variables_precio$Correlacion[i],
          "| Impacto: $", format(round(top_variables_precio$Impacto_Precio[i]), big.mark = ","), "\n")
    }
  }
  
  # Fortalezas del proyecto
  if(nrow(analisis$fortalezas) > 0) {
    cat("\n🏆 FORTALEZAS DEL PROYECTO (Variables importantes donde destaca):\n")
    for(i in 1:nrow(analisis$fortalezas)) {
      cat("  ", i, ".", analisis$fortalezas$Variable[i], 
          "- Percentil:", round(analisis$fortalezas$Percentil_en_Segmento[i], 0), 
          "% | Impacto precio: +$", format(round(analisis$fortalezas$Impacto_en_Precio[i]), big.mark = ","), "\n")
    }
  } else {
    cat("\n🔍 No se identificaron fortalezas significativas en variables que impactan el precio\n")
  }
  
  # Debilidades del proyecto
  if(nrow(analisis$debilidades) > 0) {
    cat("\n⚠️ DEBILIDADES DEL PROYECTO (Variables importantes donde está rezagado):\n")
    for(i in 1:nrow(analisis$debilidades)) {
      cat("  ", i, ".", analisis$debilidades$Variable[i], 
          "- Percentil:", round(analisis$debilidades$Percentil_en_Segmento[i], 0), 
          "% | Limitación precio: -$", format(round(analisis$debilidades$Impacto_en_Precio[i]), big.mark = ","), "\n")
    }
  } else {
    cat("\n✅ No se identificaron debilidades significativas en variables que impactan el precio\n")
  }
  
  # Resumen económico
  impacto_total_positivo <- sum(analisis$fortalezas$Impacto_en_Precio, na.rm = TRUE)
  impacto_total_negativo <- sum(analisis$debilidades$Impacto_en_Precio, na.rm = TRUE)
  impacto_neto <- impacto_total_positivo - impacto_total_negativo
  
  cat("\n💡 RESUMEN ECONÓMICO:\n")
  cat("- Impacto positivo estimado: +$", format(round(impacto_total_positivo), big.mark = ","), "/m²\n")
  cat("- Impacto negativo estimado: -$", format(round(impacto_total_negativo), big.mark = ","), "/m²\n")
  cat("- Impacto neto: $", format(round(impacto_neto), big.mark = ","), "/m²\n")
  
  if(impacto_neto > 0) {
    cat("- Evaluación: ✅ PERFIL POSITIVO - Variables clave favorecen el valor\n")
  } else {
    cat("- Evaluación: ⚠️ PERFIL DESAFIANTE - Oportunidades de mejora en variables clave\n")
  }
  
  cat("\n🎯 VENTAJAS DE ESTE ANÁLISIS:\n")
  cat("✅ Basado en correlaciones reales con precio de mercado\n")
  cat("✅ Elimina sesgos de variables binarias\n")
  cat("✅ Identifica factores que realmente generan valor\n")
  cat("✅ Proporciona impacto económico cuantificable\n")
  cat("✅ Específico por segmento\n")
  
  cat("\n", rep("💰", 40), "\n")
  
  return(analisis)
}

# ---- 21.7 Ejemplo de uso ----
cat("\n=== ANÁLISIS POR IMPACTO EN PRECIO (NUEVA METODOLOGÍA) ===\n")

if(exists("PROYECTO_SELECCIONADO") && PROYECTO_SELECCIONADO <= nrow(datos_segmentados)) {
  proyecto_info <- datos_segmentados[PROYECTO_SELECCIONADO, ]
  
  if(!is.na(proyecto_info$p_m2) && proyecto_info$p_m2 > 0) {
    
    cat("Analizando por impacto en precio:", proyecto_info$Proyecto, "\n")
    
    # 1. Reporte de impacto económico
    cat("\n1. Generando reporte de impacto económico...\n")
    reporte_impacto <- generar_reporte_impacto_precio(datos_segmentados, PROYECTO_SELECCIONADO)
    
    # 2. Dashboard de impacto económico
    cat("\n2. Creando dashboard de impacto económico...\n")
    dashboard_impacto <- crear_dashboard_impacto_precio(datos_segmentados, PROYECTO_SELECCIONADO)
    print(dashboard_impacto)
    
    # 3. Gráfico espejo específico
    cat("\n3. Creando gráfico espejo por impacto...\n")
    espejo_impacto <- crear_espejo_impacto_precio(datos_segmentados, PROYECTO_SELECCIONADO)
    print(espejo_impacto)
    
  } else {
    cat("ERROR: Proyecto sin datos válidos de precio por m²\n")
  }
}

cat("\n✅ NUEVA METODOLOGÍA IMPLEMENTADA:\n")
cat("- calcular_impacto_precio_segmento(): Correlaciones con precio por segmento\n")
cat("- identificar_fortalezas_por_impacto_precio(): Fortalezas basadas en valor económico\n") 
cat("- crear_espejo_impacto_precio(): Visualización con impacto económico\n")
cat("- crear_dashboard_impacto_precio(): Dashboard económico completo\n")
cat("- generar_reporte_impacto_precio(): Reporte con análisis de valor\n")

cat("\n🎯 BENEFICIOS DE LA NUEVA METODOLOGÍA:\n")
cat("✅ Eliminación total de sesgos de variables binarias\n")
cat("✅ Análisis basado en valor económico real\n")
cat("✅ Cuantificación del impacto en precio\n")
cat("✅ Identificación de factores que realmente importan\n")
cat("✅ Específico por segmento de mercado\n")
cat("✅ Resultados más creíbles y accionables\n")
