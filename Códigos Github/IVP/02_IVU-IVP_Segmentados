# Script: Segmentación de IVU e IVP por Segmento de Mercado y NSE - VERSIÓN LIMPIA
# Construcción de índices específicos que eliminan sesgos de comparación entre segmentos

# ---- 1. CONFIGURACIÓN INICIAL ----
rm(list = ls())

library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
library(corrplot)
library(knitr)
library(tidyr)
library(grid)
library(gridExtra)

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[00] RESULTADOS/IVU-IVP')

# ---- 2. CARGAR Y PREPARAR DATOS ----
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIÓN/[00] RESULTADOS/IVP/proyectos_con_ivp_v2_completo.csv', stringsAsFactors = FALSE)

cat("Base de datos cargada:\n")
cat("- Proyectos:", nrow(datos), "\n")
cat("- Variables:", ncol(datos), "\n")
cat("- Segmentos únicos:", paste(unique(datos$Segmento[!is.na(datos$Segmento)]), collapse = ", "), "\n")
cat("- NSE únicos:", paste(unique(datos$nse[!is.na(datos$nse)]), collapse = ", "), "\n")

# ---- 3. DEFINIR PARÁMETROS Y MATRICES ----

# 3.1 Segmentos y NSE válidos
segmentos_validos <- c("Premium Plus", "Premium", "Residencial Plus", "Residencial", "Medio")
nse_validos <- c("A+", "A", "B", "C+", "C", "D+", "D", "E")

# 3.2 Limpiar y segmentar datos
datos_segmentados <- datos %>%
  filter(Segmento %in% segmentos_validos & nse %in% nse_validos) %>%
  mutate(
    segmento_nse = paste0(Segmento, " | NSE ", nse),
    categoria_segmento = case_when(
      Segmento %in% c("Premium Plus", "Premium") ~ "PREMIUM",
      Segmento %in% c("Residencial Plus", "Residencial") ~ "RESIDENCIAL", 
      Segmento == "Medio" ~ "MEDIO",
      TRUE ~ "OTRO"
    ),
    categoria_nse = case_when(
      nse %in% c("A+", "A") ~ "NSE_ALTO",
      nse %in% c("B", "C+") ~ "NSE_MEDIO_ALTO",
      nse %in% c("C", "D+") ~ "NSE_MEDIO",
      nse %in% c("D", "E") ~ "NSE_BAJO",
      TRUE ~ "NSE_OTRO"
    ),
    categoria_combinada_simple = paste0(categoria_segmento, "_", categoria_nse)
  )

# 3.3 Matriz de relevancia de factores por segmento
factores_relevancia <- data.frame(
  Factor = c(
    "cercania_hospital", "cercania_esc_priv", "cercania_esc_pub", "cercania_universidad",
    "cercania_super", "cercania_restau", "cercania_oficina", "cercania_tienda_dept",
    "cantidad_hospital_1km", "cantidad_esc_priv_1km", "cantidad_esc_pub_1km", "cantidad_universidad_1km",
    "cantidad_super_1km", "cantidad_restau_1km", "cantidad_oficina_1km", "cantidad_tienda_dept_1km",
    "cerca_avenida_principal", "cercania_avenida_arterial", "accesibilidad_vial",
    "indice_accesibilidad", "potencial_inversion", "indice_conveniencia",
    "cerca_parque_relevante", "alta_densidad_comercial", "alto_entorno_laboral"
  ),
  Premium_Plus = c(5, 5, 1, 4, 3, 4, 5, 4, 4, 4, 1, 3, 3, 4, 5, 3, 4, 5, 5, 5, 5, 4, 5, 3, 4),
  Premium = c(4, 5, 2, 4, 4, 4, 4, 4, 4, 4, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4),
  Residencial_Plus = c(4, 4, 3, 3, 5, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3),
  Residencial = c(3, 3, 4, 3, 5, 3, 3, 4, 3, 3, 4, 3, 5, 3, 3, 4, 4, 3, 4, 4, 3, 5, 3, 4, 3),
  Medio = c(4, 2, 5, 2, 5, 3, 2, 4, 4, 2, 5, 2, 5, 3, 2, 4, 5, 4, 5, 4, 3, 5, 3, 5, 2)
)

# ---- 4. FUNCIONES PRINCIPALES ----

# 4.1 Función para calcular IVU segmentado
calcular_ivu_segmentado <- function(datos, factores_relevancia) {
  factores_disponibles <- intersect(factores_relevancia$Factor, names(datos))
  
  datos_ivu_seg <- datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%
    do({
      df_grupo <- .
      segmento_actual <- unique(df_grupo$Segmento)[1]
      segmento_columna <- gsub(" ", "_", segmento_actual)
      
      if(segmento_columna %in% names(factores_relevancia)) {
        col_index <- which(names(factores_relevancia) == segmento_columna)
        pesos_segmento <- data.frame(
          Factor = factores_relevancia$Factor,
          Peso = factores_relevancia[, col_index]
        )
        
        ivu_segmentado <- rep(0, nrow(df_grupo))
        peso_total <- 0
        
        for(factor in factores_disponibles) {
          if(factor %in% pesos_segmento$Factor && factor %in% names(df_grupo)) {
            peso <- pesos_segmento$Peso[pesos_segmento$Factor == factor]
            valores_factor <- df_grupo[[factor]]
            
            if(!all(is.na(valores_factor))) {
              min_val <- min(valores_factor, na.rm = TRUE)
              max_val <- max(valores_factor, na.rm = TRUE)
              
              if(max_val > min_val) {
                valores_norm <- (valores_factor - min_val) / (max_val - min_val)
                ivu_segmentado <- ivu_segmentado + (valores_norm * peso)
                peso_total <- peso_total + peso
              }
            }
          }
        }
        
        df_grupo$ivu_segmentado <- if(peso_total > 0) ivu_segmentado / peso_total else 0.5
        df_grupo$peso_total_usado <- peso_total
      } else {
        df_grupo$ivu_segmentado <- df_grupo$ivu
        df_grupo$peso_total_usado <- 1
      }
      
      df_grupo
    }) %>%
    ungroup()
  
  return(datos_ivu_seg)
}

# 4.2 Función para calcular IVP segmentado
calcular_ivp_segmentado <- function(datos) {
  datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%
    mutate(
      amenidades_norm_seg = {
        vals = score_amenidades_total
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      performance_norm_seg = {
        vals = eficiencia_comercial
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      ivp_segmentado = case_when(
        Segmento == "Premium Plus" ~ (amenidades_norm_seg * 0.45) + (performance_norm_seg * 0.20) + 
          (credibilidad_desarrollador_v2 * 0.25) + (propuesta_valor_norm_v2 * 0.10),
        Segmento == "Premium" ~ (amenidades_norm_seg * 0.35) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.20) + (propuesta_valor_norm_v2 * 0.15),
        Segmento == "Residencial Plus" ~ (amenidades_norm_seg * 0.25) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + (propuesta_valor_norm_v2 * 0.30),
        Segmento == "Residencial" ~ (amenidades_norm_seg * 0.20) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + (propuesta_valor_norm_v2 * 0.35),
        Segmento == "Medio" ~ (amenidades_norm_seg * 0.15) + (performance_norm_seg * 0.35) + 
          (credibilidad_desarrollador_v2 * 0.10) + (propuesta_valor_norm_v2 * 0.40),
        TRUE ~ ivp_v2
      ),
      
      ivp_segmentado_categoria = cut(ivp_segmentado,
                                     breaks = c(0, 0.25, 0.45, 0.65, 0.80, 1.0),
                                     labels = c("Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto"),
                                     include.lowest = TRUE)
    ) %>%
    ungroup()
}

# 4.3 Función para categorización 4S
agregar_categorizacion_4s <- function(datos) {
  datos %>%
    group_by(segmento_nse) %>%
    mutate(
      ivu_segmentado_categoria = cut(ivu_segmentado,
                                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1.0),
                                     labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
                                     include.lowest = TRUE),
      categoria_4s = case_when(
        ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR",
        ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "SÓLIDO",
        ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE",
        TRUE ~ "SINGULAR"
      )
    ) %>%
    ungroup()
}

# ---- 5. APLICAR CÁLCULOS ----

cat("\n=== CALCULANDO ÍNDICES SEGMENTADOS ===\n")
datos_segmentados <- calcular_ivu_segmentado(datos_segmentados, factores_relevancia)
datos_segmentados <- calcular_ivp_segmentado(datos_segmentados)
datos_segmentados <- agregar_categorizacion_4s(datos_segmentados)

# ---- 6. FUNCIONES DE VISUALIZACIÓN ----

# 6.1 Función principal para matriz de decisión interactiva
crear_matriz_4s_interactiva <- function(datos, segmento_filtro = NULL) {
  if(!is.null(segmento_filtro)) {
    datos_filtrados <- datos %>% filter(Segmento == segmento_filtro)
    titulo <- paste("Matriz de Decisión 4S:", segmento_filtro)
  } else {
    datos_filtrados <- datos
    titulo <- "Matriz de Decisión 4S - Todos los Segmentos"
  }
  
  if(nrow(datos_filtrados) < 3) return(NULL)
  
  colores_4s <- c("SUPERIOR" = "#68D192", "SÓLIDO" = "#9B87F4", 
                  "SUSTENTABLE" = "#F4E785", "SINGULAR" = "#F8C579")
  
  p <- ggplot(datos_filtrados, aes(x = ivu_segmentado, y = ivp_segmentado)) +
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0.5, ymax = 1, fill = "#9B87F4", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0.5, ymax = 1, fill = "#68D192", alpha = 0.1) +
    annotate("rect", xmin = 0, xmax = 0.5, ymin = 0, ymax = 0.5, fill = "#F8C579", alpha = 0.1) +
    annotate("rect", xmin = 0.5, xmax = 1, ymin = 0, ymax = 0.5, fill = "#F4E785", alpha = 0.1) +
    
    geom_point(aes(color = categoria_4s, 
                   text = paste0("Proyecto: ", Proyecto, "\n",
                                 "Desarrollador: ", Desarrollador, "\n",
                                 "NSE: ", nse, "\n",
                                 "IVU: ", round(ivu_segmentado, 3), "\n",
                                 "IVP: ", round(ivp_segmentado, 3), "\n",
                                 "Precio/m²: $", format(p_m2, big.mark = ","), "\n",
                                 "Categoría: ", categoria_4s)), 
               size = 4, alpha = 0.8) +
    
    geom_hline(yintercept = 0.5, linetype = "dashed", color = "gray40") +
    geom_vline(xintercept = 0.5, linetype = "dashed", color = "gray40") +
    scale_color_manual(values = colores_4s, name = "Categoría 4S") +
    
    labs(title = titulo, x = "IVU Segmentado", y = "IVP Segmentado") +
    theme_minimal()
  
  return(ggplotly(p, tooltip = "text"))
}

# 6.2 Función principal para mapas interactivos
crear_mapa_4s <- function(datos, tipo = "principal") {
  datos_validos <- datos %>% 
    filter(!is.na(latitud) & !is.na(longitud) & 
             !is.na(ivu_segmentado) & !is.na(ivp_segmentado))
  
  if(tipo == "ivu") {
    colores <- c("Muy bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785", 
                 "Alto" = "#68D192", "Muy alto" = "#2C6C66")
    pal <- colorFactor(palette = colores, domain = datos_validos$ivu_segmentado_categoria)
    variable_color <- "ivu_segmentado_categoria"
    titulo_leyenda <- "IVU Segmentado"
  } else if(tipo == "ivp") {
    colores <- c("Muy Bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785", 
                 "Alto" = "#68D192", "Muy Alto" = "#2C6C66")
    pal <- colorFactor(palette = colores, domain = datos_validos$ivp_segmentado_categoria)
    variable_color <- "ivp_segmentado_categoria"
    titulo_leyenda <- "IVP Segmentado"
  } else {
    colores <- c("SUPERIOR" = "#68D192", "SÓLIDO" = "#9B87F4", 
                 "SUSTENTABLE" = "#F4E785", "SINGULAR" = "#F8C579")
    pal <- colorFactor(palette = colores, domain = datos_validos$categoria_4s)
    variable_color <- "categoria_4s"
    titulo_leyenda <- "Categoría 4S"
  }
  
  popups <- paste0(
    "<div style='font-family: Arial, sans-serif; font-size: 14px; max-width: 300px;'>",
    "<h4 style='margin: 0 0 10px 0; color: #2C6C66;'><b>", datos_validos$Proyecto, "</b></h4>",
    "<hr style='margin: 5px 0;'>",
    "<b>🏢 Desarrollador:</b> ", datos_validos$Desarrollador, "<br>",
    "<b>📍 Municipio:</b> ", datos_validos$Municipio, "<br>",
    "<b>🏠 Segmento:</b> ", datos_validos$Segmento, " | NSE ", datos_validos$nse, "<br>",
    "<hr style='margin: 5px 0;'>",
    "<b>📊 IVU:</b> ", round(datos_validos$ivu_segmentado, 3), " (", datos_validos$ivu_segmentado_categoria, ")<br>",
    "<b>⭐ IVP:</b> ", round(datos_validos$ivp_segmentado, 3), " (", datos_validos$ivp_segmentado_categoria, ")<br>",
    "<b>🎯 Categoría 4S:</b> ", datos_validos$categoria_4s, "<br>",
    "<b>💰 Precio/m²:</b> $", format(datos_validos$p_m2, big.mark = ","), "<br>",
    "</div>"
  )
  
  leaflet(datos_validos) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitud, lat = ~latitud, radius = 8,
      fillColor = ~pal(get(variable_color)),
      color = "white", weight = 2, opacity = 1, fillOpacity = 0.8,
      popup = popups
    ) %>%
    addLegend(
      position = "bottomright", pal = pal, values = ~get(variable_color),
      title = titulo_leyenda, opacity = 0.8
    ) %>%
    setView(lng = mean(datos_validos$longitud, na.rm = TRUE), 
            lat = mean(datos_validos$latitud, na.rm = TRUE), zoom = 10)
}

# ---- 7. ANÁLISIS DE PROYECTO INDIVIDUAL ----

# 7.1 Funciones de termómetros
crear_termometro <- function(datos, indice_proyecto, tipo = "ivu") {
  proyecto <- datos[indice_proyecto, ]
  
  if(tipo == "ivu") {
    valor <- proyecto$ivu_segmentado
    categoria <- proyecto$ivu_segmentado_categoria
    titulo <- "🎯 Termómetro IVU Segmentado"
    colores <- c("Muy bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785",
                 "Alto" = "#68D192", "Muy alto" = "#2C6C66")
  } else {
    valor <- proyecto$ivp_segmentado
    categoria <- proyecto$ivp_segmentado_categoria
    titulo <- "⭐ Termómetro IVP Segmentado"
    colores <- c("Muy Bajo" = "#EF6558", "Bajo" = "#F8C579", "Medio" = "#F4E785",
                 "Alto" = "#68D192", "Muy Alto" = "#2C6C66")
  }
  
  color <- colores[as.character(categoria)]
  
  escala <- data.frame(
    y = seq(0, 1, 0.2),
    labels = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
    categorias = c("", names(colores))
  )
  
  ggplot() +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = 1), 
              fill = "lightgrey", color = "black", linewidth = 1) +
    geom_rect(aes(xmin = 0.4, xmax = 0.6, ymin = 0, ymax = valor), 
              fill = color, alpha = 0.8) +
    geom_segment(data = escala, aes(x = 0.38, y = y, xend = 0.62, yend = y), 
                 color = "black", linewidth = 0.5) +
    geom_text(data = escala, aes(x = 0.35, y = y, label = labels), 
              hjust = 1, size = 4) +
    geom_text(aes(x = 0.5, y = 1.15, 
                  label = paste0(proyecto$Proyecto, "\n", 
                                 "Segmento: ", proyecto$Segmento, " | NSE: ", proyecto$nse, "\n",
                                 toupper(substr(tipo, 1, 3)), " Segmentado: ", round(valor, 3), "\n",
                                 "Categoría: ", categoria)),
              fontface = "bold", hjust = 0.5, size = 4) +
    labs(title = titulo, subtitle = "Comparación intra-segmento") +
    theme_void() +
    theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16, color = "#2C6C66"),
          plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#2C6C66")) +
    coord_cartesian(xlim = c(0, 1), ylim = c(-0.05, 1.3))
}

# 7.2 Función de análisis individual
analizar_proyecto_individual <- function(datos, indice_proyecto) {
  proyecto <- datos[indice_proyecto, ]
  datos_segmento <- datos %>% filter(Segmento == proyecto$Segmento)
  
  # Calcular percentiles y ranking
  percentil_ivu <- round(mean(datos_segmento$ivu_segmentado <= proyecto$ivu_segmentado, na.rm = TRUE) * 100, 1)
  percentil_ivp <- round(mean(datos_segmento$ivp_segmentado <= proyecto$ivp_segmentado, na.rm = TRUE) * 100, 1)
  
  score_combinado <- (proyecto$ivu_segmentado * 0.6) + (proyecto$ivp_segmentado * 0.4)
  datos_segmento$score_temp <- (datos_segmento$ivu_segmentado * 0.6) + (datos_segmento$ivp_segmentado * 0.4)
  ranking <- sum(datos_segmento$score_temp >= score_combinado, na.rm = TRUE)
  total_segmento <- nrow(datos_segmento)
  
  # Mostrar resultados
  cat("\n", rep("=", 60), "\n")
  cat("ANÁLISIS 4S DEL PROYECTO:", proyecto$Proyecto, "\n")
  cat(rep("=", 60), "\n")
  
  cat("\n📊 INFORMACIÓN BÁSICA:\n")
  cat("Desarrollador:", proyecto$Desarrollador, "\n")
  cat("Municipio:", proyecto$Municipio, "\n")
  cat("Segmento:", proyecto$Segmento, "| NSE:", proyecto$nse, "\n")
  cat("Precio/m²: $", format(proyecto$p_m2, big.mark = ","), "\n")
  
  cat("\n🎯 CATEGORIZACIÓN 4S:", proyecto$categoria_4s, "\n")
  
  cat("\n📈 MÉTRICAS SEGMENTADAS:\n")
  cat("IVU Segmentado:", round(proyecto$ivu_segmentado, 3), "(", proyecto$ivu_segmentado_categoria, ")\n")
  cat("IVP Segmentado:", round(proyecto$ivp_segmentado, 3), "(", proyecto$ivp_segmentado_categoria, ")\n")
  cat("Score Combinado:", round(score_combinado, 3), "\n")
  
  cat("\n🏆 POSICIÓN EN SEGMENTO:\n")
  cat("Ranking:", ranking, "de", total_segmento, "proyectos\n")
  cat("Percentil IVU:", percentil_ivu, "%\n")
  cat("Percentil IVP:", percentil_ivp, "%\n")
  
  cat("\n", rep("=", 60), "\n")
  
  return(list(
    proyecto = proyecto$Proyecto,
    categoria_4s = proyecto$categoria_4s,
    ranking = ranking,
    total_segmento = total_segmento,
    percentil_ivu = percentil_ivu,
    percentil_ivp = percentil_ivp
  ))
}

# ---- 8. EJECUTAR ANÁLISIS Y VISUALIZACIONES ----

# 8.1 Estadísticas generales
estadisticas_segmento <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  group_by(Segmento) %>%
  summarise(
    Proyectos = n(),
    IVU_Media = round(mean(ivu_segmentado, na.rm = TRUE), 3),
    IVP_Media = round(mean(ivp_segmentado, na.rm = TRUE), 3),
    .groups = 'drop'
  )

cat("\n=== ESTADÍSTICAS POR SEGMENTO ===\n")
print(kable(estadisticas_segmento))

# 8.2 Top proyectos por segmento
top_proyectos <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  group_by(Segmento) %>%
  mutate(
    score_combinado = (ivu_segmentado * 0.6) + (ivp_segmentado * 0.4),
    rank_segmento = rank(-score_combinado, ties.method = "min")
  ) %>%
  filter(rank_segmento <= 3) %>%
  select(Proyecto, Desarrollador, Segmento, nse, categoria_4s, 
         ivu_segmentado, ivp_segmentado, score_combinado, rank_segmento) %>%
  arrange(Segmento, rank_segmento) %>%
  ungroup()

cat("\n=== TOP 3 PROYECTOS POR SEGMENTO ===\n")
print(kable(top_proyectos, digits = 3))

# 8.3 Crear visualizaciones principales
cat("\n=== CREANDO VISUALIZACIONES ===\n")

# Matrices por segmento
segmentos_con_datos <- unique(datos_segmentados$Segmento[!is.na(datos_segmentados$ivu_segmentado)])
for(seg in segmentos_con_datos) {
  cat("Matriz para segmento:", seg, "\n")
  matriz <- crear_matriz_4s_interactiva(datos_segmentados, seg)
  if(!is.null(matriz)) print(matriz)
}

# Mapas principales
cat("Creando mapas interactivos...\n")
mapa_principal <- crear_mapa_4s(datos_segmentados, "principal")
mapa_ivu <- crear_mapa_4s(datos_segmentados, "ivu")
mapa_ivp <- crear_mapa_4s(datos_segmentados, "ivp")

print(mapa_principal)
print(mapa_ivu)
print(mapa_ivp)

# 8.4 Análisis de proyecto específico
PROYECTO_EJEMPLO <- 15
if(PROYECTO_EJEMPLO <= nrow(datos_segmentados)) {
  cat("\n=== ANÁLISIS DE PROYECTO INDIVIDUAL ===\n")
  
  # Termómetros
  termometro_ivu <- crear_termometro(datos_segmentados, PROYECTO_EJEMPLO, "ivu")
  termometro_ivp <- crear_termometro(datos_segmentados, PROYECTO_EJEMPLO, "ivp")
  
  print(termometro_ivu)
  print(termometro_ivp)
  
  # Análisis detallado
  analisis_detalle <- analizar_proyecto_individual(datos_segmentados, PROYECTO_EJEMPLO)
}

# ---- 9. GUARDAR RESULTADOS ----

# 9.1 Preparar datos para exportación
datos_finales <- datos_segmentados %>%
  filter(!is.na(ivu_segmentado) & !is.na(ivp_segmentado)) %>%
  mutate(
    score_combinado = (ivu_segmentado * 0.6) + (ivp_segmentado * 0.4)
  ) %>%
  group_by(Segmento) %>%
  mutate(rank_final = rank(-score_combinado, ties.method = "min")) %>%
  ungroup() %>%
  select(Proyecto, Desarrollador, Municipio, Segmento, nse, 
         ivu_segmentado, ivu_segmentado_categoria,
         ivp_segmentado, ivp_segmentado_categoria,
         categoria_4s, score_combinado, rank_final, p_m2) %>%
  arrange(Segmento, rank_final)

# 9.2 Datos para Keynote
datos_keynote <- datos_finales %>%
  select(Proyecto, Desarrollador, Segmento, nse,
         IVU_X = ivu_segmentado, IVP_Y = ivp_segmentado, 
         categoria_4s, p_m2) %>%
  mutate(
    IVU_X = round(IVU_X, 3),
    IVP_Y = round(IVP_Y, 3),
    Etiqueta = paste0(Proyecto, "\n(", Segmento, ")")
  )

# 9.3 Guardar archivos
write.csv(datos_finales, "proyectos_indices_segmentados_4s_limpio.csv", row.names = FALSE)
write.csv(datos_keynote, "matriz_4s_keynote_limpio.csv", row.names = FALSE)
write.csv(factores_relevancia, "matriz_relevancia_factores_4s.csv", row.names = FALSE)

# ---- 10. RESUMEN EJECUTIVO ----

cat("\n", rep("=", 60), "\n")
cat("SCRIPT IVU-IVP SEGMENTADO - VERSIÓN LIMPIA COMPLETADA\n")
cat(rep("=", 60), "\n")

cat("\n📊 ESTADÍSTICAS FINALES:\n")
cat("- Proyectos procesados:", nrow(datos_finales), "\n")
cat("- Segmentos analizados:", n_distinct(datos_finales$Segmento), "\n")
cat("- Combinaciones Segmento-NSE:", n_distinct(datos_segmentados$segmento_nse), "\n")

cat("\n🎯 MEJORAS IMPLEMENTADAS:\n")
cat("✅ Eliminación de funciones duplicadas\n")
cat("✅ Consolidación de visualizaciones\n")
cat("✅ Funciones unificadas para mapas y matrices\n")
cat("✅ Análisis individual simplificado\n")
cat("✅ Código más eficiente y mantenible\n")

cat("\n📁 ARCHIVOS GENERADOS:\n")
cat("- proyectos_indices_segmentados_4s_limpio.csv\n")
cat("- matriz_4s_keynote_limpio.csv\n")
cat("- matriz_relevancia_factores_4s.csv\n")

cat("\n🚀 FUNCIONES PRINCIPALES DISPONIBLES:\n")
cat("- crear_matriz_4s_interactiva(datos, segmento)\n")
cat("- crear_mapa_4s(datos, tipo)\n")
cat("- crear_termometro(datos, indice, tipo)\n")
cat("- analizar_proyecto_individual(datos, indice)\n")

cat("\n", rep("=", 60), "\n")
