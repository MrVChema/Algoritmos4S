# SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES
# Flujo Optimizado IVU - Consolida Scripts 3, 4, 5, 7, 8 y 9 del flujo original

# ---- 1. CONFIGURACI√ìN INICIAL ----
cat("üöÄ INICIANDO SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES\n")
cat("========================================================\n\n")

# Limpiar el entorno y cargar librer√≠as necesarias
rm(list = ls())

library(dplyr)
library(ggplot2)
library(corrplot)
library(randomForest)
library(caret)
library(gridExtra)
library(knitr)
library(sf)
library(leaflet)
library(RColorBrewer)
library(scales)
library(DT)
library(plotly)
library(stringr)
library(extrafont)
library(htmltools)
library(tidyr)
library(reshape2)
library(readr)

# Establecer directorio de trabajo
setwd('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[04] MODELACIOÃÅN/[02] IVU-IVP')

cat("‚úÖ Configuraci√≥n inicial completada\n")

# CAPTURAR SALIDA DE CONSOLA
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
archivo_log <- paste0("script2_log_", timestamp, ".txt")
sink(archivo_log, append = FALSE, split = TRUE)

# ---- 2. CARGAR DATOS DEL SCRIPT 1 ----
cat("\nüìä CARGANDO DATOS PREPARADOS DEL SCRIPT 1...\n")

# Cargar los datos preparados
datos <- read.csv('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/OUTPUT_BASE INTEGRADA_IVU-IVP/base_inmobiliaria_preparada.csv', stringsAsFactors = FALSE, encoding = "UTF-8")
datos_sf <- st_read('/Users/yalta/Library/CloudStorage/GoogleDrive-yaltalielt@gmail.com/Mi unidad/4S Real Estate/2025/[02] ALGORITMO/[02] DATOS/[00] BASE INTEGRADA/OUTPUT_BASE INTEGRADA_IVU-IVP/base_inmobiliaria_preparada.gpkg')

cat("‚úÖ Datos cargados:\n")
cat("- Proyectos:", nrow(datos), "\n")
cat("- Variables:", ncol(datos), "\n")

# ---- 3. C√ÅLCULO DE CORRELACIONES Y PESOS PARA IVU (Script 3 Consolidado) ----
cat("\nüìà CALCULANDO CORRELACIONES Y PESOS PARA IVU...\n")

# 3.1 Definir los factores a considerar para el IVU
factores <- list(
  # √çndices existentes
  indices = c("indice_accesibilidad", "potencial_inversion", "indice_conveniencia"),
  
  # Cercan√≠as a equipamientos (0 o 1)
  cercanias = c(
    "cercania_hospital", 
    "cercania_esc_priv", 
    "cercania_esc_pub", 
    "cercania_universidad", 
    "cercania_super", 
    "cercania_restau", 
    "cercania_oficina", 
    "cercania_tienda_dept"
  ),
  
  # Cantidades de equipamientos en 1km
  cantidades = c(
    "cantidad_hospital_1km", 
    "cantidad_esc_priv_1km", 
    "cantidad_esc_pub_1km", 
    "cantidad_universidad_1km", 
    "cantidad_super_1km", 
    "cantidad_restau_1km", 
    "cantidad_oficina_1km", 
    "cantidad_tienda_dept_1km"
  ),
  
  # Nueva categor√≠a: Variables de vialidades
  vialidades = c(
    "cerca_avenida_principal",
    "cercania_avenida",
    "cercania_avenida_arterial",
    "cercania_avenida_secundaria",
    "accesibilidad_vial"
  ),
  
  # Otros factores relevantes
  otros = c(
    "cerca_parque_relevante",
    "alta_densidad_pob",
    "predominio_hogares_propios",
    "alto_crecimiento",
    "alta_densidad_educativa",
    "alta_densidad_comercial",
    "alto_entorno_laboral"
  )
)

# 3.2 Funci√≥n para calcular correlaci√≥n con manejo de valores NA
calcular_correlacion <- function(x, y) {
  return(cor(x, y, use = "pairwise.complete.obs", method = "pearson"))
}

# 3.3 Calcular correlaciones entre cada factor y el precio por m¬≤
correlaciones <- numeric()
precio_m2 <- datos$p_m2

# Calcular correlaciones para cada categor√≠a de factores
for (categoria in names(factores)) {
  for (factor in factores[[categoria]]) {
    # Calcular correlaci√≥n solo si la variable existe
    if (factor %in% colnames(datos)) {
      # Manejo de valores NA en los datos
      valores_factor <- datos[[factor]]
      pares_completos <- !is.na(valores_factor) & !is.na(precio_m2)
      
      if (sum(pares_completos) > 2) { # Necesitamos al menos 3 pares para correlaci√≥n
        corr <- calcular_correlacion(valores_factor[pares_completos], 
                                     precio_m2[pares_completos])
        correlaciones[factor] <- corr
      } else {
        correlaciones[factor] <- 0
      }
    } else {
      correlaciones[factor] <- 0
      warning(paste("Variable", factor, "no encontrada en los datos"))
    }
  }
}

# 3.4 Manejar correlaciones negativas
correlaciones_ajustadas <- correlaciones

# Identificar factores con correlaci√≥n negativa (excluyendo NAs)
factores_negativos <- names(correlaciones_ajustadas[correlaciones_ajustadas < 0 & !is.na(correlaciones_ajustadas)])

# Ajustar factores espec√≠ficos
for (factor in factores_negativos) {
  if (!is.na(factor) && (factor == "cantidad_esc_pub_1km" || factor == "cercania_esc_pub")) {
    # Asignar un valor positivo bajo en lugar de negativo
    correlaciones_ajustadas[factor] <- 0.05
  }
}

# 3.5 Convertir correlaciones a pesos
correlaciones_abs <- abs(correlaciones_ajustadas)
suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)
pesos_calculados <- correlaciones_abs / suma_correlaciones

# 3.6 Funci√≥n para calcular pesos por segmento
calcular_pesos_por_segmento <- function(datos) {
  segmentos <- unique(datos$segmento_limpio)
  segmentos <- segmentos[!is.na(segmentos)]
  
  pesos_por_segmento <- list()
  
  for (segmento in segmentos) {
    datos_segmento <- datos[datos$segmento_limpio == segmento, ]
    
    if (nrow(datos_segmento) < 25) {
      warning(paste("Omitiendo segmento", segmento, "por datos insuficientes"))
      next
    }
    
    correlaciones <- numeric()
    precio_m2 <- datos_segmento$p_m2
    
    for (categoria in names(factores)) {
      for (factor in factores[[categoria]]) {
        if (factor %in% colnames(datos_segmento)) {
          valores_factor <- datos_segmento[[factor]]
          pares_completos <- !is.na(valores_factor) & !is.na(precio_m2)
          
          if (sum(pares_completos) > 2) {
            corr <- calcular_correlacion(valores_factor[pares_completos], 
                                         precio_m2[pares_completos])
            correlaciones[factor] <- corr
          } else {
            correlaciones[factor] <- 0
          }
        }
      }
    }
    
    correlaciones_ajustadas <- correlaciones
    correlaciones_abs <- abs(correlaciones_ajustadas)
    suma_correlaciones <- sum(correlaciones_abs, na.rm = TRUE)
    pesos_calculados <- correlaciones_abs / suma_correlaciones
    
    pesos_por_segmento[[segmento]] <- pesos_calculados
  }
  
  return(pesos_por_segmento)
}

# Calcular pesos por segmento
pesos_por_segmento <- calcular_pesos_por_segmento(datos)

# 3.7 Asignar pesos espec√≠ficos si no existen en correlaciones
if (!"cerca_avenida_principal" %in% names(pesos_calculados)) {
  pesos_calculados["cerca_avenida_principal"] <- 0.0300
}
if (!"accesibilidad_vial" %in% names(pesos_calculados)) {
  pesos_calculados["accesibilidad_vial"] <- 0.0500
}

cat("‚úÖ Correlaciones y pesos calculados\n")
cat("- Factores analizados:", length(correlaciones), "\n")
cat("- Segmentos con pesos espec√≠ficos:", length(pesos_por_segmento), "\n")

# ---- 4. CONSTRUCCI√ìN DEL IVU (Script 4 Consolidado) ----
cat("\nüéØ CONSTRUYENDO √çNDICE DE VALOR POR UBICACI√ìN (IVU)...\n")

# 4.1 Funci√≥n para normalizar valores entre 0 y 1
normalizar <- function(valores) {
  valores_numericos <- as.numeric(valores)
  valores_validos <- valores_numericos[!is.na(valores_numericos)]
  
  if (length(valores_validos) == 0) return(rep(0, length(valores)))
  
  min_val <- min(valores_validos)
  max_val <- max(valores_validos)
  
  if (max_val == min_val) {
    resultado <- rep(0, length(valores))
    resultado[!is.na(valores_numericos)] <- 0.5
    return(resultado)
  }
  
  resultado <- rep(0, length(valores))
  resultado[!is.na(valores_numericos)] <- (valores_numericos[!is.na(valores_numericos)] - min_val) / (max_val - min_val)
  return(resultado)
}

# 4.2 Normalizaci√≥n de cantidades de equipamientos
cantidades_norm <- list()
for (col in factores$cantidades) {
  cantidades_norm[[col]] <- normalizar(datos[[col]])
}

# 4.3 Funci√≥n para calcular el IVU registrando todas las contribuciones
calcular_ivu_por_segmento <- function(datos, pesos_generales, pesos_por_segmento, cantidades_norm, factores) {
  n <- nrow(datos)
  ivu <- numeric(n)
  
  # Crear una lista con TODOS los posibles factores
  todos_factores_posibles <- unique(c(
    names(pesos_generales),
    unlist(lapply(pesos_por_segmento, names)),
    unlist(factores)
  ))
  
  # Crear la matriz de contribuciones con TODOS los factores posibles
  contribuciones <- matrix(0, nrow = n, ncol = length(todos_factores_posibles))
  colnames(contribuciones) <- todos_factores_posibles
  
  for (i in 1:n) {
    suma <- 0
    peso_total <- 0
    
    # Determinar qu√© pesos usar seg√∫n el segmento del proyecto
    segmento <- datos$Segmento[i]
    
    if (is.na(segmento) || !(segmento %in% names(pesos_por_segmento))) {
      pesos_a_usar <- pesos_generales
    } else {
      pesos_a_usar <- pesos_por_segmento[[segmento]]
    }
    
    # Sumar los √≠ndices existentes
    for (indice in factores$indices) {
      if (!is.na(datos[i, indice]) && indice %in% names(pesos_a_usar)) {
        valor <- datos[i, indice] * pesos_a_usar[indice]
        suma <- suma + valor
        contribuciones[i, indice] <- valor
        peso_total <- peso_total + pesos_a_usar[indice]
      }
    }
    
    # Sumar las cercan√≠as
    for (cercania in factores$cercanias) {
      if (!is.na(datos[i, cercania]) && cercania %in% names(pesos_a_usar)) {
        valor <- datos[i, cercania] * pesos_a_usar[cercania]
        suma <- suma + valor
        contribuciones[i, cercania] <- valor
        peso_total <- peso_total + pesos_a_usar[cercania]
      }
    }
    
    # Sumar las cantidades normalizadas
    for (cantidad in factores$cantidades) {
      if (!is.na(cantidades_norm[[cantidad]][i]) && cantidad %in% names(pesos_a_usar)) {
        valor <- cantidades_norm[[cantidad]][i] * pesos_a_usar[cantidad]
        suma <- suma + valor
        contribuciones[i, cantidad] <- valor
        peso_total <- peso_total + pesos_a_usar[cantidad]
      }
    }
    
    # Sumar otros factores binarios
    for (otro in factores$otros) {
      if (!is.na(datos[i, otro]) && otro %in% names(pesos_a_usar)) {
        valor <- datos[i, otro] * pesos_a_usar[otro]
        suma <- suma + valor
        contribuciones[i, otro] <- valor
        peso_total <- peso_total + pesos_a_usar[otro]
      }
    }
    
    # Sumar variables de vialidades
    for (vialidad in factores$vialidades) {
      if (vialidad %in% names(datos) && !is.na(datos[i, vialidad]) && vialidad %in% names(pesos_a_usar)) {
        if (grepl("cercania_avenida|cerca_avenida", vialidad)) {
          if (is.na(datos[i, "dist_to_avenue"]) || datos[i, "dist_to_avenue"] > 3000) {
            valor <- 0
          } else {
            valor <- datos[i, vialidad] * pesos_a_usar[vialidad]
          }
        } else {
          valor <- datos[i, vialidad] * pesos_a_usar[vialidad]
        }
        
        suma <- suma + valor
        contribuciones[i, vialidad] <- valor
        peso_total <- peso_total + pesos_a_usar[vialidad]
      }
    }
    
    # Normalizar por el peso total usado
    ivu[i] <- if (peso_total > 0) suma / peso_total else 0
  }
  
  result <- list(ivu = ivu, contribuciones = contribuciones)
  return(result)
}

# 4.4 Calcular el IVU para todos los proyectos
resultado_ivu <- calcular_ivu_por_segmento(datos, pesos_calculados, pesos_por_segmento, cantidades_norm, factores)
datos$ivu <- resultado_ivu$ivu
datos$segmento_utilizado <- ifelse(is.na(datos$Segmento), "General", 
                                   ifelse(datos$Segmento %in% names(pesos_por_segmento), 
                                          as.character(datos$Segmento), "General"))
contribuciones <- resultado_ivu$contribuciones

# 4.5 Calcular contribuci√≥n por categor√≠a
datos$contrib_indices <- rowSums(contribuciones[, intersect(factores$indices, colnames(contribuciones))], na.rm = TRUE)
datos$contrib_cercanias <- rowSums(contribuciones[, intersect(factores$cercanias, colnames(contribuciones))], na.rm = TRUE)
datos$contrib_cantidades <- rowSums(contribuciones[, intersect(factores$cantidades, colnames(contribuciones))], na.rm = TRUE)
datos$contrib_vialidades <- rowSums(contribuciones[, intersect(factores$vialidades, colnames(contribuciones))], na.rm = TRUE)
datos$contrib_otros <- rowSums(contribuciones[, intersect(factores$otros, colnames(contribuciones))], na.rm = TRUE)

# 4.6 Crear categor√≠as para el IVU
datos$ivu_categoria <- cut(
  datos$ivu, 
  breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), 
  labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
  include.lowest = TRUE
)

cat("‚úÖ IVU construido exitosamente\n")

# Estad√≠sticas del IVU
estadisticas_ivu <- list(
  min = min(datos$ivu, na.rm = TRUE),
  max = max(datos$ivu, na.rm = TRUE),
  media = mean(datos$ivu, na.rm = TRUE),
  mediana = median(datos$ivu, na.rm = TRUE)
)

cat("üìä Estad√≠sticas del IVU:\n")
cat("- M√≠nimo:", round(estadisticas_ivu$min, 4), "\n")
cat("- M√°ximo:", round(estadisticas_ivu$max, 4), "\n")
cat("- Media:", round(estadisticas_ivu$media, 4), "\n")
cat("- Mediana:", round(estadisticas_ivu$mediana, 4), "\n")

# ---- 5. CONSTRUCCI√ìN DEL IVP (Script 8 Consolidado) ----
cat("\n‚≠ê CONSTRUYENDO √çNDICE DE VALOR DEL PROYECTO (IVP)...\n")

# 5.1 Calcular variables faltantes para IVP
datos <- datos %>%
  mutate(
    # Ratio de ventas (proporci√≥n de unidades vendidas)
    ratio_ventas = ifelse(unidades_totales > 0, 
                          unidades_vendidas / unidades_totales, 0),
    
    # Velocidad de ventas (unidades por mes)
    velocidad_ventas = ifelse(meses_mercado > 0, 
                              unidades_vendidas / meses_mercado, 0),
    
    # Eficiencia de inventario
    eficiencia_inventario = ifelse(unidades_totales > 0,
                                   1 - (unidades_inv / unidades_totales), 0),
    
    # Precio relativo por m2 (logar√≠tmico para normalizar)
    precio_relativo_log = log(p_m2 + 1)
  )

# 5.2 Categorizaci√≥n de amenidades m√°s sofisticada
amenidades_categorias_v2 <- list(
  # Amenidades b√°sicas (esperadas, bajo diferenciaci√≥n)
  basicas = c("control_de_acceso", "areas_verdes", "vestidores"),
  
  # Amenidades de salud y bienestar (alta valoraci√≥n)
  wellness = c("gimnasio", "spa", "sauna", "jacuzzi", "salon_de_yoga"),
  
  # Amenidades recreativas (familias)
  recreativas = c("alberca", "canchas_deportivas", "ludoteca_juegos_infantiles", 
                  "pista_de_jogging_vitapista"),
  
  # Amenidades sociales (convivencia, eventos)
  sociales = c("casa_club", "bar", "lounges", "salon_usos_multiples", 
               "sala_de_cine_tv", "sala_de_lectura", "patio_central", 
               "terraza", "asadores", "fogatero"),
  
  # Amenidades premium (exclusivas, alto costo)
  premium = c("campo_de_golf", "golf_virtual", "roof_graden", "pet_zone")
)

# 5.3 Funci√≥n para calcular scores de amenidades
calcular_scores_amenidades_v2 <- function(datos, categorias) {
  # Pesos por impacto en valor
  pesos_categoria <- c(
    "basicas" = 1.0,
    "wellness" = 2.5,
    "recreativas" = 2.0,
    "sociales" = 1.8,
    "premium" = 3.0
  )
  
  for (categoria in names(categorias)) {
    # Filtrar amenidades que existen en los datos
    amenidades_existentes <- intersect(categorias[[categoria]], names(datos))
    
    if (length(amenidades_existentes) > 0) {
      # Score ponderado por categor√≠a
      datos[[paste0("score_", categoria)]] <- rowSums(
        datos[amenidades_existentes], na.rm = TRUE
      ) * pesos_categoria[categoria]
    } else {
      datos[[paste0("score_", categoria)]] <- 0
    }
  }
  
  # Score total ponderado
  scores_cols <- paste0("score_", names(categorias))
  datos$score_amenidades_total <- rowSums(datos[scores_cols], na.rm = TRUE)
  
  return(datos)
}

datos <- calcular_scores_amenidades_v2(datos, amenidades_categorias_v2)

# 5.4 Benchmarks por segmento
segmento_benchmark <- "segmento_utilizado"

benchmarks_actualizados <- datos %>%
  filter(!is.na(.data[[segmento_benchmark]]) & !is.na(absorcion)) %>%
  group_by(.data[[segmento_benchmark]]) %>%
  summarise(
    absorcion_promedio = mean(absorcion, na.rm = TRUE),
    absorcion_mediana = median(absorcion, na.rm = TRUE),
    precio_promedio = mean(p_m2, na.rm = TRUE),
    ivu_promedio = mean(ivu, na.rm = TRUE),
    ratio_ventas_promedio = mean(ratio_ventas, na.rm = TRUE),
    score_amenidades_promedio = mean(score_amenidades_total, na.rm = TRUE),
    proyectos = n(),
    .groups = 'drop'
  )

# 5.5 Performance relativo mejorado
datos <- datos %>%
  left_join(benchmarks_actualizados %>% 
              select(.data[[segmento_benchmark]], absorcion_promedio, ivu_promedio, 
                     ratio_ventas_promedio, score_amenidades_promedio), 
            by = segmento_benchmark) %>%
  mutate(
    # Absorci√≥n relativa vs benchmark del segmento
    absorcion_relativa_v2 = ifelse(!is.na(absorcion_promedio) & absorcion_promedio > 0,
                                   absorcion / absorcion_promedio, 1),
    
    # IVU relativo vs benchmark
    ivu_relativo = ifelse(!is.na(ivu_promedio) & ivu_promedio > 0,
                          ivu / ivu_promedio, 1),
    
    # Ratio ventas relativo vs benchmark
    ratio_ventas_relativo = ifelse(!is.na(ratio_ventas_promedio) & ratio_ventas_promedio > 0,
                                   ratio_ventas / ratio_ventas_promedio, 1),
    
    # Momentum de ventas
    momentum_ventas_norm = ifelse(meses_mercado > 0, velocidad_ventas / 10, 0),
    
    # Eficiencia comercial
    eficiencia_comercial = pmin(2, pmax(0,
                                        (absorcion_relativa_v2 * 0.4) + 
                                          (ratio_ventas_relativo * 0.3) + 
                                          (momentum_ventas_norm * 0.3)
    ))
  )

# 5.6 Track record de desarrollador
track_record_v2 <- datos %>%
  group_by(Desarrollador) %>%
  summarise(
    proyectos_total = n(),
    absorcion_promedio_dev = mean(absorcion, na.rm = TRUE),
    ivu_promedio_dev = mean(ivu, na.rm = TRUE),
    ratio_ventas_promedio_dev = mean(ratio_ventas, na.rm = TRUE),
    consistencia_absorcion = ifelse(n() > 1 & sd(absorcion, na.rm = TRUE) > 0,
                                    1 - (sd(absorcion, na.rm = TRUE) / 
                                           mean(absorcion, na.rm = TRUE)), 0.5),
    segmentos_diversos = n_distinct(.data[[segmento_benchmark]], na.rm = TRUE),
    municipios_presencia = n_distinct(Municipio, na.rm = TRUE),
    prop_premium = mean((.data[[segmento_benchmark]] %in% 
                           c("Premium", "Premium Plus")), na.rm = TRUE),
    amenidades_promedio_dev = mean(score_amenidades_total, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  mutate(
    consistencia_absorcion = ifelse(is.na(consistencia_absorcion) | 
                                      is.infinite(consistencia_absorcion), 0.5, 
                                    pmax(0, pmin(1, consistencia_absorcion)))
  ) %>%
  arrange(desc(proyectos_total))

# 5.7 An√°lisis de propuesta de valor
datos <- datos %>%
  left_join(benchmarks_actualizados %>% 
              select(.data[[segmento_benchmark]], precio_promedio), 
            by = segmento_benchmark, suffix = c("", "_benchmark")) %>%
  left_join(track_record_v2 %>% 
              select(Desarrollador, proyectos_total, absorcion_promedio_dev, 
                     ivu_promedio_dev, consistencia_absorcion, prop_premium,
                     amenidades_promedio_dev), 
            by = "Desarrollador") %>%
  mutate(
    precio_benchmark = precio_promedio,
    competitividad_precio = ifelse(!is.na(precio_benchmark) & precio_benchmark > 0,
                                   p_m2 / precio_benchmark, 1),
    propuesta_valor_v2 = pmin(2, pmax(0,
                                      (1 / pmax(0.5, competitividad_precio, na.rm = TRUE)) * 0.4 +
                                        ifelse(!is.na(score_amenidades_promedio) & score_amenidades_promedio > 0,
                                               score_amenidades_total / score_amenidades_promedio, 1) * 0.6
    ))
  )

# 5.8 Funci√≥n de normalizaci√≥n robusta
normalizar_robusto <- function(x, metodo = "iqr") {
  if (all(is.na(x))) return(rep(0.5, length(x)))
  
  if (metodo == "iqr") {
    q25 <- quantile(x, 0.25, na.rm = TRUE)
    q75 <- quantile(x, 0.75, na.rm = TRUE)
    x_clip <- pmax(q25, pmin(q75, x))
    min_val <- min(x_clip, na.rm = TRUE)
    max_val <- max(x_clip, na.rm = TRUE)
  } else {
    min_val <- min(x, na.rm = TRUE)
    max_val <- max(x, na.rm = TRUE)
  }
  
  if (max_val == min_val) return(rep(0.5, length(x)))
  return(pmax(0, pmin(1, (x - min_val) / (max_val - min_val))))
}

# 5.9 Calcular componentes del IVP 2.0
datos <- datos %>%
  mutate(
    # COMPONENTE 1: Calidad del Producto (35%)
    indice_amenidades_v2 = normalizar_robusto(score_amenidades_total),
    amplitud_unidades = normalizar_robusto(m2_inv),
    densidad_proyecto = normalizar_robusto(1 / (unidades_totales / 100)),
    
    calidad_producto_v2 = (indice_amenidades_v2 * 0.6) + 
      (amplitud_unidades * 0.25) + 
      (densidad_proyecto * 0.15),
    
    # COMPONENTE 2: Performance Comercial (25%)
    performance_comercial_v2 = normalizar_robusto(eficiencia_comercial),
    
    # COMPONENTE 3: Propuesta de Valor (20%)
    propuesta_valor_norm_v2 = normalizar_robusto(propuesta_valor_v2),
    
    # COMPONENTE 4: Credibilidad Desarrollador (15%)
    credibilidad_desarrollador_v2 = (
      normalizar_robusto(proyectos_total) * 0.3 +
        normalizar_robusto(absorcion_promedio_dev) * 0.25 +
        normalizar_robusto(ivu_promedio_dev) * 0.25 +
        normalizar_robusto(consistencia_absorcion) * 0.2
    ),
    
    # COMPONENTE 5: Fit Mercado-Producto (5%)
    fit_mercado_v2 = 0.5,  # Placeholder
    
    # IVP 2.0 FINAL
    ivp_v2 = (calidad_producto_v2 * 0.35) + 
      (performance_comercial_v2 * 0.25) + 
      (propuesta_valor_norm_v2 * 0.20) + 
      (credibilidad_desarrollador_v2 * 0.15) + 
      (fit_mercado_v2 * 0.05),
    
    # Categorizaci√≥n
    ivp_v2_categoria = cut(ivp_v2, 
                           breaks = c(0, 0.25, 0.45, 0.65, 0.80, 1.0),
                           labels = c("Deficiente", "Regular", "Bueno", "Excelente", "Excepcional"),
                           include.lowest = TRUE)
  )

cat("‚úÖ IVP construido exitosamente\n")

# ---- 6. MODELO DE EVOLUCI√ìN NSE (Scripts 5 y 7 Consolidados) ----
cat("\nüìà CONSTRUYENDO MODELO DE EVOLUCI√ìN NSE...\n")

# 6.1 Mapeo de NSE y Segmentos a valores num√©ricos
nse_valores <- c(
  "A+" = 7, "A" = 6, "B" = 5, "C+" = 4, "C" = 3, "D+" = 2, "D" = 1, "E" = 0
)

segmento_valores <- c(
  "Premium Plus" = 7, "Premium" = 6, "Residencial Plus" = 5, 
  "Residencial" = 4, "Medio" = 3, "Econ√≥mico" = 2, "Social" = 1
)

# 6.2 Convertir categor√≠as a valores num√©ricos
datos$nse_valor <- sapply(datos$nse, function(x) {
  if (is.na(x)) return(NA)
  if (x %in% names(nse_valores)) return(nse_valores[x]) else return(NA)
})

datos$segmento_valor <- sapply(datos$Segmento, function(x) {
  if (is.na(x)) return(NA)
  if (x %in% names(segmento_valores)) return(segmento_valores[x]) else return(NA)
})

# 6.3 C√°lculo de factores predictivos
datos$brecha_nse_segmento <- datos$segmento_valor - datos$nse_valor

# 6.4 An√°lisis de NSE de zonas vecinas (usando geometr√≠a si est√° disponible)
if(exists("datos_sf") && nrow(datos_sf) > 0) {
  datos_sf$nse_valor <- datos$nse_valor
  datos_sf$segmento_valor <- datos$segmento_valor
  
  calcular_nse_vecinos <- function(datos_sf) {
    n <- nrow(datos_sf)
    nse_vecinos <- numeric(n)
    
    for (i in 1:n) {
      geom_i <- st_geometry(datos_sf)[i]
      
      if (!st_is_empty(geom_i)) {
        buffer <- st_buffer(st_transform(geom_i, 32614), 1500)
        buffer <- st_transform(buffer, 4326)
        
        vecinos_indices <- st_intersects(buffer, st_geometry(datos_sf))[[1]]
        vecinos_indices <- vecinos_indices[vecinos_indices != i]
        
        if (length(vecinos_indices) > 0) {
          nse_vecinos[i] <- mean(datos_sf$nse_valor[vecinos_indices], na.rm = TRUE)
        } else {
          nse_vecinos[i] <- NA
        }
      } else {
        nse_vecinos[i] <- NA
      }
    }
    
    return(nse_vecinos)
  }
  
  datos$nse_vecinos <- calcular_nse_vecinos(datos_sf)
} else {
  datos$nse_vecinos <- NA
}

datos$influencia_vecinos <- datos$nse_vecinos - datos$nse_valor

# 6.5 Rendimiento de absorci√≥n comparado con similares
absorcion_por_nse <- datos %>%
  group_by(nse) %>%
  summarize(absorcion_promedio = mean(absorcion, na.rm = TRUE))

datos <- datos %>%
  left_join(absorcion_por_nse, by = "nse") %>%
  mutate(
    rendimiento_relativo = absorcion / absorcion_promedio,
    rendimiento_ajustado = ifelse(is.na(rendimiento_relativo) | 
                                    is.infinite(rendimiento_relativo), 
                                  1, rendimiento_relativo)
  )

# 6.6 Proporci√≥n de unidades vendidas
datos$ratio_ventas_nse <- datos$unidades_vendidas / datos$unidades_totales
datos$ratio_ventas_nse[is.na(datos$ratio_ventas_nse) | is.infinite(datos$ratio_ventas_nse)] <- 0.5

# 6.7 Modelo predictivo de evoluci√≥n NSE
datos$score_evolucion_nse <- with(datos, {
  w1 <- 0.30  # Peso brecha NSE-Segmento del proyecto
  w2 <- 0.20  # Peso influencia de vecinos
  w3 <- 0.15  # Peso rendimiento de absorci√≥n
  w4 <- 0.10  # Peso ratio de ventas
  w5 <- 0.25  # Peso otros factores
  
  (w1 * pmax(0, brecha_nse_segmento, na.rm = TRUE)) +
    (w2 * pmax(0, influencia_vecinos, na.rm = TRUE)) +
    (w3 * pmax(0, rendimiento_ajustado - 1, na.rm = TRUE)) +
    (w4 * ratio_ventas_nse) +
    (w5 * 0.5)  # Placeholder para otros factores
})

# 6.8 Normalizar score y calcular probabilidad
min_score <- min(datos$score_evolucion_nse, na.rm = TRUE)
max_score <- max(datos$score_evolucion_nse, na.rm = TRUE)
datos$score_norm <- (datos$score_evolucion_nse - min_score) / (max_score - min_score)

datos$prob_incremento_nse <- pmin(1, pmax(0, datos$score_norm))

# 6.9 Clasificar en categor√≠as
datos$tendencia_nse <- cut(
  datos$prob_incremento_nse,
  breaks = c(0, 0.3, 0.7, 1),
  labels = c("Estable", "Potencial incremento", "Alto potencial de incremento"),
  include.lowest = TRUE
)

# 6.10 Tiempo estimado para cambio de NSE
datos$tiempo_estimado_cambio <- case_when(
  datos$prob_incremento_nse >= 0.7 ~ "1-3 a√±os",
  datos$prob_incremento_nse >= 0.5 ~ "3-5 a√±os",
  datos$prob_incremento_nse >= 0.3 ~ "5-10 a√±os",
  TRUE ~ "M√°s de 10 a√±os o sin cambio previsible"
)

cat("‚úÖ Modelo de evoluci√≥n NSE construido\n")

# ---- 7. VERSIONES SEGMENTADAS (Script 9 Consolidado) ----
cat("\nüéØ CREANDO VERSIONES SEGMENTADAS DE √çNDICES...\n")

# 7.1 Segmentos y NSE v√°lidos
segmentos_validos <- c("Premium Plus", "Premium", "Residencial Plus", "Residencial", "Medio")
nse_validos <- c("A+", "A", "B", "C+", "C", "D+", "D", "E")

# 7.2 Limpiar y segmentar datos
datos_segmentados <- datos %>%
  filter(Segmento %in% segmentos_validos & nse %in% nse_validos) %>%
  mutate(
    segmento_nse = paste0(Segmento, " | NSE ", nse),
    categoria_segmento = case_when(
      Segmento %in% c("Premium Plus", "Premium") ~ "PREMIUM",
      Segmento %in% c("Residencial Plus", "Residencial") ~ "RESIDENCIAL", 
      Segmento == "Medio" ~ "MEDIO",
      TRUE ~ "OTRO"
    )
  )

# 7.3 Matriz de relevancia de factores por segmento
factores_relevancia <- data.frame(
  Factor = c(
    "cercania_hospital", "cercania_esc_priv", "cercania_esc_pub", "cercania_universidad",
    "cercania_super", "cercania_restau", "cercania_oficina", "cercania_tienda_dept",
    "cantidad_hospital_1km", "cantidad_esc_priv_1km", "cantidad_esc_pub_1km", "cantidad_universidad_1km",
    "cantidad_super_1km", "cantidad_restau_1km", "cantidad_oficina_1km", "cantidad_tienda_dept_1km",
    "cerca_avenida_principal", "cercania_avenida_arterial", "accesibilidad_vial",
    "indice_accesibilidad", "potencial_inversion", "indice_conveniencia",
    "cerca_parque_relevante", "alta_densidad_comercial", "alto_entorno_laboral"
  ),
  Premium_Plus = c(5, 5, 1, 4, 3, 4, 5, 4, 4, 4, 1, 3, 3, 4, 5, 3, 4, 5, 5, 5, 5, 4, 5, 3, 4),
  Premium = c(4, 5, 2, 4, 4, 4, 4, 4, 4, 4, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4),
  Residencial_Plus = c(4, 4, 3, 3, 5, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 4, 4, 3, 4, 4, 4, 5, 4, 4, 3),
  Residencial = c(3, 3, 4, 3, 5, 3, 3, 4, 3, 3, 4, 3, 5, 3, 3, 4, 4, 3, 4, 4, 3, 5, 3, 4, 3),
  Medio = c(4, 2, 5, 2, 5, 3, 2, 4, 4, 2, 5, 2, 5, 3, 2, 4, 5, 4, 5, 4, 3, 5, 3, 5, 2)
)

# 7.4 Funci√≥n para calcular IVU segmentado
calcular_ivu_segmentado <- function(datos, factores_relevancia) {
  factores_disponibles <- intersect(factores_relevancia$Factor, names(datos))
  
  datos_ivu_seg <- datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%
    do({
      df_grupo <- .
      segmento_actual <- unique(df_grupo$Segmento)[1]
      segmento_columna <- gsub(" ", "_", segmento_actual)
      
      if(segmento_columna %in% names(factores_relevancia)) {
        col_index <- which(names(factores_relevancia) == segmento_columna)
        pesos_segmento <- data.frame(
          Factor = factores_relevancia$Factor,
          Peso = factores_relevancia[, col_index]
        )
        
        ivu_segmentado <- rep(0, nrow(df_grupo))
        peso_total <- 0
        
        for(factor in factores_disponibles) {
          if(factor %in% pesos_segmento$Factor && factor %in% names(df_grupo)) {
            peso <- pesos_segmento$Peso[pesos_segmento$Factor == factor]
            valores_factor <- df_grupo[[factor]]
            
            if(!all(is.na(valores_factor))) {
              min_val <- min(valores_factor, na.rm = TRUE)
              max_val <- max(valores_factor, na.rm = TRUE)
              
              if(max_val > min_val) {
                valores_norm <- (valores_factor - min_val) / (max_val - min_val)
                ivu_segmentado <- ivu_segmentado + (valores_norm * peso)
                peso_total <- peso_total + peso
              }
            }
          }
        }
        
        df_grupo$ivu_segmentado <- if(peso_total > 0) ivu_segmentado / peso_total else 0.5
        df_grupo$peso_total_usado <- peso_total
      } else {
        df_grupo$ivu_segmentado <- df_grupo$ivu
        df_grupo$peso_total_usado <- 1
      }
      
      df_grupo
    }) %>%
    ungroup()
  
  return(datos_ivu_seg)
}

# 7.5 Funci√≥n para calcular IVP segmentado
calcular_ivp_segmentado <- function(datos) {
  datos %>%
    group_by(segmento_nse) %>%
    filter(n() >= 3) %>%
    mutate(
      amenidades_norm_seg = {
        vals = score_amenidades_total
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      performance_norm_seg = {
        vals = eficiencia_comercial
        if(all(is.na(vals)) || max(vals, na.rm = TRUE) == min(vals, na.rm = TRUE)) {
          rep(0.5, length(vals))
        } else {
          min_val = min(vals, na.rm = TRUE)
          max_val = max(vals, na.rm = TRUE)
          (vals - min_val) / (max_val - min_val)
        }
      },
      
      ivp_segmentado = case_when(
        Segmento == "Premium Plus" ~ (amenidades_norm_seg * 0.45) + (performance_norm_seg * 0.20) + 
          (credibilidad_desarrollador_v2 * 0.25) + (propuesta_valor_norm_v2 * 0.10),
        Segmento == "Premium" ~ (amenidades_norm_seg * 0.35) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.20) + (propuesta_valor_norm_v2 * 0.15),
        Segmento == "Residencial Plus" ~ (amenidades_norm_seg * 0.25) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + (propuesta_valor_norm_v2 * 0.30),
        Segmento == "Residencial" ~ (amenidades_norm_seg * 0.20) + (performance_norm_seg * 0.30) + 
          (credibilidad_desarrollador_v2 * 0.15) + (propuesta_valor_norm_v2 * 0.35),
        Segmento == "Medio" ~ (amenidades_norm_seg * 0.15) + (performance_norm_seg * 0.35) + 
          (credibilidad_desarrollador_v2 * 0.10) + (propuesta_valor_norm_v2 * 0.40),
        TRUE ~ ivp_v2
      ),
      
      ivp_segmentado_categoria = cut(ivp_segmentado,
                                     breaks = c(0, 0.25, 0.45, 0.65, 0.80, 1.0),
                                     labels = c("Muy Bajo", "Bajo", "Medio", "Alto", "Muy Alto"),
                                     include.lowest = TRUE)
    ) %>%
    ungroup()
}

# 7.6 Funci√≥n para categorizaci√≥n 4S
agregar_categorizacion_4s <- function(datos) {
  datos %>%
    group_by(segmento_nse) %>%
    mutate(
      ivu_segmentado_categoria = cut(ivu_segmentado,
                                     breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1.0),
                                     labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
                                     include.lowest = TRUE),
      categoria_4s = case_when(
        ivu_segmentado >= 0.5 & ivp_segmentado >= 0.5 ~ "SUPERIOR",
        ivu_segmentado < 0.5 & ivp_segmentado >= 0.5 ~ "S√ìLIDO",
        ivu_segmentado >= 0.5 & ivp_segmentado < 0.5 ~ "SUSTENTABLE",
        TRUE ~ "SINGULAR"
      ),
      categoria_4s = factor(categoria_4s, 
                            levels = c("SUPERIOR", "S√ìLIDO", "SUSTENTABLE", "SINGULAR"),
                            ordered = FALSE)
    ) %>%
    ungroup()
}

# 7.7 Aplicar c√°lculos segmentados
datos_segmentados <- calcular_ivu_segmentado(datos_segmentados, factores_relevancia)
datos_segmentados <- calcular_ivp_segmentado(datos_segmentados)
datos_segmentados <- agregar_categorizacion_4s(datos_segmentados)

# Agregar datos segmentados al dataset principal
datos <- datos %>%
  left_join(
    datos_segmentados %>% 
      st_drop_geometry() %>%
      select(Proyecto, ivu_segmentado, ivp_segmentado, categoria_4s, 
             ivu_segmentado_categoria, ivp_segmentado_categoria),
    by = "Proyecto"
  )

cat("‚úÖ Versiones segmentadas creadas\n")

# ---- 8. M√âTRICAS INTEGRADAS ----
cat("\nüîó CREANDO M√âTRICAS INTEGRADAS...\n")

# 8.1 IVU Proyectado
datos <- datos %>%
  mutate(
    ivu_proyectado = ivu * (1 + (prob_incremento_nse * 0.3)),
    incremento_valor = ivu_proyectado - ivu,
    ivu_proyectado_categoria = cut(
      ivu_proyectado, 
      breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), 
      labels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"),
      include.lowest = TRUE
    )
  )

# 8.2 √çndice de Potencial de Inversi√≥n (IPI)
datos <- datos %>%
  mutate(
    indice_potencial_inversion = (ivu * 0.6) + (prob_incremento_nse * 0.4),
    categoria_potencial_inversion = cut(
      indice_potencial_inversion,
      breaks = c(0, 0.3, 0.5, 0.7, 1),
      labels = c("Bajo potencial", "Potencial moderado", "Alto potencial", "Excelente potencial"),
      include.lowest = TRUE
    )
  )

cat("‚úÖ M√©tricas integradas creadas\n")

# ---- 9. GUARDAR RESULTADOS ----
cat("\nüíæ GUARDANDO RESULTADOS...\n")

# 9.1 Guardar dataset principal
write.csv(datos, "base_con_indices_principales.csv", row.names = FALSE)

# 9.2 Guardar pesos y configuraciones
write.csv(data.frame(
  Factor = names(pesos_calculados),
  Peso = pesos_calculados
), "pesos_ivu_calculados.csv", row.names = FALSE)

saveRDS(pesos_por_segmento, "pesos_por_segmento.rds")
write.csv(factores_relevancia, "matriz_relevancia_factores.csv", row.names = FALSE)

# 9.3 Guardar estad√≠sticas de benchmarks
write.csv(benchmarks_actualizados, "benchmarks_por_segmento.csv", row.names = FALSE)
write.csv(track_record_v2, "track_record_desarrolladores.csv", row.names = FALSE)

# 9.4 Guardar datos segmentados
if(nrow(datos_segmentados) > 0) {
  write.csv(st_drop_geometry(datos_segmentados), "datos_segmentados_4s.csv", row.names = FALSE)
}

cat("‚úÖ Archivos guardados:\n")
cat("- base_con_indices_principales.csv (dataset principal)\n")
cat("- pesos_ivu_calculados.csv (pesos del IVU)\n")
cat("- pesos_por_segmento.rds (pesos espec√≠ficos por segmento)\n")
cat("- matriz_relevancia_factores.csv (matriz de relevancia)\n")
cat("- benchmarks_por_segmento.csv (benchmarks de performance)\n")
cat("- track_record_desarrolladores.csv (an√°lisis de desarrolladores)\n")
cat("- datos_segmentados_4s.csv (versiones segmentadas)\n")

# ---- 10. RESUMEN EJECUTIVO ----
cat("\n", rep("=", 60), "\n")
cat("SCRIPT 2: CONSTRUCCI√ìN DE √çNDICES PRINCIPALES - COMPLETADO\n")
cat(rep("=", 60), "\n")

cat("\nüìä ESTAD√çSTICAS FINALES:\n")
cat("- Proyectos procesados:", nrow(datos), "\n")
cat("- Variables totales:", ncol(datos), "\n")
cat("- Proyectos con IVU:", sum(!is.na(datos$ivu)), "\n")
cat("- Proyectos con IVP:", sum(!is.na(datos$ivp_v2)), "\n")
cat("- Proyectos con evoluci√≥n NSE:", sum(!is.na(datos$prob_incremento_nse)), "\n")
cat("- Proyectos segmentados:", ifelse(exists("datos_segmentados"), nrow(datos_segmentados), 0), "\n")

cat("\nüéØ √çNDICES CONSTRUIDOS:\n")
cat("‚úÖ IVU (√çndice de Valor por Ubicaci√≥n)\n")
cat("   - Con pesos calculados por correlaci√≥n\n")
cat("   - Versiones espec√≠ficas por segmento\n")
cat("   - Contribuciones por categor√≠a de factores\n")

cat("‚úÖ IVP (√çndice de Valor del Proyecto)\n")
cat("   - An√°lisis sofisticado de amenidades por categor√≠as\n")
cat("   - Performance comercial multifactorial\n")
cat("   - Track record de desarrolladores\n")
cat("   - Versiones segmentadas por mercado\n")

cat("‚úÖ Modelo de Evoluci√≥n NSE\n")
cat("   - Factores predictivos de cambio de NSE\n")
cat("   - Probabilidad de incremento\n")
cat("   - Tiempo estimado de cambio\n")

cat("‚úÖ Categorizaci√≥n 4S\n")
cat("   - SUPERIOR: Alto IVU + Alto IVP\n")
cat("   - S√ìLIDO: Bajo IVU + Alto IVP\n")
cat("   - SUSTENTABLE: Alto IVU + Bajo IVP\n")
cat("   - SINGULAR: Bajo IVU + Bajo IVP\n")

cat("‚úÖ M√©tricas Integradas\n")
cat("   - IVU Proyectado (con evoluci√≥n NSE)\n")
cat("   - √çndice de Potencial de Inversi√≥n\n")

cat("\nüìà M√âTRICAS DE CALIDAD:\n")
cat("- Factores analizados para IVU:", length(unlist(factores)), "\n")
cat("- Segmentos con pesos espec√≠ficos:", length(pesos_por_segmento), "\n")
cat("- Categor√≠as de amenidades:", length(amenidades_categorias_v2), "\n")

# Estad√≠sticas de distribuci√≥n por categor√≠as
if(!is.na(datos$categoria_4s[1])) {
  distribucion_4s <- table(datos$categoria_4s, useNA = "ifany")
  cat("\nüéØ Distribuci√≥n Categorizaci√≥n 4S:\n")
  for(categoria in names(distribucion_4s)) {
    pct <- round(distribucion_4s[categoria] / sum(distribucion_4s) * 100, 1)
    cat("   ", categoria, ":", distribucion_4s[categoria], "(", pct, "%)\n")
  }
}

cat("\nüîÑ SIGUIENTE PASO:\n")
cat("Ejecutar Script 3: INTEGRACI√ìN Y M√âTRICAS AVANZADAS\n")
cat("para integrar todos los √≠ndices y crear m√©tricas finales\n")

cat("\n", rep("=", 60), "\n")

# FINALIZAR CAPTURA
sink()
cat("üìÑ Log guardado en:", archivo_log, "\n")
